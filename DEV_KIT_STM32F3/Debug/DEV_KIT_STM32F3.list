
DEV_KIT_STM32F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  0800a000  0800a000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ccmram       00000008  10000000  0800a188  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00006cc4  0800a190  0800a190  0001a190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000730  08010e54  08010e54  00020e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08011584  08011584  00030070  2**0
                  CONTENTS
  5 .ARM          00000000  08011584  08011584  00030070  2**0
                  CONTENTS
  6 .preinit_array 00000000  08011584  08011584  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08011584  08011584  00021584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08011588  08011588  00021588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000070  20000000  0801158c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000a40  20000070  080115fc  00030070  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000ab0  080115fc  00030ab0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f1f4  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e93  00000000  00000000  0004f294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  00053128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001218  00000000  00000000  000544b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b02  00000000  00000000  000556d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a74c  00000000  00000000  000781d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4e91  00000000  00000000  0009291e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001577af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058f4  00000000  00000000  00157804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800a190 <__do_global_dtors_aux>:
 800a190:	b510      	push	{r4, lr}
 800a192:	4c05      	ldr	r4, [pc, #20]	; (800a1a8 <__do_global_dtors_aux+0x18>)
 800a194:	7823      	ldrb	r3, [r4, #0]
 800a196:	b933      	cbnz	r3, 800a1a6 <__do_global_dtors_aux+0x16>
 800a198:	4b04      	ldr	r3, [pc, #16]	; (800a1ac <__do_global_dtors_aux+0x1c>)
 800a19a:	b113      	cbz	r3, 800a1a2 <__do_global_dtors_aux+0x12>
 800a19c:	4804      	ldr	r0, [pc, #16]	; (800a1b0 <__do_global_dtors_aux+0x20>)
 800a19e:	f3af 8000 	nop.w
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	7023      	strb	r3, [r4, #0]
 800a1a6:	bd10      	pop	{r4, pc}
 800a1a8:	20000070 	.word	0x20000070
 800a1ac:	00000000 	.word	0x00000000
 800a1b0:	08010e3c 	.word	0x08010e3c

0800a1b4 <frame_dummy>:
 800a1b4:	b508      	push	{r3, lr}
 800a1b6:	4b03      	ldr	r3, [pc, #12]	; (800a1c4 <frame_dummy+0x10>)
 800a1b8:	b11b      	cbz	r3, 800a1c2 <frame_dummy+0xe>
 800a1ba:	4903      	ldr	r1, [pc, #12]	; (800a1c8 <frame_dummy+0x14>)
 800a1bc:	4803      	ldr	r0, [pc, #12]	; (800a1cc <frame_dummy+0x18>)
 800a1be:	f3af 8000 	nop.w
 800a1c2:	bd08      	pop	{r3, pc}
 800a1c4:	00000000 	.word	0x00000000
 800a1c8:	20000074 	.word	0x20000074
 800a1cc:	08010e3c 	.word	0x08010e3c

0800a1d0 <strlen>:
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1d6:	2a00      	cmp	r2, #0
 800a1d8:	d1fb      	bne.n	800a1d2 <strlen+0x2>
 800a1da:	1a18      	subs	r0, r3, r0
 800a1dc:	3801      	subs	r0, #1
 800a1de:	4770      	bx	lr

0800a1e0 <memchr>:
 800a1e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800a1e4:	2a10      	cmp	r2, #16
 800a1e6:	db2b      	blt.n	800a240 <memchr+0x60>
 800a1e8:	f010 0f07 	tst.w	r0, #7
 800a1ec:	d008      	beq.n	800a200 <memchr+0x20>
 800a1ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a1f2:	3a01      	subs	r2, #1
 800a1f4:	428b      	cmp	r3, r1
 800a1f6:	d02d      	beq.n	800a254 <memchr+0x74>
 800a1f8:	f010 0f07 	tst.w	r0, #7
 800a1fc:	b342      	cbz	r2, 800a250 <memchr+0x70>
 800a1fe:	d1f6      	bne.n	800a1ee <memchr+0xe>
 800a200:	b4f0      	push	{r4, r5, r6, r7}
 800a202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800a206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800a20a:	f022 0407 	bic.w	r4, r2, #7
 800a20e:	f07f 0700 	mvns.w	r7, #0
 800a212:	2300      	movs	r3, #0
 800a214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800a218:	3c08      	subs	r4, #8
 800a21a:	ea85 0501 	eor.w	r5, r5, r1
 800a21e:	ea86 0601 	eor.w	r6, r6, r1
 800a222:	fa85 f547 	uadd8	r5, r5, r7
 800a226:	faa3 f587 	sel	r5, r3, r7
 800a22a:	fa86 f647 	uadd8	r6, r6, r7
 800a22e:	faa5 f687 	sel	r6, r5, r7
 800a232:	b98e      	cbnz	r6, 800a258 <memchr+0x78>
 800a234:	d1ee      	bne.n	800a214 <memchr+0x34>
 800a236:	bcf0      	pop	{r4, r5, r6, r7}
 800a238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800a23c:	f002 0207 	and.w	r2, r2, #7
 800a240:	b132      	cbz	r2, 800a250 <memchr+0x70>
 800a242:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a246:	3a01      	subs	r2, #1
 800a248:	ea83 0301 	eor.w	r3, r3, r1
 800a24c:	b113      	cbz	r3, 800a254 <memchr+0x74>
 800a24e:	d1f8      	bne.n	800a242 <memchr+0x62>
 800a250:	2000      	movs	r0, #0
 800a252:	4770      	bx	lr
 800a254:	3801      	subs	r0, #1
 800a256:	4770      	bx	lr
 800a258:	2d00      	cmp	r5, #0
 800a25a:	bf06      	itte	eq
 800a25c:	4635      	moveq	r5, r6
 800a25e:	3803      	subeq	r0, #3
 800a260:	3807      	subne	r0, #7
 800a262:	f015 0f01 	tst.w	r5, #1
 800a266:	d107      	bne.n	800a278 <memchr+0x98>
 800a268:	3001      	adds	r0, #1
 800a26a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800a26e:	bf02      	ittt	eq
 800a270:	3001      	addeq	r0, #1
 800a272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 800a276:	3001      	addeq	r0, #1
 800a278:	bcf0      	pop	{r4, r5, r6, r7}
 800a27a:	3801      	subs	r0, #1
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop

0800a280 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DRV_TIM_PERIOD_ELAPSED_CALLBACK(TIM_HandleTypeDef *htim)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a290:	d102      	bne.n	800a298 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		DRV_TIMER_FNC(0);
 800a292:	2000      	movs	r0, #0
 800a294:	f005 f8f0 	bl	800f478 <DRV_TIMER_FNC>
	}
}
 800a298:	bf00      	nop
 800a29a:	3708      	adds	r7, #8
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <HAL_UART_RxCpltCallback>:

void DRV_UART_RX_CPLT_CALLBACK(UART_HandleTypeDef *huart)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a08      	ldr	r2, [pc, #32]	; (800a2d0 <HAL_UART_RxCpltCallback+0x30>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d10a      	bne.n	800a2c8 <HAL_UART_RxCpltCallback+0x28>
	{
		DRV_UART_RECEIVE_IT(&huart1, UART1_rxBuffer, 1);
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	4907      	ldr	r1, [pc, #28]	; (800a2d4 <HAL_UART_RxCpltCallback+0x34>)
 800a2b6:	4808      	ldr	r0, [pc, #32]	; (800a2d8 <HAL_UART_RxCpltCallback+0x38>)
 800a2b8:	f003 fe2e 	bl	800df18 <HAL_UART_Receive_IT>
	    UART_IRQ(RCU_USART1, UART1_rxBuffer[0]);
 800a2bc:	4b05      	ldr	r3, [pc, #20]	; (800a2d4 <HAL_UART_RxCpltCallback+0x34>)
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4803      	ldr	r0, [pc, #12]	; (800a2d0 <HAL_UART_RxCpltCallback+0x30>)
 800a2c4:	f005 f9e2 	bl	800f68c <UART_IRQ>
	}
}
 800a2c8:	bf00      	nop
 800a2ca:	3708      	adds	r7, #8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	40013800 	.word	0x40013800
 800a2d4:	10000004 	.word	0x10000004
 800a2d8:	200001b0 	.word	0x200001b0

0800a2dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a2e0:	f000 fe5e 	bl	800afa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a2e4:	f000 f846 	bl	800a374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a2e8:	f000 fa4e 	bl	800a788 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 800a2ec:	f000 fa2a 	bl	800a744 <MX_USB_PCD_Init>
  MX_RTC_Init();
 800a2f0:	f000 f8ac 	bl	800a44c <MX_RTC_Init>
  MX_TIM2_Init();
 800a2f4:	f000 f8d0 	bl	800a498 <MX_TIM2_Init>
  MX_UART4_Init();
 800a2f8:	f000 f934 	bl	800a564 <MX_UART4_Init>
  MX_UART5_Init();
 800a2fc:	f000 f962 	bl	800a5c4 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800a300:	f000 f990 	bl	800a624 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800a304:	f000 f9be 	bl	800a684 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800a308:	f000 f9ec 	bl	800a6e4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  DRV_TIM_BASE_START_IT(&htim2);
 800a30c:	4811      	ldr	r0, [pc, #68]	; (800a354 <main+0x78>)
 800a30e:	f003 f8e9 	bl	800d4e4 <HAL_TIM_Base_Start_IT>
  init_test_callback();
 800a312:	f005 fd25 	bl	800fd60 <init_test_callback>
  DRV_UART_RECEIVE_IT(&huart1, UART1_rxBuffer, 1);
 800a316:	2201      	movs	r2, #1
 800a318:	490f      	ldr	r1, [pc, #60]	; (800a358 <main+0x7c>)
 800a31a:	4810      	ldr	r0, [pc, #64]	; (800a35c <main+0x80>)
 800a31c:	f003 fdfc 	bl	800df18 <HAL_UART_Receive_IT>
  PLOG_Init();
 800a320:	f005 fc6c 	bl	800fbfc <PLOG_Init>
  flash_init();
 800a324:	f005 fb12 	bl	800f94c <flash_init>
  module_init();
 800a328:	f005 f83e 	bl	800f3a8 <module_init>
  LOGA(USER, "DEV KIT STMF303 Welcome!!\r\n");
 800a32c:	480c      	ldr	r0, [pc, #48]	; (800a360 <main+0x84>)
 800a32e:	f005 fd9f 	bl	800fe70 <iprintf>
 800a332:	bf00      	nop
 800a334:	2283      	movs	r2, #131	; 0x83
 800a336:	490b      	ldr	r1, [pc, #44]	; (800a364 <main+0x88>)
 800a338:	480b      	ldr	r0, [pc, #44]	; (800a368 <main+0x8c>)
 800a33a:	f005 fd99 	bl	800fe70 <iprintf>
 800a33e:	480b      	ldr	r0, [pc, #44]	; (800a36c <main+0x90>)
 800a340:	f005 fd96 	bl	800fe70 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	DRV_RUN();
 800a344:	f005 f92e 	bl	800f5a4 <DRV_RUN>
	TEST_CBK.run();
 800a348:	4b09      	ldr	r3, [pc, #36]	; (800a370 <main+0x94>)
 800a34a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a34e:	4798      	blx	r3
	DRV_RUN();
 800a350:	e7f8      	b.n	800a344 <main+0x68>
 800a352:	bf00      	nop
 800a354:	200002e0 	.word	0x200002e0
 800a358:	10000004 	.word	0x10000004
 800a35c:	200001b0 	.word	0x200001b0
 800a360:	08010e54 	.word	0x08010e54
 800a364:	08011134 	.word	0x08011134
 800a368:	08010e5c 	.word	0x08010e5c
 800a36c:	08010e88 	.word	0x08010e88
 800a370:	20000a08 	.word	0x20000a08

0800a374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b09e      	sub	sp, #120	; 0x78
 800a378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a37a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a37e:	2228      	movs	r2, #40	; 0x28
 800a380:	2100      	movs	r1, #0
 800a382:	4618      	mov	r0, r3
 800a384:	f005 fd6c 	bl	800fe60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a388:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a38c:	2200      	movs	r2, #0
 800a38e:	601a      	str	r2, [r3, #0]
 800a390:	605a      	str	r2, [r3, #4]
 800a392:	609a      	str	r2, [r3, #8]
 800a394:	60da      	str	r2, [r3, #12]
 800a396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a398:	463b      	mov	r3, r7
 800a39a:	223c      	movs	r2, #60	; 0x3c
 800a39c:	2100      	movs	r1, #0
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f005 fd5e 	bl	800fe60 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800a3a4:	2309      	movs	r3, #9
 800a3a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800a3a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800a3ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a3ba:	2302      	movs	r3, #2
 800a3bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a3be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a3c2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800a3c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800a3c8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a3ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f001 fc3c 	bl	800bc4c <HAL_RCC_OscConfig>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d001      	beq.n	800a3de <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800a3da:	f000 fa93 	bl	800a904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a3de:	230f      	movs	r3, #15
 800a3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a3e2:	2302      	movs	r3, #2
 800a3e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a3ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a3f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a3f8:	2102      	movs	r1, #2
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f002 fb2e 	bl	800ca5c <HAL_RCC_ClockConfig>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <SystemClock_Config+0x96>
  {
    Error_Handler();
 800a406:	f000 fa7d 	bl	800a904 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 800a40a:	4b0f      	ldr	r3, [pc, #60]	; (800a448 <SystemClock_Config+0xd4>)
 800a40c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a40e:	2300      	movs	r3, #0
 800a410:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a412:	2300      	movs	r3, #0
 800a414:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800a416:	2300      	movs	r3, #0
 800a418:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800a41a:	2300      	movs	r3, #0
 800a41c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800a41e:	2300      	movs	r3, #0
 800a420:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a422:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a426:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800a428:	2300      	movs	r3, #0
 800a42a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a42c:	463b      	mov	r3, r7
 800a42e:	4618      	mov	r0, r3
 800a430:	f002 fd4a 	bl	800cec8 <HAL_RCCEx_PeriphCLKConfig>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800a43a:	f000 fa63 	bl	800a904 <Error_Handler>
  }
}
 800a43e:	bf00      	nop
 800a440:	3778      	adds	r7, #120	; 0x78
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	0003001f 	.word	0x0003001f

0800a44c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800a450:	4b0f      	ldr	r3, [pc, #60]	; (800a490 <MX_RTC_Init+0x44>)
 800a452:	4a10      	ldr	r2, [pc, #64]	; (800a494 <MX_RTC_Init+0x48>)
 800a454:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a456:	4b0e      	ldr	r3, [pc, #56]	; (800a490 <MX_RTC_Init+0x44>)
 800a458:	2200      	movs	r2, #0
 800a45a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a45c:	4b0c      	ldr	r3, [pc, #48]	; (800a490 <MX_RTC_Init+0x44>)
 800a45e:	227f      	movs	r2, #127	; 0x7f
 800a460:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a462:	4b0b      	ldr	r3, [pc, #44]	; (800a490 <MX_RTC_Init+0x44>)
 800a464:	22ff      	movs	r2, #255	; 0xff
 800a466:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a468:	4b09      	ldr	r3, [pc, #36]	; (800a490 <MX_RTC_Init+0x44>)
 800a46a:	2200      	movs	r2, #0
 800a46c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a46e:	4b08      	ldr	r3, [pc, #32]	; (800a490 <MX_RTC_Init+0x44>)
 800a470:	2200      	movs	r2, #0
 800a472:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a474:	4b06      	ldr	r3, [pc, #24]	; (800a490 <MX_RTC_Init+0x44>)
 800a476:	2200      	movs	r2, #0
 800a478:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a47a:	4805      	ldr	r0, [pc, #20]	; (800a490 <MX_RTC_Init+0x44>)
 800a47c:	f002 fed4 	bl	800d228 <HAL_RTC_Init>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800a486:	f000 fa3d 	bl	800a904 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a48a:	bf00      	nop
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	20000238 	.word	0x20000238
 800a494:	40002800 	.word	0x40002800

0800a498 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b088      	sub	sp, #32
 800a49c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a49e:	f107 0310 	add.w	r3, r7, #16
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	601a      	str	r2, [r3, #0]
 800a4a6:	605a      	str	r2, [r3, #4]
 800a4a8:	609a      	str	r2, [r3, #8]
 800a4aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a4ac:	1d3b      	adds	r3, r7, #4
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	601a      	str	r2, [r3, #0]
 800a4b2:	605a      	str	r2, [r3, #4]
 800a4b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a4b6:	4b26      	ldr	r3, [pc, #152]	; (800a550 <MX_TIM2_Init+0xb8>)
 800a4b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a4bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 800a4be:	4b24      	ldr	r3, [pc, #144]	; (800a550 <MX_TIM2_Init+0xb8>)
 800a4c0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800a4c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a4c6:	4b22      	ldr	r3, [pc, #136]	; (800a550 <MX_TIM2_Init+0xb8>)
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9000-1;
 800a4cc:	4b20      	ldr	r3, [pc, #128]	; (800a550 <MX_TIM2_Init+0xb8>)
 800a4ce:	f242 3227 	movw	r2, #8999	; 0x2327
 800a4d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a4d4:	4b1e      	ldr	r3, [pc, #120]	; (800a550 <MX_TIM2_Init+0xb8>)
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a4da:	4b1d      	ldr	r3, [pc, #116]	; (800a550 <MX_TIM2_Init+0xb8>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a4e0:	481b      	ldr	r0, [pc, #108]	; (800a550 <MX_TIM2_Init+0xb8>)
 800a4e2:	f002 ffa7 	bl	800d434 <HAL_TIM_Base_Init>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d001      	beq.n	800a4f0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800a4ec:	f000 fa0a 	bl	800a904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a4f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a4f6:	f107 0310 	add.w	r3, r7, #16
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	4814      	ldr	r0, [pc, #80]	; (800a550 <MX_TIM2_Init+0xb8>)
 800a4fe:	f003 f97a 	bl	800d7f6 <HAL_TIM_ConfigClockSource>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d001      	beq.n	800a50c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800a508:	f000 f9fc 	bl	800a904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a50c:	2300      	movs	r3, #0
 800a50e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a510:	2300      	movs	r3, #0
 800a512:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a514:	1d3b      	adds	r3, r7, #4
 800a516:	4619      	mov	r1, r3
 800a518:	480d      	ldr	r0, [pc, #52]	; (800a550 <MX_TIM2_Init+0xb8>)
 800a51a:	f003 fb87 	bl	800dc2c <HAL_TIMEx_MasterConfigSynchronization>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d001      	beq.n	800a528 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800a524:	f000 f9ee 	bl	800a904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	LOGA(INF_FILE, "REGISTER\r\n");
 800a528:	480a      	ldr	r0, [pc, #40]	; (800a554 <MX_TIM2_Init+0xbc>)
 800a52a:	f005 fca1 	bl	800fe70 <iprintf>
 800a52e:	bf00      	nop
 800a530:	f44f 728a 	mov.w	r2, #276	; 0x114
 800a534:	4908      	ldr	r1, [pc, #32]	; (800a558 <MX_TIM2_Init+0xc0>)
 800a536:	4809      	ldr	r0, [pc, #36]	; (800a55c <MX_TIM2_Init+0xc4>)
 800a538:	f005 fc9a 	bl	800fe70 <iprintf>
 800a53c:	4808      	ldr	r0, [pc, #32]	; (800a560 <MX_TIM2_Init+0xc8>)
 800a53e:	f005 fc97 	bl	800fe70 <iprintf>
	Drv_RegisterTIMER();
 800a542:	f004 ff81 	bl	800f448 <Drv_RegisterTIMER>
  /* USER CODE END TIM2_Init 2 */

}
 800a546:	bf00      	nop
 800a548:	3720      	adds	r7, #32
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	200002e0 	.word	0x200002e0
 800a554:	08010e90 	.word	0x08010e90
 800a558:	0801113c 	.word	0x0801113c
 800a55c:	08010e98 	.word	0x08010e98
 800a560:	08010e88 	.word	0x08010e88

0800a564 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART4_Init(void)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800a568:	4b14      	ldr	r3, [pc, #80]	; (800a5bc <MX_UART4_Init+0x58>)
 800a56a:	4a15      	ldr	r2, [pc, #84]	; (800a5c0 <MX_UART4_Init+0x5c>)
 800a56c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800a56e:	4b13      	ldr	r3, [pc, #76]	; (800a5bc <MX_UART4_Init+0x58>)
 800a570:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a574:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800a576:	4b11      	ldr	r3, [pc, #68]	; (800a5bc <MX_UART4_Init+0x58>)
 800a578:	2200      	movs	r2, #0
 800a57a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a57c:	4b0f      	ldr	r3, [pc, #60]	; (800a5bc <MX_UART4_Init+0x58>)
 800a57e:	2200      	movs	r2, #0
 800a580:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800a582:	4b0e      	ldr	r3, [pc, #56]	; (800a5bc <MX_UART4_Init+0x58>)
 800a584:	2200      	movs	r2, #0
 800a586:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a588:	4b0c      	ldr	r3, [pc, #48]	; (800a5bc <MX_UART4_Init+0x58>)
 800a58a:	220c      	movs	r2, #12
 800a58c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a58e:	4b0b      	ldr	r3, [pc, #44]	; (800a5bc <MX_UART4_Init+0x58>)
 800a590:	2200      	movs	r2, #0
 800a592:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a594:	4b09      	ldr	r3, [pc, #36]	; (800a5bc <MX_UART4_Init+0x58>)
 800a596:	2200      	movs	r2, #0
 800a598:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a59a:	4b08      	ldr	r3, [pc, #32]	; (800a5bc <MX_UART4_Init+0x58>)
 800a59c:	2200      	movs	r2, #0
 800a59e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a5a0:	4b06      	ldr	r3, [pc, #24]	; (800a5bc <MX_UART4_Init+0x58>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a5a6:	4805      	ldr	r0, [pc, #20]	; (800a5bc <MX_UART4_Init+0x58>)
 800a5a8:	f003 fbde 	bl	800dd68 <HAL_UART_Init>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d001      	beq.n	800a5b6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800a5b2:	f000 f9a7 	bl	800a904 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800a5b6:	bf00      	nop
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	20000258 	.word	0x20000258
 800a5c0:	40004c00 	.word	0x40004c00

0800a5c4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART5_Init(void)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800a5c8:	4b14      	ldr	r3, [pc, #80]	; (800a61c <MX_UART5_Init+0x58>)
 800a5ca:	4a15      	ldr	r2, [pc, #84]	; (800a620 <MX_UART5_Init+0x5c>)
 800a5cc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800a5ce:	4b13      	ldr	r3, [pc, #76]	; (800a61c <MX_UART5_Init+0x58>)
 800a5d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a5d4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800a5d6:	4b11      	ldr	r3, [pc, #68]	; (800a61c <MX_UART5_Init+0x58>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800a5dc:	4b0f      	ldr	r3, [pc, #60]	; (800a61c <MX_UART5_Init+0x58>)
 800a5de:	2200      	movs	r2, #0
 800a5e0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800a5e2:	4b0e      	ldr	r3, [pc, #56]	; (800a61c <MX_UART5_Init+0x58>)
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800a5e8:	4b0c      	ldr	r3, [pc, #48]	; (800a61c <MX_UART5_Init+0x58>)
 800a5ea:	220c      	movs	r2, #12
 800a5ec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a5ee:	4b0b      	ldr	r3, [pc, #44]	; (800a61c <MX_UART5_Init+0x58>)
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800a5f4:	4b09      	ldr	r3, [pc, #36]	; (800a61c <MX_UART5_Init+0x58>)
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a5fa:	4b08      	ldr	r3, [pc, #32]	; (800a61c <MX_UART5_Init+0x58>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a600:	4b06      	ldr	r3, [pc, #24]	; (800a61c <MX_UART5_Init+0x58>)
 800a602:	2200      	movs	r2, #0
 800a604:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800a606:	4805      	ldr	r0, [pc, #20]	; (800a61c <MX_UART5_Init+0x58>)
 800a608:	f003 fbae 	bl	800dd68 <HAL_UART_Init>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d001      	beq.n	800a616 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800a612:	f000 f977 	bl	800a904 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800a616:	bf00      	nop
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	20000128 	.word	0x20000128
 800a620:	40005000 	.word	0x40005000

0800a624 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a628:	4b14      	ldr	r3, [pc, #80]	; (800a67c <MX_USART1_UART_Init+0x58>)
 800a62a:	4a15      	ldr	r2, [pc, #84]	; (800a680 <MX_USART1_UART_Init+0x5c>)
 800a62c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a62e:	4b13      	ldr	r3, [pc, #76]	; (800a67c <MX_USART1_UART_Init+0x58>)
 800a630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a634:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a636:	4b11      	ldr	r3, [pc, #68]	; (800a67c <MX_USART1_UART_Init+0x58>)
 800a638:	2200      	movs	r2, #0
 800a63a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a63c:	4b0f      	ldr	r3, [pc, #60]	; (800a67c <MX_USART1_UART_Init+0x58>)
 800a63e:	2200      	movs	r2, #0
 800a640:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a642:	4b0e      	ldr	r3, [pc, #56]	; (800a67c <MX_USART1_UART_Init+0x58>)
 800a644:	2200      	movs	r2, #0
 800a646:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a648:	4b0c      	ldr	r3, [pc, #48]	; (800a67c <MX_USART1_UART_Init+0x58>)
 800a64a:	220c      	movs	r2, #12
 800a64c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a64e:	4b0b      	ldr	r3, [pc, #44]	; (800a67c <MX_USART1_UART_Init+0x58>)
 800a650:	2200      	movs	r2, #0
 800a652:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a654:	4b09      	ldr	r3, [pc, #36]	; (800a67c <MX_USART1_UART_Init+0x58>)
 800a656:	2200      	movs	r2, #0
 800a658:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a65a:	4b08      	ldr	r3, [pc, #32]	; (800a67c <MX_USART1_UART_Init+0x58>)
 800a65c:	2200      	movs	r2, #0
 800a65e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a660:	4b06      	ldr	r3, [pc, #24]	; (800a67c <MX_USART1_UART_Init+0x58>)
 800a662:	2200      	movs	r2, #0
 800a664:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a666:	4805      	ldr	r0, [pc, #20]	; (800a67c <MX_USART1_UART_Init+0x58>)
 800a668:	f003 fb7e 	bl	800dd68 <HAL_UART_Init>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d001      	beq.n	800a676 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800a672:	f000 f947 	bl	800a904 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a676:	bf00      	nop
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	200001b0 	.word	0x200001b0
 800a680:	40013800 	.word	0x40013800

0800a684 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a688:	4b14      	ldr	r3, [pc, #80]	; (800a6dc <MX_USART2_UART_Init+0x58>)
 800a68a:	4a15      	ldr	r2, [pc, #84]	; (800a6e0 <MX_USART2_UART_Init+0x5c>)
 800a68c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a68e:	4b13      	ldr	r3, [pc, #76]	; (800a6dc <MX_USART2_UART_Init+0x58>)
 800a690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a696:	4b11      	ldr	r3, [pc, #68]	; (800a6dc <MX_USART2_UART_Init+0x58>)
 800a698:	2200      	movs	r2, #0
 800a69a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a69c:	4b0f      	ldr	r3, [pc, #60]	; (800a6dc <MX_USART2_UART_Init+0x58>)
 800a69e:	2200      	movs	r2, #0
 800a6a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a6a2:	4b0e      	ldr	r3, [pc, #56]	; (800a6dc <MX_USART2_UART_Init+0x58>)
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a6a8:	4b0c      	ldr	r3, [pc, #48]	; (800a6dc <MX_USART2_UART_Init+0x58>)
 800a6aa:	220c      	movs	r2, #12
 800a6ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a6ae:	4b0b      	ldr	r3, [pc, #44]	; (800a6dc <MX_USART2_UART_Init+0x58>)
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a6b4:	4b09      	ldr	r3, [pc, #36]	; (800a6dc <MX_USART2_UART_Init+0x58>)
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a6ba:	4b08      	ldr	r3, [pc, #32]	; (800a6dc <MX_USART2_UART_Init+0x58>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a6c0:	4b06      	ldr	r3, [pc, #24]	; (800a6dc <MX_USART2_UART_Init+0x58>)
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a6c6:	4805      	ldr	r0, [pc, #20]	; (800a6dc <MX_USART2_UART_Init+0x58>)
 800a6c8:	f003 fb4e 	bl	800dd68 <HAL_UART_Init>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800a6d2:	f000 f917 	bl	800a904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a6d6:	bf00      	nop
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	2000032c 	.word	0x2000032c
 800a6e0:	40004400 	.word	0x40004400

0800a6e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800a6e8:	4b14      	ldr	r3, [pc, #80]	; (800a73c <MX_USART3_UART_Init+0x58>)
 800a6ea:	4a15      	ldr	r2, [pc, #84]	; (800a740 <MX_USART3_UART_Init+0x5c>)
 800a6ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800a6ee:	4b13      	ldr	r3, [pc, #76]	; (800a73c <MX_USART3_UART_Init+0x58>)
 800a6f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a6f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a6f6:	4b11      	ldr	r3, [pc, #68]	; (800a73c <MX_USART3_UART_Init+0x58>)
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a6fc:	4b0f      	ldr	r3, [pc, #60]	; (800a73c <MX_USART3_UART_Init+0x58>)
 800a6fe:	2200      	movs	r2, #0
 800a700:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a702:	4b0e      	ldr	r3, [pc, #56]	; (800a73c <MX_USART3_UART_Init+0x58>)
 800a704:	2200      	movs	r2, #0
 800a706:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a708:	4b0c      	ldr	r3, [pc, #48]	; (800a73c <MX_USART3_UART_Init+0x58>)
 800a70a:	220c      	movs	r2, #12
 800a70c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a70e:	4b0b      	ldr	r3, [pc, #44]	; (800a73c <MX_USART3_UART_Init+0x58>)
 800a710:	2200      	movs	r2, #0
 800a712:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a714:	4b09      	ldr	r3, [pc, #36]	; (800a73c <MX_USART3_UART_Init+0x58>)
 800a716:	2200      	movs	r2, #0
 800a718:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a71a:	4b08      	ldr	r3, [pc, #32]	; (800a73c <MX_USART3_UART_Init+0x58>)
 800a71c:	2200      	movs	r2, #0
 800a71e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a720:	4b06      	ldr	r3, [pc, #24]	; (800a73c <MX_USART3_UART_Init+0x58>)
 800a722:	2200      	movs	r2, #0
 800a724:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a726:	4805      	ldr	r0, [pc, #20]	; (800a73c <MX_USART3_UART_Init+0x58>)
 800a728:	f003 fb1e 	bl	800dd68 <HAL_UART_Init>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d001      	beq.n	800a736 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800a732:	f000 f8e7 	bl	800a904 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a736:	bf00      	nop
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	200000a0 	.word	0x200000a0
 800a740:	40004800 	.word	0x40004800

0800a744 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_PCD_Init(void)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800a748:	4b0d      	ldr	r3, [pc, #52]	; (800a780 <MX_USB_PCD_Init+0x3c>)
 800a74a:	4a0e      	ldr	r2, [pc, #56]	; (800a784 <MX_USB_PCD_Init+0x40>)
 800a74c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a74e:	4b0c      	ldr	r3, [pc, #48]	; (800a780 <MX_USB_PCD_Init+0x3c>)
 800a750:	2208      	movs	r2, #8
 800a752:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a754:	4b0a      	ldr	r3, [pc, #40]	; (800a780 <MX_USB_PCD_Init+0x3c>)
 800a756:	2202      	movs	r2, #2
 800a758:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a75a:	4b09      	ldr	r3, [pc, #36]	; (800a780 <MX_USB_PCD_Init+0x3c>)
 800a75c:	2202      	movs	r2, #2
 800a75e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a760:	4b07      	ldr	r3, [pc, #28]	; (800a780 <MX_USB_PCD_Init+0x3c>)
 800a762:	2200      	movs	r2, #0
 800a764:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a766:	4b06      	ldr	r3, [pc, #24]	; (800a780 <MX_USB_PCD_Init+0x3c>)
 800a768:	2200      	movs	r2, #0
 800a76a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a76c:	4804      	ldr	r0, [pc, #16]	; (800a780 <MX_USB_PCD_Init+0x3c>)
 800a76e:	f001 f99b 	bl	800baa8 <HAL_PCD_Init>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d001      	beq.n	800a77c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800a778:	f000 f8c4 	bl	800a904 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800a77c:	bf00      	nop
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	200003b4 	.word	0x200003b4
 800a784:	40005c00 	.word	0x40005c00

0800a788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b08c      	sub	sp, #48	; 0x30
 800a78c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a78e:	f107 031c 	add.w	r3, r7, #28
 800a792:	2200      	movs	r2, #0
 800a794:	601a      	str	r2, [r3, #0]
 800a796:	605a      	str	r2, [r3, #4]
 800a798:	609a      	str	r2, [r3, #8]
 800a79a:	60da      	str	r2, [r3, #12]
 800a79c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a79e:	4b4d      	ldr	r3, [pc, #308]	; (800a8d4 <MX_GPIO_Init+0x14c>)
 800a7a0:	695b      	ldr	r3, [r3, #20]
 800a7a2:	4a4c      	ldr	r2, [pc, #304]	; (800a8d4 <MX_GPIO_Init+0x14c>)
 800a7a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a7a8:	6153      	str	r3, [r2, #20]
 800a7aa:	4b4a      	ldr	r3, [pc, #296]	; (800a8d4 <MX_GPIO_Init+0x14c>)
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7b2:	61bb      	str	r3, [r7, #24]
 800a7b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a7b6:	4b47      	ldr	r3, [pc, #284]	; (800a8d4 <MX_GPIO_Init+0x14c>)
 800a7b8:	695b      	ldr	r3, [r3, #20]
 800a7ba:	4a46      	ldr	r2, [pc, #280]	; (800a8d4 <MX_GPIO_Init+0x14c>)
 800a7bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7c0:	6153      	str	r3, [r2, #20]
 800a7c2:	4b44      	ldr	r3, [pc, #272]	; (800a8d4 <MX_GPIO_Init+0x14c>)
 800a7c4:	695b      	ldr	r3, [r3, #20]
 800a7c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7ca:	617b      	str	r3, [r7, #20]
 800a7cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a7ce:	4b41      	ldr	r3, [pc, #260]	; (800a8d4 <MX_GPIO_Init+0x14c>)
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	4a40      	ldr	r2, [pc, #256]	; (800a8d4 <MX_GPIO_Init+0x14c>)
 800a7d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a7d8:	6153      	str	r3, [r2, #20]
 800a7da:	4b3e      	ldr	r3, [pc, #248]	; (800a8d4 <MX_GPIO_Init+0x14c>)
 800a7dc:	695b      	ldr	r3, [r3, #20]
 800a7de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7e2:	613b      	str	r3, [r7, #16]
 800a7e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a7e6:	4b3b      	ldr	r3, [pc, #236]	; (800a8d4 <MX_GPIO_Init+0x14c>)
 800a7e8:	695b      	ldr	r3, [r3, #20]
 800a7ea:	4a3a      	ldr	r2, [pc, #232]	; (800a8d4 <MX_GPIO_Init+0x14c>)
 800a7ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7f0:	6153      	str	r3, [r2, #20]
 800a7f2:	4b38      	ldr	r3, [pc, #224]	; (800a8d4 <MX_GPIO_Init+0x14c>)
 800a7f4:	695b      	ldr	r3, [r3, #20]
 800a7f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7fa:	60fb      	str	r3, [r7, #12]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a7fe:	4b35      	ldr	r3, [pc, #212]	; (800a8d4 <MX_GPIO_Init+0x14c>)
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	4a34      	ldr	r2, [pc, #208]	; (800a8d4 <MX_GPIO_Init+0x14c>)
 800a804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a808:	6153      	str	r3, [r2, #20]
 800a80a:	4b32      	ldr	r3, [pc, #200]	; (800a8d4 <MX_GPIO_Init+0x14c>)
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a812:	60bb      	str	r3, [r7, #8]
 800a814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a816:	4b2f      	ldr	r3, [pc, #188]	; (800a8d4 <MX_GPIO_Init+0x14c>)
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	4a2e      	ldr	r2, [pc, #184]	; (800a8d4 <MX_GPIO_Init+0x14c>)
 800a81c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a820:	6153      	str	r3, [r2, #20]
 800a822:	4b2c      	ldr	r3, [pc, #176]	; (800a8d4 <MX_GPIO_Init+0x14c>)
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a82a:	607b      	str	r3, [r7, #4]
 800a82c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800a82e:	2200      	movs	r2, #0
 800a830:	2108      	movs	r1, #8
 800a832:	4829      	ldr	r0, [pc, #164]	; (800a8d8 <MX_GPIO_Init+0x150>)
 800a834:	f001 f920 	bl	800ba78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800a838:	2337      	movs	r3, #55	; 0x37
 800a83a:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a83c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800a840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a842:	2300      	movs	r3, #0
 800a844:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a846:	f107 031c 	add.w	r3, r7, #28
 800a84a:	4619      	mov	r1, r3
 800a84c:	4822      	ldr	r0, [pc, #136]	; (800a8d8 <MX_GPIO_Init+0x150>)
 800a84e:	f000 ff99 	bl	800b784 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800a852:	2308      	movs	r3, #8
 800a854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a856:	2301      	movs	r3, #1
 800a858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a85a:	2300      	movs	r3, #0
 800a85c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a85e:	2300      	movs	r3, #0
 800a860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800a862:	f107 031c 	add.w	r3, r7, #28
 800a866:	4619      	mov	r1, r3
 800a868:	481b      	ldr	r0, [pc, #108]	; (800a8d8 <MX_GPIO_Init+0x150>)
 800a86a:	f000 ff8b 	bl	800b784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a86e:	2301      	movs	r3, #1
 800a870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a872:	2300      	movs	r3, #0
 800a874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a876:	2300      	movs	r3, #0
 800a878:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a87a:	f107 031c 	add.w	r3, r7, #28
 800a87e:	4619      	mov	r1, r3
 800a880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a884:	f000 ff7e 	bl	800b784 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800a888:	23e0      	movs	r3, #224	; 0xe0
 800a88a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a88c:	2302      	movs	r3, #2
 800a88e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a890:	2300      	movs	r3, #0
 800a892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a894:	2303      	movs	r3, #3
 800a896:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a898:	2305      	movs	r3, #5
 800a89a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a89c:	f107 031c 	add.w	r3, r7, #28
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a8a6:	f000 ff6d 	bl	800b784 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800a8aa:	23c0      	movs	r3, #192	; 0xc0
 800a8ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a8ae:	2312      	movs	r3, #18
 800a8b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a8b6:	2303      	movs	r3, #3
 800a8b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a8ba:	2304      	movs	r3, #4
 800a8bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a8be:	f107 031c 	add.w	r3, r7, #28
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	4805      	ldr	r0, [pc, #20]	; (800a8dc <MX_GPIO_Init+0x154>)
 800a8c6:	f000 ff5d 	bl	800b784 <HAL_GPIO_Init>

}
 800a8ca:	bf00      	nop
 800a8cc:	3730      	adds	r7, #48	; 0x30
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	40021000 	.word	0x40021000
 800a8d8:	48001000 	.word	0x48001000
 800a8dc:	48000400 	.word	0x48000400

0800a8e0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800a8e8:	1d39      	adds	r1, r7, #4
 800a8ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	4803      	ldr	r0, [pc, #12]	; (800a900 <__io_putchar+0x20>)
 800a8f2:	f003 fa87 	bl	800de04 <HAL_UART_Transmit>

  return ch;
 800a8f6:	687b      	ldr	r3, [r7, #4]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3708      	adds	r7, #8
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	200001b0 	.word	0x200001b0

0800a904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a904:	b480      	push	{r7}
 800a906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a908:	b672      	cpsid	i
}
 800a90a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a90c:	e7fe      	b.n	800a90c <Error_Handler+0x8>
	...

0800a910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a916:	4b0f      	ldr	r3, [pc, #60]	; (800a954 <HAL_MspInit+0x44>)
 800a918:	699b      	ldr	r3, [r3, #24]
 800a91a:	4a0e      	ldr	r2, [pc, #56]	; (800a954 <HAL_MspInit+0x44>)
 800a91c:	f043 0301 	orr.w	r3, r3, #1
 800a920:	6193      	str	r3, [r2, #24]
 800a922:	4b0c      	ldr	r3, [pc, #48]	; (800a954 <HAL_MspInit+0x44>)
 800a924:	699b      	ldr	r3, [r3, #24]
 800a926:	f003 0301 	and.w	r3, r3, #1
 800a92a:	607b      	str	r3, [r7, #4]
 800a92c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a92e:	4b09      	ldr	r3, [pc, #36]	; (800a954 <HAL_MspInit+0x44>)
 800a930:	69db      	ldr	r3, [r3, #28]
 800a932:	4a08      	ldr	r2, [pc, #32]	; (800a954 <HAL_MspInit+0x44>)
 800a934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a938:	61d3      	str	r3, [r2, #28]
 800a93a:	4b06      	ldr	r3, [pc, #24]	; (800a954 <HAL_MspInit+0x44>)
 800a93c:	69db      	ldr	r3, [r3, #28]
 800a93e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a942:	603b      	str	r3, [r7, #0]
 800a944:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800a946:	2007      	movs	r0, #7
 800a948:	f000 fc60 	bl	800b20c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a94c:	bf00      	nop
 800a94e:	3708      	adds	r7, #8
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	40021000 	.word	0x40021000

0800a958 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a0d      	ldr	r2, [pc, #52]	; (800a99c <HAL_RTC_MspInit+0x44>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d111      	bne.n	800a98e <HAL_RTC_MspInit+0x36>
 800a96a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a96e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	fa93 f3a3 	rbit	r3, r3
 800a976:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a978:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a97a:	fab3 f383 	clz	r3, r3
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	461a      	mov	r2, r3
 800a982:	4b07      	ldr	r3, [pc, #28]	; (800a9a0 <HAL_RTC_MspInit+0x48>)
 800a984:	4413      	add	r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	461a      	mov	r2, r3
 800a98a:	2301      	movs	r3, #1
 800a98c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800a98e:	bf00      	nop
 800a990:	3714      	adds	r7, #20
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	40002800 	.word	0x40002800
 800a9a0:	10908100 	.word	0x10908100

0800a9a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9b4:	d113      	bne.n	800a9de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a9b6:	4b0c      	ldr	r3, [pc, #48]	; (800a9e8 <HAL_TIM_Base_MspInit+0x44>)
 800a9b8:	69db      	ldr	r3, [r3, #28]
 800a9ba:	4a0b      	ldr	r2, [pc, #44]	; (800a9e8 <HAL_TIM_Base_MspInit+0x44>)
 800a9bc:	f043 0301 	orr.w	r3, r3, #1
 800a9c0:	61d3      	str	r3, [r2, #28]
 800a9c2:	4b09      	ldr	r3, [pc, #36]	; (800a9e8 <HAL_TIM_Base_MspInit+0x44>)
 800a9c4:	69db      	ldr	r3, [r3, #28]
 800a9c6:	f003 0301 	and.w	r3, r3, #1
 800a9ca:	60fb      	str	r3, [r7, #12]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	201c      	movs	r0, #28
 800a9d4:	f000 fc25 	bl	800b222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a9d8:	201c      	movs	r0, #28
 800a9da:	f000 fc3e 	bl	800b25a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800a9de:	bf00      	nop
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	40021000 	.word	0x40021000

0800a9ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b092      	sub	sp, #72	; 0x48
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	601a      	str	r2, [r3, #0]
 800a9fc:	605a      	str	r2, [r3, #4]
 800a9fe:	609a      	str	r2, [r3, #8]
 800aa00:	60da      	str	r2, [r3, #12]
 800aa02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a97      	ldr	r2, [pc, #604]	; (800ac68 <HAL_UART_MspInit+0x27c>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d131      	bne.n	800aa72 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800aa0e:	4b97      	ldr	r3, [pc, #604]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800aa10:	69db      	ldr	r3, [r3, #28]
 800aa12:	4a96      	ldr	r2, [pc, #600]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800aa14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa18:	61d3      	str	r3, [r2, #28]
 800aa1a:	4b94      	ldr	r3, [pc, #592]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800aa1c:	69db      	ldr	r3, [r3, #28]
 800aa1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa22:	633b      	str	r3, [r7, #48]	; 0x30
 800aa24:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa26:	4b91      	ldr	r3, [pc, #580]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800aa28:	695b      	ldr	r3, [r3, #20]
 800aa2a:	4a90      	ldr	r2, [pc, #576]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800aa2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa30:	6153      	str	r3, [r2, #20]
 800aa32:	4b8e      	ldr	r3, [pc, #568]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800aa34:	695b      	ldr	r3, [r3, #20]
 800aa36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800aa3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800aa42:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa44:	2302      	movs	r3, #2
 800aa46:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800aa4c:	2303      	movs	r3, #3
 800aa4e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800aa50:	2305      	movs	r3, #5
 800aa52:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800aa58:	4619      	mov	r1, r3
 800aa5a:	4885      	ldr	r0, [pc, #532]	; (800ac70 <HAL_UART_MspInit+0x284>)
 800aa5c:	f000 fe92 	bl	800b784 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800aa60:	2200      	movs	r2, #0
 800aa62:	2100      	movs	r1, #0
 800aa64:	2034      	movs	r0, #52	; 0x34
 800aa66:	f000 fbdc 	bl	800b222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800aa6a:	2034      	movs	r0, #52	; 0x34
 800aa6c:	f000 fbf5 	bl	800b25a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800aa70:	e0f5      	b.n	800ac5e <HAL_UART_MspInit+0x272>
  else if(huart->Instance==UART5)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a7f      	ldr	r2, [pc, #508]	; (800ac74 <HAL_UART_MspInit+0x288>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d14d      	bne.n	800ab18 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_UART5_CLK_ENABLE();
 800aa7c:	4b7b      	ldr	r3, [pc, #492]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800aa7e:	69db      	ldr	r3, [r3, #28]
 800aa80:	4a7a      	ldr	r2, [pc, #488]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800aa82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa86:	61d3      	str	r3, [r2, #28]
 800aa88:	4b78      	ldr	r3, [pc, #480]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800aa8a:	69db      	ldr	r3, [r3, #28]
 800aa8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa90:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa94:	4b75      	ldr	r3, [pc, #468]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800aa96:	695b      	ldr	r3, [r3, #20]
 800aa98:	4a74      	ldr	r2, [pc, #464]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800aa9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa9e:	6153      	str	r3, [r2, #20]
 800aaa0:	4b72      	ldr	r3, [pc, #456]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800aaa2:	695b      	ldr	r3, [r3, #20]
 800aaa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aaa8:	627b      	str	r3, [r7, #36]	; 0x24
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800aaac:	4b6f      	ldr	r3, [pc, #444]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800aaae:	695b      	ldr	r3, [r3, #20]
 800aab0:	4a6e      	ldr	r2, [pc, #440]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800aab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aab6:	6153      	str	r3, [r2, #20]
 800aab8:	4b6c      	ldr	r3, [pc, #432]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800aaba:	695b      	ldr	r3, [r3, #20]
 800aabc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aac0:	623b      	str	r3, [r7, #32]
 800aac2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800aac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aac8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aaca:	2302      	movs	r3, #2
 800aacc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aace:	2300      	movs	r3, #0
 800aad0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800aad2:	2303      	movs	r3, #3
 800aad4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800aad6:	2305      	movs	r3, #5
 800aad8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aada:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800aade:	4619      	mov	r1, r3
 800aae0:	4863      	ldr	r0, [pc, #396]	; (800ac70 <HAL_UART_MspInit+0x284>)
 800aae2:	f000 fe4f 	bl	800b784 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800aae6:	2304      	movs	r3, #4
 800aae8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aaea:	2302      	movs	r3, #2
 800aaec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800aaf2:	2303      	movs	r3, #3
 800aaf4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800aaf6:	2305      	movs	r3, #5
 800aaf8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800aafa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800aafe:	4619      	mov	r1, r3
 800ab00:	485d      	ldr	r0, [pc, #372]	; (800ac78 <HAL_UART_MspInit+0x28c>)
 800ab02:	f000 fe3f 	bl	800b784 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800ab06:	2200      	movs	r2, #0
 800ab08:	2100      	movs	r1, #0
 800ab0a:	2035      	movs	r0, #53	; 0x35
 800ab0c:	f000 fb89 	bl	800b222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800ab10:	2035      	movs	r0, #53	; 0x35
 800ab12:	f000 fba2 	bl	800b25a <HAL_NVIC_EnableIRQ>
}
 800ab16:	e0a2      	b.n	800ac5e <HAL_UART_MspInit+0x272>
  else if(huart->Instance==USART1)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a57      	ldr	r2, [pc, #348]	; (800ac7c <HAL_UART_MspInit+0x290>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d130      	bne.n	800ab84 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART1_CLK_ENABLE();
 800ab22:	4b52      	ldr	r3, [pc, #328]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800ab24:	699b      	ldr	r3, [r3, #24]
 800ab26:	4a51      	ldr	r2, [pc, #324]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800ab28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab2c:	6193      	str	r3, [r2, #24]
 800ab2e:	4b4f      	ldr	r3, [pc, #316]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab36:	61fb      	str	r3, [r7, #28]
 800ab38:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ab3a:	4b4c      	ldr	r3, [pc, #304]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800ab3c:	695b      	ldr	r3, [r3, #20]
 800ab3e:	4a4b      	ldr	r2, [pc, #300]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800ab40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab44:	6153      	str	r3, [r2, #20]
 800ab46:	4b49      	ldr	r3, [pc, #292]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800ab48:	695b      	ldr	r3, [r3, #20]
 800ab4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab4e:	61bb      	str	r3, [r7, #24]
 800ab50:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800ab52:	2330      	movs	r3, #48	; 0x30
 800ab54:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab56:	2302      	movs	r3, #2
 800ab58:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ab5e:	2303      	movs	r3, #3
 800ab60:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ab62:	2307      	movs	r3, #7
 800ab64:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ab66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	4840      	ldr	r0, [pc, #256]	; (800ac70 <HAL_UART_MspInit+0x284>)
 800ab6e:	f000 fe09 	bl	800b784 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800ab72:	2200      	movs	r2, #0
 800ab74:	2100      	movs	r1, #0
 800ab76:	2025      	movs	r0, #37	; 0x25
 800ab78:	f000 fb53 	bl	800b222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800ab7c:	2025      	movs	r0, #37	; 0x25
 800ab7e:	f000 fb6c 	bl	800b25a <HAL_NVIC_EnableIRQ>
}
 800ab82:	e06c      	b.n	800ac5e <HAL_UART_MspInit+0x272>
  else if(huart->Instance==USART2)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a3d      	ldr	r2, [pc, #244]	; (800ac80 <HAL_UART_MspInit+0x294>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d131      	bne.n	800abf2 <HAL_UART_MspInit+0x206>
    __HAL_RCC_USART2_CLK_ENABLE();
 800ab8e:	4b37      	ldr	r3, [pc, #220]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800ab90:	69db      	ldr	r3, [r3, #28]
 800ab92:	4a36      	ldr	r2, [pc, #216]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800ab94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab98:	61d3      	str	r3, [r2, #28]
 800ab9a:	4b34      	ldr	r3, [pc, #208]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800ab9c:	69db      	ldr	r3, [r3, #28]
 800ab9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aba2:	617b      	str	r3, [r7, #20]
 800aba4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aba6:	4b31      	ldr	r3, [pc, #196]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800aba8:	695b      	ldr	r3, [r3, #20]
 800abaa:	4a30      	ldr	r2, [pc, #192]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800abac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abb0:	6153      	str	r3, [r2, #20]
 800abb2:	4b2e      	ldr	r3, [pc, #184]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800abb4:	695b      	ldr	r3, [r3, #20]
 800abb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abba:	613b      	str	r3, [r7, #16]
 800abbc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800abbe:	230c      	movs	r3, #12
 800abc0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abc2:	2302      	movs	r3, #2
 800abc4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abc6:	2300      	movs	r3, #0
 800abc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800abca:	2303      	movs	r3, #3
 800abcc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800abce:	2307      	movs	r3, #7
 800abd0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800abd6:	4619      	mov	r1, r3
 800abd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800abdc:	f000 fdd2 	bl	800b784 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800abe0:	2200      	movs	r2, #0
 800abe2:	2100      	movs	r1, #0
 800abe4:	2026      	movs	r0, #38	; 0x26
 800abe6:	f000 fb1c 	bl	800b222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800abea:	2026      	movs	r0, #38	; 0x26
 800abec:	f000 fb35 	bl	800b25a <HAL_NVIC_EnableIRQ>
}
 800abf0:	e035      	b.n	800ac5e <HAL_UART_MspInit+0x272>
  else if(huart->Instance==USART3)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a23      	ldr	r2, [pc, #140]	; (800ac84 <HAL_UART_MspInit+0x298>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d130      	bne.n	800ac5e <HAL_UART_MspInit+0x272>
    __HAL_RCC_USART3_CLK_ENABLE();
 800abfc:	4b1b      	ldr	r3, [pc, #108]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800abfe:	69db      	ldr	r3, [r3, #28]
 800ac00:	4a1a      	ldr	r2, [pc, #104]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800ac02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac06:	61d3      	str	r3, [r2, #28]
 800ac08:	4b18      	ldr	r3, [pc, #96]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800ac0a:	69db      	ldr	r3, [r3, #28]
 800ac0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac10:	60fb      	str	r3, [r7, #12]
 800ac12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac14:	4b15      	ldr	r3, [pc, #84]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800ac16:	695b      	ldr	r3, [r3, #20]
 800ac18:	4a14      	ldr	r2, [pc, #80]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800ac1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac1e:	6153      	str	r3, [r2, #20]
 800ac20:	4b12      	ldr	r3, [pc, #72]	; (800ac6c <HAL_UART_MspInit+0x280>)
 800ac22:	695b      	ldr	r3, [r3, #20]
 800ac24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac28:	60bb      	str	r3, [r7, #8]
 800ac2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800ac2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ac30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac32:	2302      	movs	r3, #2
 800ac34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac36:	2300      	movs	r3, #0
 800ac38:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ac3a:	2303      	movs	r3, #3
 800ac3c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ac3e:	2307      	movs	r3, #7
 800ac40:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ac42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ac46:	4619      	mov	r1, r3
 800ac48:	480f      	ldr	r0, [pc, #60]	; (800ac88 <HAL_UART_MspInit+0x29c>)
 800ac4a:	f000 fd9b 	bl	800b784 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800ac4e:	2200      	movs	r2, #0
 800ac50:	2100      	movs	r1, #0
 800ac52:	2027      	movs	r0, #39	; 0x27
 800ac54:	f000 fae5 	bl	800b222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800ac58:	2027      	movs	r0, #39	; 0x27
 800ac5a:	f000 fafe 	bl	800b25a <HAL_NVIC_EnableIRQ>
}
 800ac5e:	bf00      	nop
 800ac60:	3748      	adds	r7, #72	; 0x48
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	40004c00 	.word	0x40004c00
 800ac6c:	40021000 	.word	0x40021000
 800ac70:	48000800 	.word	0x48000800
 800ac74:	40005000 	.word	0x40005000
 800ac78:	48000c00 	.word	0x48000c00
 800ac7c:	40013800 	.word	0x40013800
 800ac80:	40004400 	.word	0x40004400
 800ac84:	40004800 	.word	0x40004800
 800ac88:	48000400 	.word	0x48000400

0800ac8c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b08a      	sub	sp, #40	; 0x28
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac94:	f107 0314 	add.w	r3, r7, #20
 800ac98:	2200      	movs	r2, #0
 800ac9a:	601a      	str	r2, [r3, #0]
 800ac9c:	605a      	str	r2, [r3, #4]
 800ac9e:	609a      	str	r2, [r3, #8]
 800aca0:	60da      	str	r2, [r3, #12]
 800aca2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a18      	ldr	r2, [pc, #96]	; (800ad0c <HAL_PCD_MspInit+0x80>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d129      	bne.n	800ad02 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acae:	4b18      	ldr	r3, [pc, #96]	; (800ad10 <HAL_PCD_MspInit+0x84>)
 800acb0:	695b      	ldr	r3, [r3, #20]
 800acb2:	4a17      	ldr	r2, [pc, #92]	; (800ad10 <HAL_PCD_MspInit+0x84>)
 800acb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acb8:	6153      	str	r3, [r2, #20]
 800acba:	4b15      	ldr	r3, [pc, #84]	; (800ad10 <HAL_PCD_MspInit+0x84>)
 800acbc:	695b      	ldr	r3, [r3, #20]
 800acbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acc2:	613b      	str	r3, [r7, #16]
 800acc4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800acc6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800acca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800accc:	2302      	movs	r3, #2
 800acce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acd0:	2300      	movs	r3, #0
 800acd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800acd4:	2303      	movs	r3, #3
 800acd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800acd8:	230e      	movs	r3, #14
 800acda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acdc:	f107 0314 	add.w	r3, r7, #20
 800ace0:	4619      	mov	r1, r3
 800ace2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ace6:	f000 fd4d 	bl	800b784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800acea:	4b09      	ldr	r3, [pc, #36]	; (800ad10 <HAL_PCD_MspInit+0x84>)
 800acec:	69db      	ldr	r3, [r3, #28]
 800acee:	4a08      	ldr	r2, [pc, #32]	; (800ad10 <HAL_PCD_MspInit+0x84>)
 800acf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800acf4:	61d3      	str	r3, [r2, #28]
 800acf6:	4b06      	ldr	r3, [pc, #24]	; (800ad10 <HAL_PCD_MspInit+0x84>)
 800acf8:	69db      	ldr	r3, [r3, #28]
 800acfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800acfe:	60fb      	str	r3, [r7, #12]
 800ad00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800ad02:	bf00      	nop
 800ad04:	3728      	adds	r7, #40	; 0x28
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	40005c00 	.word	0x40005c00
 800ad10:	40021000 	.word	0x40021000

0800ad14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ad14:	b480      	push	{r7}
 800ad16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ad18:	e7fe      	b.n	800ad18 <NMI_Handler+0x4>

0800ad1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ad1a:	b480      	push	{r7}
 800ad1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ad1e:	e7fe      	b.n	800ad1e <HardFault_Handler+0x4>

0800ad20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ad20:	b480      	push	{r7}
 800ad22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ad24:	e7fe      	b.n	800ad24 <MemManage_Handler+0x4>

0800ad26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ad26:	b480      	push	{r7}
 800ad28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ad2a:	e7fe      	b.n	800ad2a <BusFault_Handler+0x4>

0800ad2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ad30:	e7fe      	b.n	800ad30 <UsageFault_Handler+0x4>

0800ad32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ad32:	b480      	push	{r7}
 800ad34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ad36:	bf00      	nop
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ad40:	b480      	push	{r7}
 800ad42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ad44:	bf00      	nop
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ad4e:	b480      	push	{r7}
 800ad50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ad52:	bf00      	nop
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ad60:	f000 f964 	bl	800b02c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ad64:	bf00      	nop
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800ad6c:	4802      	ldr	r0, [pc, #8]	; (800ad78 <TIM2_IRQHandler+0x10>)
 800ad6e:	f002 fc23 	bl	800d5b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800ad72:	bf00      	nop
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	200002e0 	.word	0x200002e0

0800ad7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800ad80:	4802      	ldr	r0, [pc, #8]	; (800ad8c <USART1_IRQHandler+0x10>)
 800ad82:	f003 f90d 	bl	800dfa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800ad86:	bf00      	nop
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	200001b0 	.word	0x200001b0

0800ad90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800ad94:	4802      	ldr	r0, [pc, #8]	; (800ada0 <USART2_IRQHandler+0x10>)
 800ad96:	f003 f903 	bl	800dfa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800ad9a:	bf00      	nop
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	2000032c 	.word	0x2000032c

0800ada4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800ada8:	4802      	ldr	r0, [pc, #8]	; (800adb4 <USART3_IRQHandler+0x10>)
 800adaa:	f003 f8f9 	bl	800dfa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800adae:	bf00      	nop
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	200000a0 	.word	0x200000a0

0800adb8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800adbc:	4802      	ldr	r0, [pc, #8]	; (800adc8 <UART4_IRQHandler+0x10>)
 800adbe:	f003 f8ef 	bl	800dfa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800adc2:	bf00      	nop
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	20000258 	.word	0x20000258

0800adcc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800add0:	4802      	ldr	r0, [pc, #8]	; (800addc <UART5_IRQHandler+0x10>)
 800add2:	f003 f8e5 	bl	800dfa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800add6:	bf00      	nop
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	20000128 	.word	0x20000128

0800ade0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b086      	sub	sp, #24
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800adec:	2300      	movs	r3, #0
 800adee:	617b      	str	r3, [r7, #20]
 800adf0:	e00a      	b.n	800ae08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800adf2:	f3af 8000 	nop.w
 800adf6:	4601      	mov	r1, r0
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	1c5a      	adds	r2, r3, #1
 800adfc:	60ba      	str	r2, [r7, #8]
 800adfe:	b2ca      	uxtb	r2, r1
 800ae00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	3301      	adds	r3, #1
 800ae06:	617b      	str	r3, [r7, #20]
 800ae08:	697a      	ldr	r2, [r7, #20]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	dbf0      	blt.n	800adf2 <_read+0x12>
	}

return len;
 800ae10:	687b      	ldr	r3, [r7, #4]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3718      	adds	r7, #24
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b086      	sub	sp, #24
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	60f8      	str	r0, [r7, #12]
 800ae22:	60b9      	str	r1, [r7, #8]
 800ae24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ae26:	2300      	movs	r3, #0
 800ae28:	617b      	str	r3, [r7, #20]
 800ae2a:	e009      	b.n	800ae40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	1c5a      	adds	r2, r3, #1
 800ae30:	60ba      	str	r2, [r7, #8]
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7ff fd53 	bl	800a8e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	617b      	str	r3, [r7, #20]
 800ae40:	697a      	ldr	r2, [r7, #20]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	dbf1      	blt.n	800ae2c <_write+0x12>
	}
	return len;
 800ae48:	687b      	ldr	r3, [r7, #4]
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3718      	adds	r7, #24
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <_close>:

int _close(int file)
{
 800ae52:	b480      	push	{r7}
 800ae54:	b083      	sub	sp, #12
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
	return -1;
 800ae5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	370c      	adds	r7, #12
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr

0800ae6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ae6a:	b480      	push	{r7}
 800ae6c:	b083      	sub	sp, #12
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
 800ae72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ae7a:	605a      	str	r2, [r3, #4]
	return 0;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	370c      	adds	r7, #12
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr

0800ae8a <_isatty>:

int _isatty(int file)
{
 800ae8a:	b480      	push	{r7}
 800ae8c:	b083      	sub	sp, #12
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
	return 1;
 800ae92:	2301      	movs	r3, #1
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
	return 0;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3714      	adds	r7, #20
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr
	...

0800aebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800aec4:	4a14      	ldr	r2, [pc, #80]	; (800af18 <_sbrk+0x5c>)
 800aec6:	4b15      	ldr	r3, [pc, #84]	; (800af1c <_sbrk+0x60>)
 800aec8:	1ad3      	subs	r3, r2, r3
 800aeca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800aed0:	4b13      	ldr	r3, [pc, #76]	; (800af20 <_sbrk+0x64>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d102      	bne.n	800aede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800aed8:	4b11      	ldr	r3, [pc, #68]	; (800af20 <_sbrk+0x64>)
 800aeda:	4a12      	ldr	r2, [pc, #72]	; (800af24 <_sbrk+0x68>)
 800aedc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800aede:	4b10      	ldr	r3, [pc, #64]	; (800af20 <_sbrk+0x64>)
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4413      	add	r3, r2
 800aee6:	693a      	ldr	r2, [r7, #16]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d207      	bcs.n	800aefc <_sbrk+0x40>
  {
    errno = ENOMEM;
 800aeec:	f004 ff8e 	bl	800fe0c <__errno>
 800aef0:	4603      	mov	r3, r0
 800aef2:	220c      	movs	r2, #12
 800aef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800aef6:	f04f 33ff 	mov.w	r3, #4294967295
 800aefa:	e009      	b.n	800af10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800aefc:	4b08      	ldr	r3, [pc, #32]	; (800af20 <_sbrk+0x64>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800af02:	4b07      	ldr	r3, [pc, #28]	; (800af20 <_sbrk+0x64>)
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4413      	add	r3, r2
 800af0a:	4a05      	ldr	r2, [pc, #20]	; (800af20 <_sbrk+0x64>)
 800af0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800af0e:	68fb      	ldr	r3, [r7, #12]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3718      	adds	r7, #24
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	2000a000 	.word	0x2000a000
 800af1c:	00000400 	.word	0x00000400
 800af20:	2000008c 	.word	0x2000008c
 800af24:	20000ab0 	.word	0x20000ab0

0800af28 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800af28:	b480      	push	{r7}
 800af2a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800af2c:	4b06      	ldr	r3, [pc, #24]	; (800af48 <SystemInit+0x20>)
 800af2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af32:	4a05      	ldr	r2, [pc, #20]	; (800af48 <SystemInit+0x20>)
 800af34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800af38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800af3c:	bf00      	nop
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	e000ed00 	.word	0xe000ed00

0800af4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800af4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800af84 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800af50:	f7ff ffea 	bl	800af28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800af54:	480c      	ldr	r0, [pc, #48]	; (800af88 <LoopForever+0x6>)
  ldr r1, =_edata
 800af56:	490d      	ldr	r1, [pc, #52]	; (800af8c <LoopForever+0xa>)
  ldr r2, =_sidata
 800af58:	4a0d      	ldr	r2, [pc, #52]	; (800af90 <LoopForever+0xe>)
  movs r3, #0
 800af5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800af5c:	e002      	b.n	800af64 <LoopCopyDataInit>

0800af5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800af5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800af60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800af62:	3304      	adds	r3, #4

0800af64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800af64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800af66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800af68:	d3f9      	bcc.n	800af5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800af6a:	4a0a      	ldr	r2, [pc, #40]	; (800af94 <LoopForever+0x12>)
  ldr r4, =_ebss
 800af6c:	4c0a      	ldr	r4, [pc, #40]	; (800af98 <LoopForever+0x16>)
  movs r3, #0
 800af6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800af70:	e001      	b.n	800af76 <LoopFillZerobss>

0800af72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800af72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800af74:	3204      	adds	r2, #4

0800af76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800af76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800af78:	d3fb      	bcc.n	800af72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800af7a:	f004 ff4d 	bl	800fe18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800af7e:	f7ff f9ad 	bl	800a2dc <main>

0800af82 <LoopForever>:

LoopForever:
    b LoopForever
 800af82:	e7fe      	b.n	800af82 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800af84:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800af88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800af8c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800af90:	0801158c 	.word	0x0801158c
  ldr r2, =_sbss
 800af94:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800af98:	20000ab0 	.word	0x20000ab0

0800af9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800af9c:	e7fe      	b.n	800af9c <ADC1_2_IRQHandler>
	...

0800afa0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800afa4:	4b08      	ldr	r3, [pc, #32]	; (800afc8 <HAL_Init+0x28>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a07      	ldr	r2, [pc, #28]	; (800afc8 <HAL_Init+0x28>)
 800afaa:	f043 0310 	orr.w	r3, r3, #16
 800afae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800afb0:	2003      	movs	r0, #3
 800afb2:	f000 f92b 	bl	800b20c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800afb6:	2000      	movs	r0, #0
 800afb8:	f000 f808 	bl	800afcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800afbc:	f7ff fca8 	bl	800a910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800afc0:	2300      	movs	r3, #0
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	40022000 	.word	0x40022000

0800afcc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800afd4:	4b12      	ldr	r3, [pc, #72]	; (800b020 <HAL_InitTick+0x54>)
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	4b12      	ldr	r3, [pc, #72]	; (800b024 <HAL_InitTick+0x58>)
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	4619      	mov	r1, r3
 800afde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800afe2:	fbb3 f3f1 	udiv	r3, r3, r1
 800afe6:	fbb2 f3f3 	udiv	r3, r2, r3
 800afea:	4618      	mov	r0, r3
 800afec:	f000 f943 	bl	800b276 <HAL_SYSTICK_Config>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d001      	beq.n	800affa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e00e      	b.n	800b018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2b0f      	cmp	r3, #15
 800affe:	d80a      	bhi.n	800b016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b000:	2200      	movs	r2, #0
 800b002:	6879      	ldr	r1, [r7, #4]
 800b004:	f04f 30ff 	mov.w	r0, #4294967295
 800b008:	f000 f90b 	bl	800b222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b00c:	4a06      	ldr	r2, [pc, #24]	; (800b028 <HAL_InitTick+0x5c>)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800b012:	2300      	movs	r3, #0
 800b014:	e000      	b.n	800b018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b016:	2301      	movs	r3, #1
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	20000000 	.word	0x20000000
 800b024:	20000008 	.word	0x20000008
 800b028:	20000004 	.word	0x20000004

0800b02c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b02c:	b480      	push	{r7}
 800b02e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b030:	4b06      	ldr	r3, [pc, #24]	; (800b04c <HAL_IncTick+0x20>)
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	461a      	mov	r2, r3
 800b036:	4b06      	ldr	r3, [pc, #24]	; (800b050 <HAL_IncTick+0x24>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4413      	add	r3, r2
 800b03c:	4a04      	ldr	r2, [pc, #16]	; (800b050 <HAL_IncTick+0x24>)
 800b03e:	6013      	str	r3, [r2, #0]
}
 800b040:	bf00      	nop
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop
 800b04c:	20000008 	.word	0x20000008
 800b050:	200006a0 	.word	0x200006a0

0800b054 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b054:	b480      	push	{r7}
 800b056:	af00      	add	r7, sp, #0
  return uwTick;  
 800b058:	4b03      	ldr	r3, [pc, #12]	; (800b068 <HAL_GetTick+0x14>)
 800b05a:	681b      	ldr	r3, [r3, #0]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	200006a0 	.word	0x200006a0

0800b06c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f003 0307 	and.w	r3, r3, #7
 800b07a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b07c:	4b0c      	ldr	r3, [pc, #48]	; (800b0b0 <__NVIC_SetPriorityGrouping+0x44>)
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b082:	68ba      	ldr	r2, [r7, #8]
 800b084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b088:	4013      	ands	r3, r2
 800b08a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b09c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b09e:	4a04      	ldr	r2, [pc, #16]	; (800b0b0 <__NVIC_SetPriorityGrouping+0x44>)
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	60d3      	str	r3, [r2, #12]
}
 800b0a4:	bf00      	nop
 800b0a6:	3714      	adds	r7, #20
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr
 800b0b0:	e000ed00 	.word	0xe000ed00

0800b0b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b0b8:	4b04      	ldr	r3, [pc, #16]	; (800b0cc <__NVIC_GetPriorityGrouping+0x18>)
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	0a1b      	lsrs	r3, r3, #8
 800b0be:	f003 0307 	and.w	r3, r3, #7
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr
 800b0cc:	e000ed00 	.word	0xe000ed00

0800b0d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b0da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	db0b      	blt.n	800b0fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b0e2:	79fb      	ldrb	r3, [r7, #7]
 800b0e4:	f003 021f 	and.w	r2, r3, #31
 800b0e8:	4907      	ldr	r1, [pc, #28]	; (800b108 <__NVIC_EnableIRQ+0x38>)
 800b0ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0ee:	095b      	lsrs	r3, r3, #5
 800b0f0:	2001      	movs	r0, #1
 800b0f2:	fa00 f202 	lsl.w	r2, r0, r2
 800b0f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b0fa:	bf00      	nop
 800b0fc:	370c      	adds	r7, #12
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	e000e100 	.word	0xe000e100

0800b10c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	4603      	mov	r3, r0
 800b114:	6039      	str	r1, [r7, #0]
 800b116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	db0a      	blt.n	800b136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	b2da      	uxtb	r2, r3
 800b124:	490c      	ldr	r1, [pc, #48]	; (800b158 <__NVIC_SetPriority+0x4c>)
 800b126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b12a:	0112      	lsls	r2, r2, #4
 800b12c:	b2d2      	uxtb	r2, r2
 800b12e:	440b      	add	r3, r1
 800b130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b134:	e00a      	b.n	800b14c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	b2da      	uxtb	r2, r3
 800b13a:	4908      	ldr	r1, [pc, #32]	; (800b15c <__NVIC_SetPriority+0x50>)
 800b13c:	79fb      	ldrb	r3, [r7, #7]
 800b13e:	f003 030f 	and.w	r3, r3, #15
 800b142:	3b04      	subs	r3, #4
 800b144:	0112      	lsls	r2, r2, #4
 800b146:	b2d2      	uxtb	r2, r2
 800b148:	440b      	add	r3, r1
 800b14a:	761a      	strb	r2, [r3, #24]
}
 800b14c:	bf00      	nop
 800b14e:	370c      	adds	r7, #12
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr
 800b158:	e000e100 	.word	0xe000e100
 800b15c:	e000ed00 	.word	0xe000ed00

0800b160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b160:	b480      	push	{r7}
 800b162:	b089      	sub	sp, #36	; 0x24
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f003 0307 	and.w	r3, r3, #7
 800b172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	f1c3 0307 	rsb	r3, r3, #7
 800b17a:	2b04      	cmp	r3, #4
 800b17c:	bf28      	it	cs
 800b17e:	2304      	movcs	r3, #4
 800b180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	3304      	adds	r3, #4
 800b186:	2b06      	cmp	r3, #6
 800b188:	d902      	bls.n	800b190 <NVIC_EncodePriority+0x30>
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	3b03      	subs	r3, #3
 800b18e:	e000      	b.n	800b192 <NVIC_EncodePriority+0x32>
 800b190:	2300      	movs	r3, #0
 800b192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b194:	f04f 32ff 	mov.w	r2, #4294967295
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	fa02 f303 	lsl.w	r3, r2, r3
 800b19e:	43da      	mvns	r2, r3
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	401a      	ands	r2, r3
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b1a8:	f04f 31ff 	mov.w	r1, #4294967295
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	fa01 f303 	lsl.w	r3, r1, r3
 800b1b2:	43d9      	mvns	r1, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b1b8:	4313      	orrs	r3, r2
         );
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3724      	adds	r7, #36	; 0x24
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr
	...

0800b1c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b1d8:	d301      	bcc.n	800b1de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b1da:	2301      	movs	r3, #1
 800b1dc:	e00f      	b.n	800b1fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b1de:	4a0a      	ldr	r2, [pc, #40]	; (800b208 <SysTick_Config+0x40>)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b1e6:	210f      	movs	r1, #15
 800b1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ec:	f7ff ff8e 	bl	800b10c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b1f0:	4b05      	ldr	r3, [pc, #20]	; (800b208 <SysTick_Config+0x40>)
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b1f6:	4b04      	ldr	r3, [pc, #16]	; (800b208 <SysTick_Config+0x40>)
 800b1f8:	2207      	movs	r2, #7
 800b1fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3708      	adds	r7, #8
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	e000e010 	.word	0xe000e010

0800b20c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f7ff ff29 	bl	800b06c <__NVIC_SetPriorityGrouping>
}
 800b21a:	bf00      	nop
 800b21c:	3708      	adds	r7, #8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b086      	sub	sp, #24
 800b226:	af00      	add	r7, sp, #0
 800b228:	4603      	mov	r3, r0
 800b22a:	60b9      	str	r1, [r7, #8]
 800b22c:	607a      	str	r2, [r7, #4]
 800b22e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b230:	2300      	movs	r3, #0
 800b232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b234:	f7ff ff3e 	bl	800b0b4 <__NVIC_GetPriorityGrouping>
 800b238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	68b9      	ldr	r1, [r7, #8]
 800b23e:	6978      	ldr	r0, [r7, #20]
 800b240:	f7ff ff8e 	bl	800b160 <NVIC_EncodePriority>
 800b244:	4602      	mov	r2, r0
 800b246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b24a:	4611      	mov	r1, r2
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7ff ff5d 	bl	800b10c <__NVIC_SetPriority>
}
 800b252:	bf00      	nop
 800b254:	3718      	adds	r7, #24
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b082      	sub	sp, #8
 800b25e:	af00      	add	r7, sp, #0
 800b260:	4603      	mov	r3, r0
 800b262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b268:	4618      	mov	r0, r3
 800b26a:	f7ff ff31 	bl	800b0d0 <__NVIC_EnableIRQ>
}
 800b26e:	bf00      	nop
 800b270:	3708      	adds	r7, #8
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}

0800b276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b276:	b580      	push	{r7, lr}
 800b278:	b082      	sub	sp, #8
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f7ff ffa2 	bl	800b1c8 <SysTick_Config>
 800b284:	4603      	mov	r3, r0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3708      	adds	r7, #8
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b28e:	b480      	push	{r7}
 800b290:	b083      	sub	sp, #12
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b29c:	2b02      	cmp	r3, #2
 800b29e:	d008      	beq.n	800b2b2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2204      	movs	r2, #4
 800b2a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e020      	b.n	800b2f4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f022 020e 	bic.w	r2, r2, #14
 800b2c0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f022 0201 	bic.w	r2, r2, #1
 800b2d0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2da:	2101      	movs	r1, #1
 800b2dc:	fa01 f202 	lsl.w	r2, r1, r2
 800b2e0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b308:	2300      	movs	r3, #0
 800b30a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b312:	2b02      	cmp	r3, #2
 800b314:	d005      	beq.n	800b322 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2204      	movs	r2, #4
 800b31a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	73fb      	strb	r3, [r7, #15]
 800b320:	e027      	b.n	800b372 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f022 020e 	bic.w	r2, r2, #14
 800b330:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f022 0201 	bic.w	r2, r2, #1
 800b340:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b34a:	2101      	movs	r1, #1
 800b34c:	fa01 f202 	lsl.w	r2, r1, r2
 800b350:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2201      	movs	r2, #1
 800b356:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b366:	2b00      	cmp	r3, #0
 800b368:	d003      	beq.n	800b372 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	4798      	blx	r3
    } 
  }
  return status;
 800b372:	7bfb      	ldrb	r3, [r7, #15]
}
 800b374:	4618      	mov	r0, r3
 800b376:	3710      	adds	r7, #16
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800b37c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b37e:	b087      	sub	sp, #28
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b38a:	2301      	movs	r3, #1
 800b38c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 800b38e:	2300      	movs	r3, #0
 800b390:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 800b392:	2300      	movs	r3, #0
 800b394:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b396:	4b2f      	ldr	r3, [pc, #188]	; (800b454 <HAL_FLASH_Program+0xd8>)
 800b398:	7e1b      	ldrb	r3, [r3, #24]
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d101      	bne.n	800b3a2 <HAL_FLASH_Program+0x26>
 800b39e:	2302      	movs	r3, #2
 800b3a0:	e054      	b.n	800b44c <HAL_FLASH_Program+0xd0>
 800b3a2:	4b2c      	ldr	r3, [pc, #176]	; (800b454 <HAL_FLASH_Program+0xd8>)
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b3a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b3ac:	f000 f8d4 	bl	800b558 <FLASH_WaitForLastOperation>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800b3b4:	7dfb      	ldrb	r3, [r7, #23]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d144      	bne.n	800b444 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d102      	bne.n	800b3c6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	757b      	strb	r3, [r7, #21]
 800b3c4:	e007      	b.n	800b3d6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2b02      	cmp	r3, #2
 800b3ca:	d102      	bne.n	800b3d2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800b3cc:	2302      	movs	r3, #2
 800b3ce:	757b      	strb	r3, [r7, #21]
 800b3d0:	e001      	b.n	800b3d6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800b3d2:	2304      	movs	r3, #4
 800b3d4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	75bb      	strb	r3, [r7, #22]
 800b3da:	e02d      	b.n	800b438 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800b3dc:	7dbb      	ldrb	r3, [r7, #22]
 800b3de:	005a      	lsls	r2, r3, #1
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	eb02 0c03 	add.w	ip, r2, r3
 800b3e6:	7dbb      	ldrb	r3, [r7, #22]
 800b3e8:	0119      	lsls	r1, r3, #4
 800b3ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3ee:	f1c1 0620 	rsb	r6, r1, #32
 800b3f2:	f1a1 0020 	sub.w	r0, r1, #32
 800b3f6:	fa22 f401 	lsr.w	r4, r2, r1
 800b3fa:	fa03 f606 	lsl.w	r6, r3, r6
 800b3fe:	4334      	orrs	r4, r6
 800b400:	fa23 f000 	lsr.w	r0, r3, r0
 800b404:	4304      	orrs	r4, r0
 800b406:	fa23 f501 	lsr.w	r5, r3, r1
 800b40a:	b2a3      	uxth	r3, r4
 800b40c:	4619      	mov	r1, r3
 800b40e:	4660      	mov	r0, ip
 800b410:	f000 f886 	bl	800b520 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b414:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b418:	f000 f89e 	bl	800b558 <FLASH_WaitForLastOperation>
 800b41c:	4603      	mov	r3, r0
 800b41e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b420:	4b0d      	ldr	r3, [pc, #52]	; (800b458 <HAL_FLASH_Program+0xdc>)
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	4a0c      	ldr	r2, [pc, #48]	; (800b458 <HAL_FLASH_Program+0xdc>)
 800b426:	f023 0301 	bic.w	r3, r3, #1
 800b42a:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 800b42c:	7dfb      	ldrb	r3, [r7, #23]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d107      	bne.n	800b442 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800b432:	7dbb      	ldrb	r3, [r7, #22]
 800b434:	3301      	adds	r3, #1
 800b436:	75bb      	strb	r3, [r7, #22]
 800b438:	7dba      	ldrb	r2, [r7, #22]
 800b43a:	7d7b      	ldrb	r3, [r7, #21]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d3cd      	bcc.n	800b3dc <HAL_FLASH_Program+0x60>
 800b440:	e000      	b.n	800b444 <HAL_FLASH_Program+0xc8>
      {
        break;
 800b442:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b444:	4b03      	ldr	r3, [pc, #12]	; (800b454 <HAL_FLASH_Program+0xd8>)
 800b446:	2200      	movs	r2, #0
 800b448:	761a      	strb	r2, [r3, #24]

  return status;
 800b44a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	371c      	adds	r7, #28
 800b450:	46bd      	mov	sp, r7
 800b452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b454:	200006a8 	.word	0x200006a8
 800b458:	40022000 	.word	0x40022000

0800b45c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800b466:	4b0d      	ldr	r3, [pc, #52]	; (800b49c <HAL_FLASH_Unlock+0x40>)
 800b468:	691b      	ldr	r3, [r3, #16]
 800b46a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d00d      	beq.n	800b48e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800b472:	4b0a      	ldr	r3, [pc, #40]	; (800b49c <HAL_FLASH_Unlock+0x40>)
 800b474:	4a0a      	ldr	r2, [pc, #40]	; (800b4a0 <HAL_FLASH_Unlock+0x44>)
 800b476:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800b478:	4b08      	ldr	r3, [pc, #32]	; (800b49c <HAL_FLASH_Unlock+0x40>)
 800b47a:	4a0a      	ldr	r2, [pc, #40]	; (800b4a4 <HAL_FLASH_Unlock+0x48>)
 800b47c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800b47e:	4b07      	ldr	r3, [pc, #28]	; (800b49c <HAL_FLASH_Unlock+0x40>)
 800b480:	691b      	ldr	r3, [r3, #16]
 800b482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b486:	2b00      	cmp	r3, #0
 800b488:	d001      	beq.n	800b48e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800b48e:	79fb      	ldrb	r3, [r7, #7]
}
 800b490:	4618      	mov	r0, r3
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr
 800b49c:	40022000 	.word	0x40022000
 800b4a0:	45670123 	.word	0x45670123
 800b4a4:	cdef89ab 	.word	0xcdef89ab

0800b4a8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800b4ac:	4b05      	ldr	r3, [pc, #20]	; (800b4c4 <HAL_FLASH_Lock+0x1c>)
 800b4ae:	691b      	ldr	r3, [r3, #16]
 800b4b0:	4a04      	ldr	r2, [pc, #16]	; (800b4c4 <HAL_FLASH_Lock+0x1c>)
 800b4b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4b6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr
 800b4c4:	40022000 	.word	0x40022000

0800b4c8 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 800b4cc:	4b09      	ldr	r3, [pc, #36]	; (800b4f4 <HAL_FLASH_OB_Unlock+0x2c>)
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d107      	bne.n	800b4e8 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800b4d8:	4b06      	ldr	r3, [pc, #24]	; (800b4f4 <HAL_FLASH_OB_Unlock+0x2c>)
 800b4da:	4a07      	ldr	r2, [pc, #28]	; (800b4f8 <HAL_FLASH_OB_Unlock+0x30>)
 800b4dc:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800b4de:	4b05      	ldr	r3, [pc, #20]	; (800b4f4 <HAL_FLASH_OB_Unlock+0x2c>)
 800b4e0:	4a06      	ldr	r2, [pc, #24]	; (800b4fc <HAL_FLASH_OB_Unlock+0x34>)
 800b4e2:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	e000      	b.n	800b4ea <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr
 800b4f4:	40022000 	.word	0x40022000
 800b4f8:	45670123 	.word	0x45670123
 800b4fc:	cdef89ab 	.word	0xcdef89ab

0800b500 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800b500:	b480      	push	{r7}
 800b502:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 800b504:	4b05      	ldr	r3, [pc, #20]	; (800b51c <HAL_FLASH_OB_Lock+0x1c>)
 800b506:	691b      	ldr	r3, [r3, #16]
 800b508:	4a04      	ldr	r2, [pc, #16]	; (800b51c <HAL_FLASH_OB_Lock+0x1c>)
 800b50a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b50e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr
 800b51c:	40022000 	.word	0x40022000

0800b520 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	460b      	mov	r3, r1
 800b52a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b52c:	4b08      	ldr	r3, [pc, #32]	; (800b550 <FLASH_Program_HalfWord+0x30>)
 800b52e:	2200      	movs	r2, #0
 800b530:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800b532:	4b08      	ldr	r3, [pc, #32]	; (800b554 <FLASH_Program_HalfWord+0x34>)
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	4a07      	ldr	r2, [pc, #28]	; (800b554 <FLASH_Program_HalfWord+0x34>)
 800b538:	f043 0301 	orr.w	r3, r3, #1
 800b53c:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	887a      	ldrh	r2, [r7, #2]
 800b542:	801a      	strh	r2, [r3, #0]
}
 800b544:	bf00      	nop
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr
 800b550:	200006a8 	.word	0x200006a8
 800b554:	40022000 	.word	0x40022000

0800b558 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800b560:	f7ff fd78 	bl	800b054 <HAL_GetTick>
 800b564:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800b566:	e010      	b.n	800b58a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b56e:	d00c      	beq.n	800b58a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d007      	beq.n	800b586 <FLASH_WaitForLastOperation+0x2e>
 800b576:	f7ff fd6d 	bl	800b054 <HAL_GetTick>
 800b57a:	4602      	mov	r2, r0
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	429a      	cmp	r2, r3
 800b584:	d201      	bcs.n	800b58a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800b586:	2303      	movs	r3, #3
 800b588:	e01f      	b.n	800b5ca <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800b58a:	4b12      	ldr	r3, [pc, #72]	; (800b5d4 <FLASH_WaitForLastOperation+0x7c>)
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	f003 0301 	and.w	r3, r3, #1
 800b592:	2b01      	cmp	r3, #1
 800b594:	d0e8      	beq.n	800b568 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800b596:	4b0f      	ldr	r3, [pc, #60]	; (800b5d4 <FLASH_WaitForLastOperation+0x7c>)
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	f003 0320 	and.w	r3, r3, #32
 800b59e:	2b20      	cmp	r3, #32
 800b5a0:	d102      	bne.n	800b5a8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b5a2:	4b0c      	ldr	r3, [pc, #48]	; (800b5d4 <FLASH_WaitForLastOperation+0x7c>)
 800b5a4:	2220      	movs	r2, #32
 800b5a6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800b5a8:	4b0a      	ldr	r3, [pc, #40]	; (800b5d4 <FLASH_WaitForLastOperation+0x7c>)
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	f003 0310 	and.w	r3, r3, #16
 800b5b0:	2b10      	cmp	r3, #16
 800b5b2:	d005      	beq.n	800b5c0 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800b5b4:	4b07      	ldr	r3, [pc, #28]	; (800b5d4 <FLASH_WaitForLastOperation+0x7c>)
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800b5bc:	2b04      	cmp	r3, #4
 800b5be:	d103      	bne.n	800b5c8 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800b5c0:	f000 f80a 	bl	800b5d8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	e000      	b.n	800b5ca <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 800b5c8:	2300      	movs	r3, #0
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3710      	adds	r7, #16
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	40022000 	.word	0x40022000

0800b5d8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800b5e2:	4b14      	ldr	r3, [pc, #80]	; (800b634 <FLASH_SetErrorCode+0x5c>)
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	f003 0310 	and.w	r3, r3, #16
 800b5ea:	2b10      	cmp	r3, #16
 800b5ec:	d109      	bne.n	800b602 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800b5ee:	4b12      	ldr	r3, [pc, #72]	; (800b638 <FLASH_SetErrorCode+0x60>)
 800b5f0:	69db      	ldr	r3, [r3, #28]
 800b5f2:	f043 0302 	orr.w	r3, r3, #2
 800b5f6:	4a10      	ldr	r2, [pc, #64]	; (800b638 <FLASH_SetErrorCode+0x60>)
 800b5f8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f043 0310 	orr.w	r3, r3, #16
 800b600:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800b602:	4b0c      	ldr	r3, [pc, #48]	; (800b634 <FLASH_SetErrorCode+0x5c>)
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	f003 0304 	and.w	r3, r3, #4
 800b60a:	2b04      	cmp	r3, #4
 800b60c:	d109      	bne.n	800b622 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800b60e:	4b0a      	ldr	r3, [pc, #40]	; (800b638 <FLASH_SetErrorCode+0x60>)
 800b610:	69db      	ldr	r3, [r3, #28]
 800b612:	f043 0301 	orr.w	r3, r3, #1
 800b616:	4a08      	ldr	r2, [pc, #32]	; (800b638 <FLASH_SetErrorCode+0x60>)
 800b618:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f043 0304 	orr.w	r3, r3, #4
 800b620:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800b622:	4a04      	ldr	r2, [pc, #16]	; (800b634 <FLASH_SetErrorCode+0x5c>)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	60d3      	str	r3, [r2, #12]
}  
 800b628:	bf00      	nop
 800b62a:	370c      	adds	r7, #12
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr
 800b634:	40022000 	.word	0x40022000
 800b638:	200006a8 	.word	0x200006a8

0800b63c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b646:	2301      	movs	r3, #1
 800b648:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800b64a:	2300      	movs	r3, #0
 800b64c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b64e:	4b2e      	ldr	r3, [pc, #184]	; (800b708 <HAL_FLASHEx_Erase+0xcc>)
 800b650:	7e1b      	ldrb	r3, [r3, #24]
 800b652:	2b01      	cmp	r3, #1
 800b654:	d101      	bne.n	800b65a <HAL_FLASHEx_Erase+0x1e>
 800b656:	2302      	movs	r3, #2
 800b658:	e052      	b.n	800b700 <HAL_FLASHEx_Erase+0xc4>
 800b65a:	4b2b      	ldr	r3, [pc, #172]	; (800b708 <HAL_FLASHEx_Erase+0xcc>)
 800b65c:	2201      	movs	r2, #1
 800b65e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2b01      	cmp	r3, #1
 800b666:	d115      	bne.n	800b694 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800b668:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b66c:	f7ff ff74 	bl	800b558 <FLASH_WaitForLastOperation>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d140      	bne.n	800b6f8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 800b676:	f000 f84b 	bl	800b710 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b67a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b67e:	f7ff ff6b 	bl	800b558 <FLASH_WaitForLastOperation>
 800b682:	4603      	mov	r3, r0
 800b684:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800b686:	4b21      	ldr	r3, [pc, #132]	; (800b70c <HAL_FLASHEx_Erase+0xd0>)
 800b688:	691b      	ldr	r3, [r3, #16]
 800b68a:	4a20      	ldr	r2, [pc, #128]	; (800b70c <HAL_FLASHEx_Erase+0xd0>)
 800b68c:	f023 0304 	bic.w	r3, r3, #4
 800b690:	6113      	str	r3, [r2, #16]
 800b692:	e031      	b.n	800b6f8 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800b694:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b698:	f7ff ff5e 	bl	800b558 <FLASH_WaitForLastOperation>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d12a      	bne.n	800b6f8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a8:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	60bb      	str	r3, [r7, #8]
 800b6b0:	e019      	b.n	800b6e6 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800b6b2:	68b8      	ldr	r0, [r7, #8]
 800b6b4:	f000 f846 	bl	800b744 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b6b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b6bc:	f7ff ff4c 	bl	800b558 <FLASH_WaitForLastOperation>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b6c4:	4b11      	ldr	r3, [pc, #68]	; (800b70c <HAL_FLASHEx_Erase+0xd0>)
 800b6c6:	691b      	ldr	r3, [r3, #16]
 800b6c8:	4a10      	ldr	r2, [pc, #64]	; (800b70c <HAL_FLASHEx_Erase+0xd0>)
 800b6ca:	f023 0302 	bic.w	r3, r3, #2
 800b6ce:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800b6d0:	7bfb      	ldrb	r3, [r7, #15]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d003      	beq.n	800b6de <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	68ba      	ldr	r2, [r7, #8]
 800b6da:	601a      	str	r2, [r3, #0]
            break;
 800b6dc:	e00c      	b.n	800b6f8 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6e4:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	02da      	lsls	r2, r3, #11
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800b6f2:	68ba      	ldr	r2, [r7, #8]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d3dc      	bcc.n	800b6b2 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b6f8:	4b03      	ldr	r3, [pc, #12]	; (800b708 <HAL_FLASHEx_Erase+0xcc>)
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	761a      	strb	r2, [r3, #24]

  return status;
 800b6fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b700:	4618      	mov	r0, r3
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	200006a8 	.word	0x200006a8
 800b70c:	40022000 	.word	0x40022000

0800b710 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800b710:	b480      	push	{r7}
 800b712:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b714:	4b09      	ldr	r3, [pc, #36]	; (800b73c <FLASH_MassErase+0x2c>)
 800b716:	2200      	movs	r2, #0
 800b718:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800b71a:	4b09      	ldr	r3, [pc, #36]	; (800b740 <FLASH_MassErase+0x30>)
 800b71c:	691b      	ldr	r3, [r3, #16]
 800b71e:	4a08      	ldr	r2, [pc, #32]	; (800b740 <FLASH_MassErase+0x30>)
 800b720:	f043 0304 	orr.w	r3, r3, #4
 800b724:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800b726:	4b06      	ldr	r3, [pc, #24]	; (800b740 <FLASH_MassErase+0x30>)
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	4a05      	ldr	r2, [pc, #20]	; (800b740 <FLASH_MassErase+0x30>)
 800b72c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b730:	6113      	str	r3, [r2, #16]
}
 800b732:	bf00      	nop
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr
 800b73c:	200006a8 	.word	0x200006a8
 800b740:	40022000 	.word	0x40022000

0800b744 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b74c:	4b0b      	ldr	r3, [pc, #44]	; (800b77c <FLASH_PageErase+0x38>)
 800b74e:	2200      	movs	r2, #0
 800b750:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800b752:	4b0b      	ldr	r3, [pc, #44]	; (800b780 <FLASH_PageErase+0x3c>)
 800b754:	691b      	ldr	r3, [r3, #16]
 800b756:	4a0a      	ldr	r2, [pc, #40]	; (800b780 <FLASH_PageErase+0x3c>)
 800b758:	f043 0302 	orr.w	r3, r3, #2
 800b75c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800b75e:	4a08      	ldr	r2, [pc, #32]	; (800b780 <FLASH_PageErase+0x3c>)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800b764:	4b06      	ldr	r3, [pc, #24]	; (800b780 <FLASH_PageErase+0x3c>)
 800b766:	691b      	ldr	r3, [r3, #16]
 800b768:	4a05      	ldr	r2, [pc, #20]	; (800b780 <FLASH_PageErase+0x3c>)
 800b76a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b76e:	6113      	str	r3, [r2, #16]
}
 800b770:	bf00      	nop
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr
 800b77c:	200006a8 	.word	0x200006a8
 800b780:	40022000 	.word	0x40022000

0800b784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b784:	b480      	push	{r7}
 800b786:	b087      	sub	sp, #28
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b78e:	2300      	movs	r3, #0
 800b790:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b792:	e154      	b.n	800ba3e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	2101      	movs	r1, #1
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	fa01 f303 	lsl.w	r3, r1, r3
 800b7a0:	4013      	ands	r3, r2
 800b7a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f000 8146 	beq.w	800ba38 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	685b      	ldr	r3, [r3, #4]
 800b7b0:	f003 0303 	and.w	r3, r3, #3
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d005      	beq.n	800b7c4 <HAL_GPIO_Init+0x40>
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	f003 0303 	and.w	r3, r3, #3
 800b7c0:	2b02      	cmp	r3, #2
 800b7c2:	d130      	bne.n	800b826 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	005b      	lsls	r3, r3, #1
 800b7ce:	2203      	movs	r2, #3
 800b7d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b7d4:	43db      	mvns	r3, r3
 800b7d6:	693a      	ldr	r2, [r7, #16]
 800b7d8:	4013      	ands	r3, r2
 800b7da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	68da      	ldr	r2, [r3, #12]
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	005b      	lsls	r3, r3, #1
 800b7e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b7e8:	693a      	ldr	r2, [r7, #16]
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	693a      	ldr	r2, [r7, #16]
 800b7f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b802:	43db      	mvns	r3, r3
 800b804:	693a      	ldr	r2, [r7, #16]
 800b806:	4013      	ands	r3, r2
 800b808:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	091b      	lsrs	r3, r3, #4
 800b810:	f003 0201 	and.w	r2, r3, #1
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	fa02 f303 	lsl.w	r3, r2, r3
 800b81a:	693a      	ldr	r2, [r7, #16]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	693a      	ldr	r2, [r7, #16]
 800b824:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	f003 0303 	and.w	r3, r3, #3
 800b82e:	2b03      	cmp	r3, #3
 800b830:	d017      	beq.n	800b862 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	005b      	lsls	r3, r3, #1
 800b83c:	2203      	movs	r2, #3
 800b83e:	fa02 f303 	lsl.w	r3, r2, r3
 800b842:	43db      	mvns	r3, r3
 800b844:	693a      	ldr	r2, [r7, #16]
 800b846:	4013      	ands	r3, r2
 800b848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	689a      	ldr	r2, [r3, #8]
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	005b      	lsls	r3, r3, #1
 800b852:	fa02 f303 	lsl.w	r3, r2, r3
 800b856:	693a      	ldr	r2, [r7, #16]
 800b858:	4313      	orrs	r3, r2
 800b85a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	693a      	ldr	r2, [r7, #16]
 800b860:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	f003 0303 	and.w	r3, r3, #3
 800b86a:	2b02      	cmp	r3, #2
 800b86c:	d123      	bne.n	800b8b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	08da      	lsrs	r2, r3, #3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	3208      	adds	r2, #8
 800b876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b87a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	f003 0307 	and.w	r3, r3, #7
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	220f      	movs	r2, #15
 800b886:	fa02 f303 	lsl.w	r3, r2, r3
 800b88a:	43db      	mvns	r3, r3
 800b88c:	693a      	ldr	r2, [r7, #16]
 800b88e:	4013      	ands	r3, r2
 800b890:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	691a      	ldr	r2, [r3, #16]
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	f003 0307 	and.w	r3, r3, #7
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	fa02 f303 	lsl.w	r3, r2, r3
 800b8a2:	693a      	ldr	r2, [r7, #16]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	08da      	lsrs	r2, r3, #3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	3208      	adds	r2, #8
 800b8b0:	6939      	ldr	r1, [r7, #16]
 800b8b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	005b      	lsls	r3, r3, #1
 800b8c0:	2203      	movs	r2, #3
 800b8c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8c6:	43db      	mvns	r3, r3
 800b8c8:	693a      	ldr	r2, [r7, #16]
 800b8ca:	4013      	ands	r3, r2
 800b8cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	f003 0203 	and.w	r2, r3, #3
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	005b      	lsls	r3, r3, #1
 800b8da:	fa02 f303 	lsl.w	r3, r2, r3
 800b8de:	693a      	ldr	r2, [r7, #16]
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	693a      	ldr	r2, [r7, #16]
 800b8e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f000 80a0 	beq.w	800ba38 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b8f8:	4b58      	ldr	r3, [pc, #352]	; (800ba5c <HAL_GPIO_Init+0x2d8>)
 800b8fa:	699b      	ldr	r3, [r3, #24]
 800b8fc:	4a57      	ldr	r2, [pc, #348]	; (800ba5c <HAL_GPIO_Init+0x2d8>)
 800b8fe:	f043 0301 	orr.w	r3, r3, #1
 800b902:	6193      	str	r3, [r2, #24]
 800b904:	4b55      	ldr	r3, [pc, #340]	; (800ba5c <HAL_GPIO_Init+0x2d8>)
 800b906:	699b      	ldr	r3, [r3, #24]
 800b908:	f003 0301 	and.w	r3, r3, #1
 800b90c:	60bb      	str	r3, [r7, #8]
 800b90e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800b910:	4a53      	ldr	r2, [pc, #332]	; (800ba60 <HAL_GPIO_Init+0x2dc>)
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	089b      	lsrs	r3, r3, #2
 800b916:	3302      	adds	r3, #2
 800b918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b91c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	f003 0303 	and.w	r3, r3, #3
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	220f      	movs	r2, #15
 800b928:	fa02 f303 	lsl.w	r3, r2, r3
 800b92c:	43db      	mvns	r3, r3
 800b92e:	693a      	ldr	r2, [r7, #16]
 800b930:	4013      	ands	r3, r2
 800b932:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b93a:	d019      	beq.n	800b970 <HAL_GPIO_Init+0x1ec>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4a49      	ldr	r2, [pc, #292]	; (800ba64 <HAL_GPIO_Init+0x2e0>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d013      	beq.n	800b96c <HAL_GPIO_Init+0x1e8>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	4a48      	ldr	r2, [pc, #288]	; (800ba68 <HAL_GPIO_Init+0x2e4>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d00d      	beq.n	800b968 <HAL_GPIO_Init+0x1e4>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4a47      	ldr	r2, [pc, #284]	; (800ba6c <HAL_GPIO_Init+0x2e8>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d007      	beq.n	800b964 <HAL_GPIO_Init+0x1e0>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	4a46      	ldr	r2, [pc, #280]	; (800ba70 <HAL_GPIO_Init+0x2ec>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d101      	bne.n	800b960 <HAL_GPIO_Init+0x1dc>
 800b95c:	2304      	movs	r3, #4
 800b95e:	e008      	b.n	800b972 <HAL_GPIO_Init+0x1ee>
 800b960:	2305      	movs	r3, #5
 800b962:	e006      	b.n	800b972 <HAL_GPIO_Init+0x1ee>
 800b964:	2303      	movs	r3, #3
 800b966:	e004      	b.n	800b972 <HAL_GPIO_Init+0x1ee>
 800b968:	2302      	movs	r3, #2
 800b96a:	e002      	b.n	800b972 <HAL_GPIO_Init+0x1ee>
 800b96c:	2301      	movs	r3, #1
 800b96e:	e000      	b.n	800b972 <HAL_GPIO_Init+0x1ee>
 800b970:	2300      	movs	r3, #0
 800b972:	697a      	ldr	r2, [r7, #20]
 800b974:	f002 0203 	and.w	r2, r2, #3
 800b978:	0092      	lsls	r2, r2, #2
 800b97a:	4093      	lsls	r3, r2
 800b97c:	693a      	ldr	r2, [r7, #16]
 800b97e:	4313      	orrs	r3, r2
 800b980:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b982:	4937      	ldr	r1, [pc, #220]	; (800ba60 <HAL_GPIO_Init+0x2dc>)
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	089b      	lsrs	r3, r3, #2
 800b988:	3302      	adds	r3, #2
 800b98a:	693a      	ldr	r2, [r7, #16]
 800b98c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b990:	4b38      	ldr	r3, [pc, #224]	; (800ba74 <HAL_GPIO_Init+0x2f0>)
 800b992:	689b      	ldr	r3, [r3, #8]
 800b994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	43db      	mvns	r3, r3
 800b99a:	693a      	ldr	r2, [r7, #16]
 800b99c:	4013      	ands	r3, r2
 800b99e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d003      	beq.n	800b9b4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800b9ac:	693a      	ldr	r2, [r7, #16]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800b9b4:	4a2f      	ldr	r2, [pc, #188]	; (800ba74 <HAL_GPIO_Init+0x2f0>)
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b9ba:	4b2e      	ldr	r3, [pc, #184]	; (800ba74 <HAL_GPIO_Init+0x2f0>)
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	43db      	mvns	r3, r3
 800b9c4:	693a      	ldr	r2, [r7, #16]
 800b9c6:	4013      	ands	r3, r2
 800b9c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d003      	beq.n	800b9de <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800b9d6:	693a      	ldr	r2, [r7, #16]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800b9de:	4a25      	ldr	r2, [pc, #148]	; (800ba74 <HAL_GPIO_Init+0x2f0>)
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b9e4:	4b23      	ldr	r3, [pc, #140]	; (800ba74 <HAL_GPIO_Init+0x2f0>)
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	43db      	mvns	r3, r3
 800b9ee:	693a      	ldr	r2, [r7, #16]
 800b9f0:	4013      	ands	r3, r2
 800b9f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d003      	beq.n	800ba08 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800ba00:	693a      	ldr	r2, [r7, #16]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800ba08:	4a1a      	ldr	r2, [pc, #104]	; (800ba74 <HAL_GPIO_Init+0x2f0>)
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ba0e:	4b19      	ldr	r3, [pc, #100]	; (800ba74 <HAL_GPIO_Init+0x2f0>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	43db      	mvns	r3, r3
 800ba18:	693a      	ldr	r2, [r7, #16]
 800ba1a:	4013      	ands	r3, r2
 800ba1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d003      	beq.n	800ba32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800ba2a:	693a      	ldr	r2, [r7, #16]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800ba32:	4a10      	ldr	r2, [pc, #64]	; (800ba74 <HAL_GPIO_Init+0x2f0>)
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	fa22 f303 	lsr.w	r3, r2, r3
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f47f aea3 	bne.w	800b794 <HAL_GPIO_Init+0x10>
  }
}
 800ba4e:	bf00      	nop
 800ba50:	bf00      	nop
 800ba52:	371c      	adds	r7, #28
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr
 800ba5c:	40021000 	.word	0x40021000
 800ba60:	40010000 	.word	0x40010000
 800ba64:	48000400 	.word	0x48000400
 800ba68:	48000800 	.word	0x48000800
 800ba6c:	48000c00 	.word	0x48000c00
 800ba70:	48001000 	.word	0x48001000
 800ba74:	40010400 	.word	0x40010400

0800ba78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	460b      	mov	r3, r1
 800ba82:	807b      	strh	r3, [r7, #2]
 800ba84:	4613      	mov	r3, r2
 800ba86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ba88:	787b      	ldrb	r3, [r7, #1]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d003      	beq.n	800ba96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ba8e:	887a      	ldrh	r2, [r7, #2]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ba94:	e002      	b.n	800ba9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ba96:	887a      	ldrh	r2, [r7, #2]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ba9c:	bf00      	nop
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800baa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baaa:	b08b      	sub	sp, #44	; 0x2c
 800baac:	af06      	add	r7, sp, #24
 800baae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d101      	bne.n	800baba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	e0c4      	b.n	800bc44 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d106      	bne.n	800bad4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f7ff f8dc 	bl	800ac8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2203      	movs	r2, #3
 800bad8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4618      	mov	r0, r3
 800bae2:	f003 fbf1 	bl	800f2c8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bae6:	2300      	movs	r3, #0
 800bae8:	73fb      	strb	r3, [r7, #15]
 800baea:	e040      	b.n	800bb6e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800baec:	7bfb      	ldrb	r3, [r7, #15]
 800baee:	6879      	ldr	r1, [r7, #4]
 800baf0:	1c5a      	adds	r2, r3, #1
 800baf2:	4613      	mov	r3, r2
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	4413      	add	r3, r2
 800baf8:	00db      	lsls	r3, r3, #3
 800bafa:	440b      	add	r3, r1
 800bafc:	3301      	adds	r3, #1
 800bafe:	2201      	movs	r2, #1
 800bb00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bb02:	7bfb      	ldrb	r3, [r7, #15]
 800bb04:	6879      	ldr	r1, [r7, #4]
 800bb06:	1c5a      	adds	r2, r3, #1
 800bb08:	4613      	mov	r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	4413      	add	r3, r2
 800bb0e:	00db      	lsls	r3, r3, #3
 800bb10:	440b      	add	r3, r1
 800bb12:	7bfa      	ldrb	r2, [r7, #15]
 800bb14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bb16:	7bfb      	ldrb	r3, [r7, #15]
 800bb18:	6879      	ldr	r1, [r7, #4]
 800bb1a:	1c5a      	adds	r2, r3, #1
 800bb1c:	4613      	mov	r3, r2
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	4413      	add	r3, r2
 800bb22:	00db      	lsls	r3, r3, #3
 800bb24:	440b      	add	r3, r1
 800bb26:	3303      	adds	r3, #3
 800bb28:	2200      	movs	r2, #0
 800bb2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bb2c:	7bfa      	ldrb	r2, [r7, #15]
 800bb2e:	6879      	ldr	r1, [r7, #4]
 800bb30:	4613      	mov	r3, r2
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	4413      	add	r3, r2
 800bb36:	00db      	lsls	r3, r3, #3
 800bb38:	440b      	add	r3, r1
 800bb3a:	3338      	adds	r3, #56	; 0x38
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bb40:	7bfa      	ldrb	r2, [r7, #15]
 800bb42:	6879      	ldr	r1, [r7, #4]
 800bb44:	4613      	mov	r3, r2
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	4413      	add	r3, r2
 800bb4a:	00db      	lsls	r3, r3, #3
 800bb4c:	440b      	add	r3, r1
 800bb4e:	333c      	adds	r3, #60	; 0x3c
 800bb50:	2200      	movs	r2, #0
 800bb52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bb54:	7bfa      	ldrb	r2, [r7, #15]
 800bb56:	6879      	ldr	r1, [r7, #4]
 800bb58:	4613      	mov	r3, r2
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	4413      	add	r3, r2
 800bb5e:	00db      	lsls	r3, r3, #3
 800bb60:	440b      	add	r3, r1
 800bb62:	3340      	adds	r3, #64	; 0x40
 800bb64:	2200      	movs	r2, #0
 800bb66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	73fb      	strb	r3, [r7, #15]
 800bb6e:	7bfa      	ldrb	r2, [r7, #15]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d3b9      	bcc.n	800baec <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bb78:	2300      	movs	r3, #0
 800bb7a:	73fb      	strb	r3, [r7, #15]
 800bb7c:	e044      	b.n	800bc08 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bb7e:	7bfa      	ldrb	r2, [r7, #15]
 800bb80:	6879      	ldr	r1, [r7, #4]
 800bb82:	4613      	mov	r3, r2
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	4413      	add	r3, r2
 800bb88:	00db      	lsls	r3, r3, #3
 800bb8a:	440b      	add	r3, r1
 800bb8c:	f203 1369 	addw	r3, r3, #361	; 0x169
 800bb90:	2200      	movs	r2, #0
 800bb92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bb94:	7bfa      	ldrb	r2, [r7, #15]
 800bb96:	6879      	ldr	r1, [r7, #4]
 800bb98:	4613      	mov	r3, r2
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	4413      	add	r3, r2
 800bb9e:	00db      	lsls	r3, r3, #3
 800bba0:	440b      	add	r3, r1
 800bba2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800bba6:	7bfa      	ldrb	r2, [r7, #15]
 800bba8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bbaa:	7bfa      	ldrb	r2, [r7, #15]
 800bbac:	6879      	ldr	r1, [r7, #4]
 800bbae:	4613      	mov	r3, r2
 800bbb0:	009b      	lsls	r3, r3, #2
 800bbb2:	4413      	add	r3, r2
 800bbb4:	00db      	lsls	r3, r3, #3
 800bbb6:	440b      	add	r3, r1
 800bbb8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bbc0:	7bfa      	ldrb	r2, [r7, #15]
 800bbc2:	6879      	ldr	r1, [r7, #4]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	4413      	add	r3, r2
 800bbca:	00db      	lsls	r3, r3, #3
 800bbcc:	440b      	add	r3, r1
 800bbce:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bbd6:	7bfa      	ldrb	r2, [r7, #15]
 800bbd8:	6879      	ldr	r1, [r7, #4]
 800bbda:	4613      	mov	r3, r2
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	4413      	add	r3, r2
 800bbe0:	00db      	lsls	r3, r3, #3
 800bbe2:	440b      	add	r3, r1
 800bbe4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bbe8:	2200      	movs	r2, #0
 800bbea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800bbec:	7bfa      	ldrb	r2, [r7, #15]
 800bbee:	6879      	ldr	r1, [r7, #4]
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	4413      	add	r3, r2
 800bbf6:	00db      	lsls	r3, r3, #3
 800bbf8:	440b      	add	r3, r1
 800bbfa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800bbfe:	2200      	movs	r2, #0
 800bc00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bc02:	7bfb      	ldrb	r3, [r7, #15]
 800bc04:	3301      	adds	r3, #1
 800bc06:	73fb      	strb	r3, [r7, #15]
 800bc08:	7bfa      	ldrb	r2, [r7, #15]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d3b5      	bcc.n	800bb7e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	603b      	str	r3, [r7, #0]
 800bc18:	687e      	ldr	r6, [r7, #4]
 800bc1a:	466d      	mov	r5, sp
 800bc1c:	f106 0410 	add.w	r4, r6, #16
 800bc20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bc22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bc24:	6823      	ldr	r3, [r4, #0]
 800bc26:	602b      	str	r3, [r5, #0]
 800bc28:	1d33      	adds	r3, r6, #4
 800bc2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bc2c:	6838      	ldr	r0, [r7, #0]
 800bc2e:	f003 fb66 	bl	800f2fe <USB_DevInit>

  hpcd->USB_Address = 0U;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800bc42:	2300      	movs	r3, #0
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3714      	adds	r7, #20
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	1d3b      	adds	r3, r7, #4
 800bc56:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bc58:	1d3b      	adds	r3, r7, #4
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d102      	bne.n	800bc66 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	f000 bef4 	b.w	800ca4e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bc66:	1d3b      	adds	r3, r7, #4
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f003 0301 	and.w	r3, r3, #1
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	f000 816a 	beq.w	800bf4a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800bc76:	4bb3      	ldr	r3, [pc, #716]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	f003 030c 	and.w	r3, r3, #12
 800bc7e:	2b04      	cmp	r3, #4
 800bc80:	d00c      	beq.n	800bc9c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800bc82:	4bb0      	ldr	r3, [pc, #704]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	f003 030c 	and.w	r3, r3, #12
 800bc8a:	2b08      	cmp	r3, #8
 800bc8c:	d159      	bne.n	800bd42 <HAL_RCC_OscConfig+0xf6>
 800bc8e:	4bad      	ldr	r3, [pc, #692]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc9a:	d152      	bne.n	800bd42 <HAL_RCC_OscConfig+0xf6>
 800bc9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bca0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bca4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800bca8:	fa93 f3a3 	rbit	r3, r3
 800bcac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 800bcb0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bcb4:	fab3 f383 	clz	r3, r3
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	095b      	lsrs	r3, r3, #5
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	f043 0301 	orr.w	r3, r3, #1
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	d102      	bne.n	800bcce <HAL_RCC_OscConfig+0x82>
 800bcc8:	4b9e      	ldr	r3, [pc, #632]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	e015      	b.n	800bcfa <HAL_RCC_OscConfig+0xae>
 800bcce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bcd2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bcd6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800bcda:	fa93 f3a3 	rbit	r3, r3
 800bcde:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800bce2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bce6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800bcea:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800bcee:	fa93 f3a3 	rbit	r3, r3
 800bcf2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800bcf6:	4b93      	ldr	r3, [pc, #588]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bcf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800bcfe:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800bd02:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800bd06:	fa92 f2a2 	rbit	r2, r2
 800bd0a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800bd0e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800bd12:	fab2 f282 	clz	r2, r2
 800bd16:	b2d2      	uxtb	r2, r2
 800bd18:	f042 0220 	orr.w	r2, r2, #32
 800bd1c:	b2d2      	uxtb	r2, r2
 800bd1e:	f002 021f 	and.w	r2, r2, #31
 800bd22:	2101      	movs	r1, #1
 800bd24:	fa01 f202 	lsl.w	r2, r1, r2
 800bd28:	4013      	ands	r3, r2
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f000 810c 	beq.w	800bf48 <HAL_RCC_OscConfig+0x2fc>
 800bd30:	1d3b      	adds	r3, r7, #4
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f040 8106 	bne.w	800bf48 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	f000 be86 	b.w	800ca4e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bd42:	1d3b      	adds	r3, r7, #4
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd4c:	d106      	bne.n	800bd5c <HAL_RCC_OscConfig+0x110>
 800bd4e:	4b7d      	ldr	r3, [pc, #500]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4a7c      	ldr	r2, [pc, #496]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bd54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd58:	6013      	str	r3, [r2, #0]
 800bd5a:	e030      	b.n	800bdbe <HAL_RCC_OscConfig+0x172>
 800bd5c:	1d3b      	adds	r3, r7, #4
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d10c      	bne.n	800bd80 <HAL_RCC_OscConfig+0x134>
 800bd66:	4b77      	ldr	r3, [pc, #476]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4a76      	ldr	r2, [pc, #472]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bd6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd70:	6013      	str	r3, [r2, #0]
 800bd72:	4b74      	ldr	r3, [pc, #464]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a73      	ldr	r2, [pc, #460]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bd78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bd7c:	6013      	str	r3, [r2, #0]
 800bd7e:	e01e      	b.n	800bdbe <HAL_RCC_OscConfig+0x172>
 800bd80:	1d3b      	adds	r3, r7, #4
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bd8a:	d10c      	bne.n	800bda6 <HAL_RCC_OscConfig+0x15a>
 800bd8c:	4b6d      	ldr	r3, [pc, #436]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a6c      	ldr	r2, [pc, #432]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bd92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bd96:	6013      	str	r3, [r2, #0]
 800bd98:	4b6a      	ldr	r3, [pc, #424]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4a69      	ldr	r2, [pc, #420]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bd9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bda2:	6013      	str	r3, [r2, #0]
 800bda4:	e00b      	b.n	800bdbe <HAL_RCC_OscConfig+0x172>
 800bda6:	4b67      	ldr	r3, [pc, #412]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a66      	ldr	r2, [pc, #408]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bdac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bdb0:	6013      	str	r3, [r2, #0]
 800bdb2:	4b64      	ldr	r3, [pc, #400]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a63      	ldr	r2, [pc, #396]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bdb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bdbc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800bdbe:	4b61      	ldr	r3, [pc, #388]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bdc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc2:	f023 020f 	bic.w	r2, r3, #15
 800bdc6:	1d3b      	adds	r3, r7, #4
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	495d      	ldr	r1, [pc, #372]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bdd2:	1d3b      	adds	r3, r7, #4
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d059      	beq.n	800be90 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bddc:	f7ff f93a 	bl	800b054 <HAL_GetTick>
 800bde0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bde4:	e00a      	b.n	800bdfc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bde6:	f7ff f935 	bl	800b054 <HAL_GetTick>
 800bdea:	4602      	mov	r2, r0
 800bdec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	2b64      	cmp	r3, #100	; 0x64
 800bdf4:	d902      	bls.n	800bdfc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800bdf6:	2303      	movs	r3, #3
 800bdf8:	f000 be29 	b.w	800ca4e <HAL_RCC_OscConfig+0xe02>
 800bdfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800be00:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be04:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800be08:	fa93 f3a3 	rbit	r3, r3
 800be0c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800be10:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be14:	fab3 f383 	clz	r3, r3
 800be18:	b2db      	uxtb	r3, r3
 800be1a:	095b      	lsrs	r3, r3, #5
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	f043 0301 	orr.w	r3, r3, #1
 800be22:	b2db      	uxtb	r3, r3
 800be24:	2b01      	cmp	r3, #1
 800be26:	d102      	bne.n	800be2e <HAL_RCC_OscConfig+0x1e2>
 800be28:	4b46      	ldr	r3, [pc, #280]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	e015      	b.n	800be5a <HAL_RCC_OscConfig+0x20e>
 800be2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800be32:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be36:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800be3a:	fa93 f3a3 	rbit	r3, r3
 800be3e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800be42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800be46:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800be4a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800be4e:	fa93 f3a3 	rbit	r3, r3
 800be52:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800be56:	4b3b      	ldr	r3, [pc, #236]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800be58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800be5e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800be62:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800be66:	fa92 f2a2 	rbit	r2, r2
 800be6a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800be6e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800be72:	fab2 f282 	clz	r2, r2
 800be76:	b2d2      	uxtb	r2, r2
 800be78:	f042 0220 	orr.w	r2, r2, #32
 800be7c:	b2d2      	uxtb	r2, r2
 800be7e:	f002 021f 	and.w	r2, r2, #31
 800be82:	2101      	movs	r1, #1
 800be84:	fa01 f202 	lsl.w	r2, r1, r2
 800be88:	4013      	ands	r3, r2
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d0ab      	beq.n	800bde6 <HAL_RCC_OscConfig+0x19a>
 800be8e:	e05c      	b.n	800bf4a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be90:	f7ff f8e0 	bl	800b054 <HAL_GetTick>
 800be94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800be98:	e00a      	b.n	800beb0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800be9a:	f7ff f8db 	bl	800b054 <HAL_GetTick>
 800be9e:	4602      	mov	r2, r0
 800bea0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800bea4:	1ad3      	subs	r3, r2, r3
 800bea6:	2b64      	cmp	r3, #100	; 0x64
 800bea8:	d902      	bls.n	800beb0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800beaa:	2303      	movs	r3, #3
 800beac:	f000 bdcf 	b.w	800ca4e <HAL_RCC_OscConfig+0xe02>
 800beb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800beb4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800beb8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800bebc:	fa93 f3a3 	rbit	r3, r3
 800bec0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800bec4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bec8:	fab3 f383 	clz	r3, r3
 800becc:	b2db      	uxtb	r3, r3
 800bece:	095b      	lsrs	r3, r3, #5
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	f043 0301 	orr.w	r3, r3, #1
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d102      	bne.n	800bee2 <HAL_RCC_OscConfig+0x296>
 800bedc:	4b19      	ldr	r3, [pc, #100]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	e015      	b.n	800bf0e <HAL_RCC_OscConfig+0x2c2>
 800bee2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bee6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800beea:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800beee:	fa93 f3a3 	rbit	r3, r3
 800bef2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800bef6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800befa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800befe:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800bf02:	fa93 f3a3 	rbit	r3, r3
 800bf06:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800bf0a:	4b0e      	ldr	r3, [pc, #56]	; (800bf44 <HAL_RCC_OscConfig+0x2f8>)
 800bf0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800bf12:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800bf16:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800bf1a:	fa92 f2a2 	rbit	r2, r2
 800bf1e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800bf22:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800bf26:	fab2 f282 	clz	r2, r2
 800bf2a:	b2d2      	uxtb	r2, r2
 800bf2c:	f042 0220 	orr.w	r2, r2, #32
 800bf30:	b2d2      	uxtb	r2, r2
 800bf32:	f002 021f 	and.w	r2, r2, #31
 800bf36:	2101      	movs	r1, #1
 800bf38:	fa01 f202 	lsl.w	r2, r1, r2
 800bf3c:	4013      	ands	r3, r2
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d1ab      	bne.n	800be9a <HAL_RCC_OscConfig+0x24e>
 800bf42:	e002      	b.n	800bf4a <HAL_RCC_OscConfig+0x2fe>
 800bf44:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bf48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bf4a:	1d3b      	adds	r3, r7, #4
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f003 0302 	and.w	r3, r3, #2
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	f000 816f 	beq.w	800c238 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800bf5a:	4bd0      	ldr	r3, [pc, #832]	; (800c29c <HAL_RCC_OscConfig+0x650>)
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	f003 030c 	and.w	r3, r3, #12
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00b      	beq.n	800bf7e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800bf66:	4bcd      	ldr	r3, [pc, #820]	; (800c29c <HAL_RCC_OscConfig+0x650>)
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	f003 030c 	and.w	r3, r3, #12
 800bf6e:	2b08      	cmp	r3, #8
 800bf70:	d16c      	bne.n	800c04c <HAL_RCC_OscConfig+0x400>
 800bf72:	4bca      	ldr	r3, [pc, #808]	; (800c29c <HAL_RCC_OscConfig+0x650>)
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d166      	bne.n	800c04c <HAL_RCC_OscConfig+0x400>
 800bf7e:	2302      	movs	r3, #2
 800bf80:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf84:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800bf88:	fa93 f3a3 	rbit	r3, r3
 800bf8c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800bf90:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bf94:	fab3 f383 	clz	r3, r3
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	095b      	lsrs	r3, r3, #5
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	f043 0301 	orr.w	r3, r3, #1
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d102      	bne.n	800bfae <HAL_RCC_OscConfig+0x362>
 800bfa8:	4bbc      	ldr	r3, [pc, #752]	; (800c29c <HAL_RCC_OscConfig+0x650>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	e013      	b.n	800bfd6 <HAL_RCC_OscConfig+0x38a>
 800bfae:	2302      	movs	r3, #2
 800bfb0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bfb4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800bfb8:	fa93 f3a3 	rbit	r3, r3
 800bfbc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800bfc0:	2302      	movs	r3, #2
 800bfc2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800bfc6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800bfca:	fa93 f3a3 	rbit	r3, r3
 800bfce:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800bfd2:	4bb2      	ldr	r3, [pc, #712]	; (800c29c <HAL_RCC_OscConfig+0x650>)
 800bfd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd6:	2202      	movs	r2, #2
 800bfd8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800bfdc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800bfe0:	fa92 f2a2 	rbit	r2, r2
 800bfe4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800bfe8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800bfec:	fab2 f282 	clz	r2, r2
 800bff0:	b2d2      	uxtb	r2, r2
 800bff2:	f042 0220 	orr.w	r2, r2, #32
 800bff6:	b2d2      	uxtb	r2, r2
 800bff8:	f002 021f 	and.w	r2, r2, #31
 800bffc:	2101      	movs	r1, #1
 800bffe:	fa01 f202 	lsl.w	r2, r1, r2
 800c002:	4013      	ands	r3, r2
 800c004:	2b00      	cmp	r3, #0
 800c006:	d007      	beq.n	800c018 <HAL_RCC_OscConfig+0x3cc>
 800c008:	1d3b      	adds	r3, r7, #4
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	691b      	ldr	r3, [r3, #16]
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d002      	beq.n	800c018 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	f000 bd1b 	b.w	800ca4e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c018:	4ba0      	ldr	r3, [pc, #640]	; (800c29c <HAL_RCC_OscConfig+0x650>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c020:	1d3b      	adds	r3, r7, #4
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	695b      	ldr	r3, [r3, #20]
 800c026:	21f8      	movs	r1, #248	; 0xf8
 800c028:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c02c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800c030:	fa91 f1a1 	rbit	r1, r1
 800c034:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800c038:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800c03c:	fab1 f181 	clz	r1, r1
 800c040:	b2c9      	uxtb	r1, r1
 800c042:	408b      	lsls	r3, r1
 800c044:	4995      	ldr	r1, [pc, #596]	; (800c29c <HAL_RCC_OscConfig+0x650>)
 800c046:	4313      	orrs	r3, r2
 800c048:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c04a:	e0f5      	b.n	800c238 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c04c:	1d3b      	adds	r3, r7, #4
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	2b00      	cmp	r3, #0
 800c054:	f000 8085 	beq.w	800c162 <HAL_RCC_OscConfig+0x516>
 800c058:	2301      	movs	r3, #1
 800c05a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c05e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800c062:	fa93 f3a3 	rbit	r3, r3
 800c066:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800c06a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c06e:	fab3 f383 	clz	r3, r3
 800c072:	b2db      	uxtb	r3, r3
 800c074:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800c078:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	461a      	mov	r2, r3
 800c080:	2301      	movs	r3, #1
 800c082:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c084:	f7fe ffe6 	bl	800b054 <HAL_GetTick>
 800c088:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c08c:	e00a      	b.n	800c0a4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c08e:	f7fe ffe1 	bl	800b054 <HAL_GetTick>
 800c092:	4602      	mov	r2, r0
 800c094:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c098:	1ad3      	subs	r3, r2, r3
 800c09a:	2b02      	cmp	r3, #2
 800c09c:	d902      	bls.n	800c0a4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800c09e:	2303      	movs	r3, #3
 800c0a0:	f000 bcd5 	b.w	800ca4e <HAL_RCC_OscConfig+0xe02>
 800c0a4:	2302      	movs	r3, #2
 800c0a6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c0aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800c0ae:	fa93 f3a3 	rbit	r3, r3
 800c0b2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800c0b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c0ba:	fab3 f383 	clz	r3, r3
 800c0be:	b2db      	uxtb	r3, r3
 800c0c0:	095b      	lsrs	r3, r3, #5
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	f043 0301 	orr.w	r3, r3, #1
 800c0c8:	b2db      	uxtb	r3, r3
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d102      	bne.n	800c0d4 <HAL_RCC_OscConfig+0x488>
 800c0ce:	4b73      	ldr	r3, [pc, #460]	; (800c29c <HAL_RCC_OscConfig+0x650>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	e013      	b.n	800c0fc <HAL_RCC_OscConfig+0x4b0>
 800c0d4:	2302      	movs	r3, #2
 800c0d6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c0da:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800c0de:	fa93 f3a3 	rbit	r3, r3
 800c0e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800c0e6:	2302      	movs	r3, #2
 800c0e8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800c0ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800c0f0:	fa93 f3a3 	rbit	r3, r3
 800c0f4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800c0f8:	4b68      	ldr	r3, [pc, #416]	; (800c29c <HAL_RCC_OscConfig+0x650>)
 800c0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0fc:	2202      	movs	r2, #2
 800c0fe:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800c102:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c106:	fa92 f2a2 	rbit	r2, r2
 800c10a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800c10e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800c112:	fab2 f282 	clz	r2, r2
 800c116:	b2d2      	uxtb	r2, r2
 800c118:	f042 0220 	orr.w	r2, r2, #32
 800c11c:	b2d2      	uxtb	r2, r2
 800c11e:	f002 021f 	and.w	r2, r2, #31
 800c122:	2101      	movs	r1, #1
 800c124:	fa01 f202 	lsl.w	r2, r1, r2
 800c128:	4013      	ands	r3, r2
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d0af      	beq.n	800c08e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c12e:	4b5b      	ldr	r3, [pc, #364]	; (800c29c <HAL_RCC_OscConfig+0x650>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c136:	1d3b      	adds	r3, r7, #4
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	695b      	ldr	r3, [r3, #20]
 800c13c:	21f8      	movs	r1, #248	; 0xf8
 800c13e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c142:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800c146:	fa91 f1a1 	rbit	r1, r1
 800c14a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800c14e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800c152:	fab1 f181 	clz	r1, r1
 800c156:	b2c9      	uxtb	r1, r1
 800c158:	408b      	lsls	r3, r1
 800c15a:	4950      	ldr	r1, [pc, #320]	; (800c29c <HAL_RCC_OscConfig+0x650>)
 800c15c:	4313      	orrs	r3, r2
 800c15e:	600b      	str	r3, [r1, #0]
 800c160:	e06a      	b.n	800c238 <HAL_RCC_OscConfig+0x5ec>
 800c162:	2301      	movs	r3, #1
 800c164:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c168:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c16c:	fa93 f3a3 	rbit	r3, r3
 800c170:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800c174:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c178:	fab3 f383 	clz	r3, r3
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800c182:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	461a      	mov	r2, r3
 800c18a:	2300      	movs	r3, #0
 800c18c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c18e:	f7fe ff61 	bl	800b054 <HAL_GetTick>
 800c192:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c196:	e00a      	b.n	800c1ae <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c198:	f7fe ff5c 	bl	800b054 <HAL_GetTick>
 800c19c:	4602      	mov	r2, r0
 800c19e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c1a2:	1ad3      	subs	r3, r2, r3
 800c1a4:	2b02      	cmp	r3, #2
 800c1a6:	d902      	bls.n	800c1ae <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800c1a8:	2303      	movs	r3, #3
 800c1aa:	f000 bc50 	b.w	800ca4e <HAL_RCC_OscConfig+0xe02>
 800c1ae:	2302      	movs	r3, #2
 800c1b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c1b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c1b8:	fa93 f3a3 	rbit	r3, r3
 800c1bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800c1c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c1c4:	fab3 f383 	clz	r3, r3
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	095b      	lsrs	r3, r3, #5
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	f043 0301 	orr.w	r3, r3, #1
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d102      	bne.n	800c1de <HAL_RCC_OscConfig+0x592>
 800c1d8:	4b30      	ldr	r3, [pc, #192]	; (800c29c <HAL_RCC_OscConfig+0x650>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	e013      	b.n	800c206 <HAL_RCC_OscConfig+0x5ba>
 800c1de:	2302      	movs	r3, #2
 800c1e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c1e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c1e8:	fa93 f3a3 	rbit	r3, r3
 800c1ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800c1f0:	2302      	movs	r3, #2
 800c1f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800c1f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c1fa:	fa93 f3a3 	rbit	r3, r3
 800c1fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c202:	4b26      	ldr	r3, [pc, #152]	; (800c29c <HAL_RCC_OscConfig+0x650>)
 800c204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c206:	2202      	movs	r2, #2
 800c208:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800c20c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800c210:	fa92 f2a2 	rbit	r2, r2
 800c214:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800c218:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800c21c:	fab2 f282 	clz	r2, r2
 800c220:	b2d2      	uxtb	r2, r2
 800c222:	f042 0220 	orr.w	r2, r2, #32
 800c226:	b2d2      	uxtb	r2, r2
 800c228:	f002 021f 	and.w	r2, r2, #31
 800c22c:	2101      	movs	r1, #1
 800c22e:	fa01 f202 	lsl.w	r2, r1, r2
 800c232:	4013      	ands	r3, r2
 800c234:	2b00      	cmp	r3, #0
 800c236:	d1af      	bne.n	800c198 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c238:	1d3b      	adds	r3, r7, #4
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f003 0308 	and.w	r3, r3, #8
 800c242:	2b00      	cmp	r3, #0
 800c244:	f000 80da 	beq.w	800c3fc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c248:	1d3b      	adds	r3, r7, #4
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	699b      	ldr	r3, [r3, #24]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d069      	beq.n	800c326 <HAL_RCC_OscConfig+0x6da>
 800c252:	2301      	movs	r3, #1
 800c254:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c258:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c25c:	fa93 f3a3 	rbit	r3, r3
 800c260:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800c264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c268:	fab3 f383 	clz	r3, r3
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	461a      	mov	r2, r3
 800c270:	4b0b      	ldr	r3, [pc, #44]	; (800c2a0 <HAL_RCC_OscConfig+0x654>)
 800c272:	4413      	add	r3, r2
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	461a      	mov	r2, r3
 800c278:	2301      	movs	r3, #1
 800c27a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c27c:	f7fe feea 	bl	800b054 <HAL_GetTick>
 800c280:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c284:	e00e      	b.n	800c2a4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c286:	f7fe fee5 	bl	800b054 <HAL_GetTick>
 800c28a:	4602      	mov	r2, r0
 800c28c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c290:	1ad3      	subs	r3, r2, r3
 800c292:	2b02      	cmp	r3, #2
 800c294:	d906      	bls.n	800c2a4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800c296:	2303      	movs	r3, #3
 800c298:	e3d9      	b.n	800ca4e <HAL_RCC_OscConfig+0xe02>
 800c29a:	bf00      	nop
 800c29c:	40021000 	.word	0x40021000
 800c2a0:	10908120 	.word	0x10908120
 800c2a4:	2302      	movs	r3, #2
 800c2a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c2aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c2ae:	fa93 f3a3 	rbit	r3, r3
 800c2b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c2b6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800c2ba:	2202      	movs	r2, #2
 800c2bc:	601a      	str	r2, [r3, #0]
 800c2be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	fa93 f2a3 	rbit	r2, r3
 800c2c8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800c2cc:	601a      	str	r2, [r3, #0]
 800c2ce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800c2d2:	2202      	movs	r2, #2
 800c2d4:	601a      	str	r2, [r3, #0]
 800c2d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	fa93 f2a3 	rbit	r2, r3
 800c2e0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800c2e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c2e6:	4ba5      	ldr	r3, [pc, #660]	; (800c57c <HAL_RCC_OscConfig+0x930>)
 800c2e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800c2ee:	2102      	movs	r1, #2
 800c2f0:	6019      	str	r1, [r3, #0]
 800c2f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	fa93 f1a3 	rbit	r1, r3
 800c2fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800c300:	6019      	str	r1, [r3, #0]
  return result;
 800c302:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	fab3 f383 	clz	r3, r3
 800c30c:	b2db      	uxtb	r3, r3
 800c30e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c312:	b2db      	uxtb	r3, r3
 800c314:	f003 031f 	and.w	r3, r3, #31
 800c318:	2101      	movs	r1, #1
 800c31a:	fa01 f303 	lsl.w	r3, r1, r3
 800c31e:	4013      	ands	r3, r2
 800c320:	2b00      	cmp	r3, #0
 800c322:	d0b0      	beq.n	800c286 <HAL_RCC_OscConfig+0x63a>
 800c324:	e06a      	b.n	800c3fc <HAL_RCC_OscConfig+0x7b0>
 800c326:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800c32a:	2201      	movs	r2, #1
 800c32c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c32e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	fa93 f2a3 	rbit	r2, r3
 800c338:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800c33c:	601a      	str	r2, [r3, #0]
  return result;
 800c33e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800c342:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c344:	fab3 f383 	clz	r3, r3
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	461a      	mov	r2, r3
 800c34c:	4b8c      	ldr	r3, [pc, #560]	; (800c580 <HAL_RCC_OscConfig+0x934>)
 800c34e:	4413      	add	r3, r2
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	461a      	mov	r2, r3
 800c354:	2300      	movs	r3, #0
 800c356:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c358:	f7fe fe7c 	bl	800b054 <HAL_GetTick>
 800c35c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c360:	e009      	b.n	800c376 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c362:	f7fe fe77 	bl	800b054 <HAL_GetTick>
 800c366:	4602      	mov	r2, r0
 800c368:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c36c:	1ad3      	subs	r3, r2, r3
 800c36e:	2b02      	cmp	r3, #2
 800c370:	d901      	bls.n	800c376 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800c372:	2303      	movs	r3, #3
 800c374:	e36b      	b.n	800ca4e <HAL_RCC_OscConfig+0xe02>
 800c376:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800c37a:	2202      	movs	r2, #2
 800c37c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c37e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	fa93 f2a3 	rbit	r2, r3
 800c388:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800c38c:	601a      	str	r2, [r3, #0]
 800c38e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800c392:	2202      	movs	r2, #2
 800c394:	601a      	str	r2, [r3, #0]
 800c396:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	fa93 f2a3 	rbit	r2, r3
 800c3a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800c3a4:	601a      	str	r2, [r3, #0]
 800c3a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800c3aa:	2202      	movs	r2, #2
 800c3ac:	601a      	str	r2, [r3, #0]
 800c3ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	fa93 f2a3 	rbit	r2, r3
 800c3b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c3bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c3be:	4b6f      	ldr	r3, [pc, #444]	; (800c57c <HAL_RCC_OscConfig+0x930>)
 800c3c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800c3c6:	2102      	movs	r1, #2
 800c3c8:	6019      	str	r1, [r3, #0]
 800c3ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	fa93 f1a3 	rbit	r1, r3
 800c3d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800c3d8:	6019      	str	r1, [r3, #0]
  return result;
 800c3da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	fab3 f383 	clz	r3, r3
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	f003 031f 	and.w	r3, r3, #31
 800c3f0:	2101      	movs	r1, #1
 800c3f2:	fa01 f303 	lsl.w	r3, r1, r3
 800c3f6:	4013      	ands	r3, r2
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d1b2      	bne.n	800c362 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c3fc:	1d3b      	adds	r3, r7, #4
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f003 0304 	and.w	r3, r3, #4
 800c406:	2b00      	cmp	r3, #0
 800c408:	f000 8158 	beq.w	800c6bc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c40c:	2300      	movs	r3, #0
 800c40e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c412:	4b5a      	ldr	r3, [pc, #360]	; (800c57c <HAL_RCC_OscConfig+0x930>)
 800c414:	69db      	ldr	r3, [r3, #28]
 800c416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d112      	bne.n	800c444 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c41e:	4b57      	ldr	r3, [pc, #348]	; (800c57c <HAL_RCC_OscConfig+0x930>)
 800c420:	69db      	ldr	r3, [r3, #28]
 800c422:	4a56      	ldr	r2, [pc, #344]	; (800c57c <HAL_RCC_OscConfig+0x930>)
 800c424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c428:	61d3      	str	r3, [r2, #28]
 800c42a:	4b54      	ldr	r3, [pc, #336]	; (800c57c <HAL_RCC_OscConfig+0x930>)
 800c42c:	69db      	ldr	r3, [r3, #28]
 800c42e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800c432:	f107 0308 	add.w	r3, r7, #8
 800c436:	601a      	str	r2, [r3, #0]
 800c438:	f107 0308 	add.w	r3, r7, #8
 800c43c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800c43e:	2301      	movs	r3, #1
 800c440:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c444:	4b4f      	ldr	r3, [pc, #316]	; (800c584 <HAL_RCC_OscConfig+0x938>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d11a      	bne.n	800c486 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c450:	4b4c      	ldr	r3, [pc, #304]	; (800c584 <HAL_RCC_OscConfig+0x938>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a4b      	ldr	r2, [pc, #300]	; (800c584 <HAL_RCC_OscConfig+0x938>)
 800c456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c45a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c45c:	f7fe fdfa 	bl	800b054 <HAL_GetTick>
 800c460:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c464:	e009      	b.n	800c47a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c466:	f7fe fdf5 	bl	800b054 <HAL_GetTick>
 800c46a:	4602      	mov	r2, r0
 800c46c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c470:	1ad3      	subs	r3, r2, r3
 800c472:	2b64      	cmp	r3, #100	; 0x64
 800c474:	d901      	bls.n	800c47a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800c476:	2303      	movs	r3, #3
 800c478:	e2e9      	b.n	800ca4e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c47a:	4b42      	ldr	r3, [pc, #264]	; (800c584 <HAL_RCC_OscConfig+0x938>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c482:	2b00      	cmp	r3, #0
 800c484:	d0ef      	beq.n	800c466 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c486:	1d3b      	adds	r3, r7, #4
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d106      	bne.n	800c49e <HAL_RCC_OscConfig+0x852>
 800c490:	4b3a      	ldr	r3, [pc, #232]	; (800c57c <HAL_RCC_OscConfig+0x930>)
 800c492:	6a1b      	ldr	r3, [r3, #32]
 800c494:	4a39      	ldr	r2, [pc, #228]	; (800c57c <HAL_RCC_OscConfig+0x930>)
 800c496:	f043 0301 	orr.w	r3, r3, #1
 800c49a:	6213      	str	r3, [r2, #32]
 800c49c:	e02f      	b.n	800c4fe <HAL_RCC_OscConfig+0x8b2>
 800c49e:	1d3b      	adds	r3, r7, #4
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d10c      	bne.n	800c4c2 <HAL_RCC_OscConfig+0x876>
 800c4a8:	4b34      	ldr	r3, [pc, #208]	; (800c57c <HAL_RCC_OscConfig+0x930>)
 800c4aa:	6a1b      	ldr	r3, [r3, #32]
 800c4ac:	4a33      	ldr	r2, [pc, #204]	; (800c57c <HAL_RCC_OscConfig+0x930>)
 800c4ae:	f023 0301 	bic.w	r3, r3, #1
 800c4b2:	6213      	str	r3, [r2, #32]
 800c4b4:	4b31      	ldr	r3, [pc, #196]	; (800c57c <HAL_RCC_OscConfig+0x930>)
 800c4b6:	6a1b      	ldr	r3, [r3, #32]
 800c4b8:	4a30      	ldr	r2, [pc, #192]	; (800c57c <HAL_RCC_OscConfig+0x930>)
 800c4ba:	f023 0304 	bic.w	r3, r3, #4
 800c4be:	6213      	str	r3, [r2, #32]
 800c4c0:	e01d      	b.n	800c4fe <HAL_RCC_OscConfig+0x8b2>
 800c4c2:	1d3b      	adds	r3, r7, #4
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	2b05      	cmp	r3, #5
 800c4ca:	d10c      	bne.n	800c4e6 <HAL_RCC_OscConfig+0x89a>
 800c4cc:	4b2b      	ldr	r3, [pc, #172]	; (800c57c <HAL_RCC_OscConfig+0x930>)
 800c4ce:	6a1b      	ldr	r3, [r3, #32]
 800c4d0:	4a2a      	ldr	r2, [pc, #168]	; (800c57c <HAL_RCC_OscConfig+0x930>)
 800c4d2:	f043 0304 	orr.w	r3, r3, #4
 800c4d6:	6213      	str	r3, [r2, #32]
 800c4d8:	4b28      	ldr	r3, [pc, #160]	; (800c57c <HAL_RCC_OscConfig+0x930>)
 800c4da:	6a1b      	ldr	r3, [r3, #32]
 800c4dc:	4a27      	ldr	r2, [pc, #156]	; (800c57c <HAL_RCC_OscConfig+0x930>)
 800c4de:	f043 0301 	orr.w	r3, r3, #1
 800c4e2:	6213      	str	r3, [r2, #32]
 800c4e4:	e00b      	b.n	800c4fe <HAL_RCC_OscConfig+0x8b2>
 800c4e6:	4b25      	ldr	r3, [pc, #148]	; (800c57c <HAL_RCC_OscConfig+0x930>)
 800c4e8:	6a1b      	ldr	r3, [r3, #32]
 800c4ea:	4a24      	ldr	r2, [pc, #144]	; (800c57c <HAL_RCC_OscConfig+0x930>)
 800c4ec:	f023 0301 	bic.w	r3, r3, #1
 800c4f0:	6213      	str	r3, [r2, #32]
 800c4f2:	4b22      	ldr	r3, [pc, #136]	; (800c57c <HAL_RCC_OscConfig+0x930>)
 800c4f4:	6a1b      	ldr	r3, [r3, #32]
 800c4f6:	4a21      	ldr	r2, [pc, #132]	; (800c57c <HAL_RCC_OscConfig+0x930>)
 800c4f8:	f023 0304 	bic.w	r3, r3, #4
 800c4fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c4fe:	1d3b      	adds	r3, r7, #4
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	68db      	ldr	r3, [r3, #12]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d06b      	beq.n	800c5e0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c508:	f7fe fda4 	bl	800b054 <HAL_GetTick>
 800c50c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c510:	e00b      	b.n	800c52a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c512:	f7fe fd9f 	bl	800b054 <HAL_GetTick>
 800c516:	4602      	mov	r2, r0
 800c518:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c51c:	1ad3      	subs	r3, r2, r3
 800c51e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c522:	4293      	cmp	r3, r2
 800c524:	d901      	bls.n	800c52a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800c526:	2303      	movs	r3, #3
 800c528:	e291      	b.n	800ca4e <HAL_RCC_OscConfig+0xe02>
 800c52a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800c52e:	2202      	movs	r2, #2
 800c530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c532:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	fa93 f2a3 	rbit	r2, r3
 800c53c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800c540:	601a      	str	r2, [r3, #0]
 800c542:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800c546:	2202      	movs	r2, #2
 800c548:	601a      	str	r2, [r3, #0]
 800c54a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	fa93 f2a3 	rbit	r2, r3
 800c554:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800c558:	601a      	str	r2, [r3, #0]
  return result;
 800c55a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800c55e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c560:	fab3 f383 	clz	r3, r3
 800c564:	b2db      	uxtb	r3, r3
 800c566:	095b      	lsrs	r3, r3, #5
 800c568:	b2db      	uxtb	r3, r3
 800c56a:	f043 0302 	orr.w	r3, r3, #2
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b02      	cmp	r3, #2
 800c572:	d109      	bne.n	800c588 <HAL_RCC_OscConfig+0x93c>
 800c574:	4b01      	ldr	r3, [pc, #4]	; (800c57c <HAL_RCC_OscConfig+0x930>)
 800c576:	6a1b      	ldr	r3, [r3, #32]
 800c578:	e014      	b.n	800c5a4 <HAL_RCC_OscConfig+0x958>
 800c57a:	bf00      	nop
 800c57c:	40021000 	.word	0x40021000
 800c580:	10908120 	.word	0x10908120
 800c584:	40007000 	.word	0x40007000
 800c588:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800c58c:	2202      	movs	r2, #2
 800c58e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c590:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	fa93 f2a3 	rbit	r2, r3
 800c59a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c59e:	601a      	str	r2, [r3, #0]
 800c5a0:	4bbb      	ldr	r3, [pc, #748]	; (800c890 <HAL_RCC_OscConfig+0xc44>)
 800c5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800c5a8:	2102      	movs	r1, #2
 800c5aa:	6011      	str	r1, [r2, #0]
 800c5ac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800c5b0:	6812      	ldr	r2, [r2, #0]
 800c5b2:	fa92 f1a2 	rbit	r1, r2
 800c5b6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800c5ba:	6011      	str	r1, [r2, #0]
  return result;
 800c5bc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800c5c0:	6812      	ldr	r2, [r2, #0]
 800c5c2:	fab2 f282 	clz	r2, r2
 800c5c6:	b2d2      	uxtb	r2, r2
 800c5c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c5cc:	b2d2      	uxtb	r2, r2
 800c5ce:	f002 021f 	and.w	r2, r2, #31
 800c5d2:	2101      	movs	r1, #1
 800c5d4:	fa01 f202 	lsl.w	r2, r1, r2
 800c5d8:	4013      	ands	r3, r2
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d099      	beq.n	800c512 <HAL_RCC_OscConfig+0x8c6>
 800c5de:	e063      	b.n	800c6a8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c5e0:	f7fe fd38 	bl	800b054 <HAL_GetTick>
 800c5e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c5e8:	e00b      	b.n	800c602 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c5ea:	f7fe fd33 	bl	800b054 <HAL_GetTick>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c5f4:	1ad3      	subs	r3, r2, r3
 800c5f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d901      	bls.n	800c602 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800c5fe:	2303      	movs	r3, #3
 800c600:	e225      	b.n	800ca4e <HAL_RCC_OscConfig+0xe02>
 800c602:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800c606:	2202      	movs	r2, #2
 800c608:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c60a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	fa93 f2a3 	rbit	r2, r3
 800c614:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800c618:	601a      	str	r2, [r3, #0]
 800c61a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800c61e:	2202      	movs	r2, #2
 800c620:	601a      	str	r2, [r3, #0]
 800c622:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	fa93 f2a3 	rbit	r2, r3
 800c62c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800c630:	601a      	str	r2, [r3, #0]
  return result;
 800c632:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800c636:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c638:	fab3 f383 	clz	r3, r3
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	095b      	lsrs	r3, r3, #5
 800c640:	b2db      	uxtb	r3, r3
 800c642:	f043 0302 	orr.w	r3, r3, #2
 800c646:	b2db      	uxtb	r3, r3
 800c648:	2b02      	cmp	r3, #2
 800c64a:	d102      	bne.n	800c652 <HAL_RCC_OscConfig+0xa06>
 800c64c:	4b90      	ldr	r3, [pc, #576]	; (800c890 <HAL_RCC_OscConfig+0xc44>)
 800c64e:	6a1b      	ldr	r3, [r3, #32]
 800c650:	e00d      	b.n	800c66e <HAL_RCC_OscConfig+0xa22>
 800c652:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800c656:	2202      	movs	r2, #2
 800c658:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c65a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	fa93 f2a3 	rbit	r2, r3
 800c664:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c668:	601a      	str	r2, [r3, #0]
 800c66a:	4b89      	ldr	r3, [pc, #548]	; (800c890 <HAL_RCC_OscConfig+0xc44>)
 800c66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c66e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800c672:	2102      	movs	r1, #2
 800c674:	6011      	str	r1, [r2, #0]
 800c676:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800c67a:	6812      	ldr	r2, [r2, #0]
 800c67c:	fa92 f1a2 	rbit	r1, r2
 800c680:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800c684:	6011      	str	r1, [r2, #0]
  return result;
 800c686:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800c68a:	6812      	ldr	r2, [r2, #0]
 800c68c:	fab2 f282 	clz	r2, r2
 800c690:	b2d2      	uxtb	r2, r2
 800c692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c696:	b2d2      	uxtb	r2, r2
 800c698:	f002 021f 	and.w	r2, r2, #31
 800c69c:	2101      	movs	r1, #1
 800c69e:	fa01 f202 	lsl.w	r2, r1, r2
 800c6a2:	4013      	ands	r3, r2
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d1a0      	bne.n	800c5ea <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800c6a8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d105      	bne.n	800c6bc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c6b0:	4b77      	ldr	r3, [pc, #476]	; (800c890 <HAL_RCC_OscConfig+0xc44>)
 800c6b2:	69db      	ldr	r3, [r3, #28]
 800c6b4:	4a76      	ldr	r2, [pc, #472]	; (800c890 <HAL_RCC_OscConfig+0xc44>)
 800c6b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c6ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c6bc:	1d3b      	adds	r3, r7, #4
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	69db      	ldr	r3, [r3, #28]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	f000 81c2 	beq.w	800ca4c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c6c8:	4b71      	ldr	r3, [pc, #452]	; (800c890 <HAL_RCC_OscConfig+0xc44>)
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	f003 030c 	and.w	r3, r3, #12
 800c6d0:	2b08      	cmp	r3, #8
 800c6d2:	f000 819c 	beq.w	800ca0e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c6d6:	1d3b      	adds	r3, r7, #4
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	69db      	ldr	r3, [r3, #28]
 800c6dc:	2b02      	cmp	r3, #2
 800c6de:	f040 8114 	bne.w	800c90a <HAL_RCC_OscConfig+0xcbe>
 800c6e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800c6e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c6ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c6ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	fa93 f2a3 	rbit	r2, r3
 800c6f6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c6fa:	601a      	str	r2, [r3, #0]
  return result;
 800c6fc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c700:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c702:	fab3 f383 	clz	r3, r3
 800c706:	b2db      	uxtb	r3, r3
 800c708:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800c70c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	461a      	mov	r2, r3
 800c714:	2300      	movs	r3, #0
 800c716:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c718:	f7fe fc9c 	bl	800b054 <HAL_GetTick>
 800c71c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c720:	e009      	b.n	800c736 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c722:	f7fe fc97 	bl	800b054 <HAL_GetTick>
 800c726:	4602      	mov	r2, r0
 800c728:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c72c:	1ad3      	subs	r3, r2, r3
 800c72e:	2b02      	cmp	r3, #2
 800c730:	d901      	bls.n	800c736 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800c732:	2303      	movs	r3, #3
 800c734:	e18b      	b.n	800ca4e <HAL_RCC_OscConfig+0xe02>
 800c736:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c73a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c73e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c740:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	fa93 f2a3 	rbit	r2, r3
 800c74a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800c74e:	601a      	str	r2, [r3, #0]
  return result;
 800c750:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800c754:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c756:	fab3 f383 	clz	r3, r3
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	095b      	lsrs	r3, r3, #5
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	f043 0301 	orr.w	r3, r3, #1
 800c764:	b2db      	uxtb	r3, r3
 800c766:	2b01      	cmp	r3, #1
 800c768:	d102      	bne.n	800c770 <HAL_RCC_OscConfig+0xb24>
 800c76a:	4b49      	ldr	r3, [pc, #292]	; (800c890 <HAL_RCC_OscConfig+0xc44>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	e01b      	b.n	800c7a8 <HAL_RCC_OscConfig+0xb5c>
 800c770:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c774:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c77a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	fa93 f2a3 	rbit	r2, r3
 800c784:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c788:	601a      	str	r2, [r3, #0]
 800c78a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c78e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c792:	601a      	str	r2, [r3, #0]
 800c794:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	fa93 f2a3 	rbit	r2, r3
 800c79e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800c7a2:	601a      	str	r2, [r3, #0]
 800c7a4:	4b3a      	ldr	r3, [pc, #232]	; (800c890 <HAL_RCC_OscConfig+0xc44>)
 800c7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c7ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800c7b0:	6011      	str	r1, [r2, #0]
 800c7b2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c7b6:	6812      	ldr	r2, [r2, #0]
 800c7b8:	fa92 f1a2 	rbit	r1, r2
 800c7bc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800c7c0:	6011      	str	r1, [r2, #0]
  return result;
 800c7c2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800c7c6:	6812      	ldr	r2, [r2, #0]
 800c7c8:	fab2 f282 	clz	r2, r2
 800c7cc:	b2d2      	uxtb	r2, r2
 800c7ce:	f042 0220 	orr.w	r2, r2, #32
 800c7d2:	b2d2      	uxtb	r2, r2
 800c7d4:	f002 021f 	and.w	r2, r2, #31
 800c7d8:	2101      	movs	r1, #1
 800c7da:	fa01 f202 	lsl.w	r2, r1, r2
 800c7de:	4013      	ands	r3, r2
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d19e      	bne.n	800c722 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c7e4:	4b2a      	ldr	r3, [pc, #168]	; (800c890 <HAL_RCC_OscConfig+0xc44>)
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800c7ec:	1d3b      	adds	r3, r7, #4
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c7f2:	1d3b      	adds	r3, r7, #4
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	6a1b      	ldr	r3, [r3, #32]
 800c7f8:	430b      	orrs	r3, r1
 800c7fa:	4925      	ldr	r1, [pc, #148]	; (800c890 <HAL_RCC_OscConfig+0xc44>)
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	604b      	str	r3, [r1, #4]
 800c800:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c804:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c80a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	fa93 f2a3 	rbit	r2, r3
 800c814:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c818:	601a      	str	r2, [r3, #0]
  return result;
 800c81a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c81e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c820:	fab3 f383 	clz	r3, r3
 800c824:	b2db      	uxtb	r3, r3
 800c826:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800c82a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	461a      	mov	r2, r3
 800c832:	2301      	movs	r3, #1
 800c834:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c836:	f7fe fc0d 	bl	800b054 <HAL_GetTick>
 800c83a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c83e:	e009      	b.n	800c854 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c840:	f7fe fc08 	bl	800b054 <HAL_GetTick>
 800c844:	4602      	mov	r2, r0
 800c846:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c84a:	1ad3      	subs	r3, r2, r3
 800c84c:	2b02      	cmp	r3, #2
 800c84e:	d901      	bls.n	800c854 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800c850:	2303      	movs	r3, #3
 800c852:	e0fc      	b.n	800ca4e <HAL_RCC_OscConfig+0xe02>
 800c854:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c858:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c85c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c85e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	fa93 f2a3 	rbit	r2, r3
 800c868:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c86c:	601a      	str	r2, [r3, #0]
  return result;
 800c86e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c872:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c874:	fab3 f383 	clz	r3, r3
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	095b      	lsrs	r3, r3, #5
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	f043 0301 	orr.w	r3, r3, #1
 800c882:	b2db      	uxtb	r3, r3
 800c884:	2b01      	cmp	r3, #1
 800c886:	d105      	bne.n	800c894 <HAL_RCC_OscConfig+0xc48>
 800c888:	4b01      	ldr	r3, [pc, #4]	; (800c890 <HAL_RCC_OscConfig+0xc44>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	e01e      	b.n	800c8cc <HAL_RCC_OscConfig+0xc80>
 800c88e:	bf00      	nop
 800c890:	40021000 	.word	0x40021000
 800c894:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c898:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c89c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c89e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	fa93 f2a3 	rbit	r2, r3
 800c8a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c8ac:	601a      	str	r2, [r3, #0]
 800c8ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c8b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c8b6:	601a      	str	r2, [r3, #0]
 800c8b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	fa93 f2a3 	rbit	r2, r3
 800c8c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c8c6:	601a      	str	r2, [r3, #0]
 800c8c8:	4b63      	ldr	r3, [pc, #396]	; (800ca58 <HAL_RCC_OscConfig+0xe0c>)
 800c8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800c8d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800c8d4:	6011      	str	r1, [r2, #0]
 800c8d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800c8da:	6812      	ldr	r2, [r2, #0]
 800c8dc:	fa92 f1a2 	rbit	r1, r2
 800c8e0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800c8e4:	6011      	str	r1, [r2, #0]
  return result;
 800c8e6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800c8ea:	6812      	ldr	r2, [r2, #0]
 800c8ec:	fab2 f282 	clz	r2, r2
 800c8f0:	b2d2      	uxtb	r2, r2
 800c8f2:	f042 0220 	orr.w	r2, r2, #32
 800c8f6:	b2d2      	uxtb	r2, r2
 800c8f8:	f002 021f 	and.w	r2, r2, #31
 800c8fc:	2101      	movs	r1, #1
 800c8fe:	fa01 f202 	lsl.w	r2, r1, r2
 800c902:	4013      	ands	r3, r2
 800c904:	2b00      	cmp	r3, #0
 800c906:	d09b      	beq.n	800c840 <HAL_RCC_OscConfig+0xbf4>
 800c908:	e0a0      	b.n	800ca4c <HAL_RCC_OscConfig+0xe00>
 800c90a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c90e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c912:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c914:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	fa93 f2a3 	rbit	r2, r3
 800c91e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c922:	601a      	str	r2, [r3, #0]
  return result;
 800c924:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c928:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c92a:	fab3 f383 	clz	r3, r3
 800c92e:	b2db      	uxtb	r3, r3
 800c930:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800c934:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	461a      	mov	r2, r3
 800c93c:	2300      	movs	r3, #0
 800c93e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c940:	f7fe fb88 	bl	800b054 <HAL_GetTick>
 800c944:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c948:	e009      	b.n	800c95e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c94a:	f7fe fb83 	bl	800b054 <HAL_GetTick>
 800c94e:	4602      	mov	r2, r0
 800c950:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c954:	1ad3      	subs	r3, r2, r3
 800c956:	2b02      	cmp	r3, #2
 800c958:	d901      	bls.n	800c95e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800c95a:	2303      	movs	r3, #3
 800c95c:	e077      	b.n	800ca4e <HAL_RCC_OscConfig+0xe02>
 800c95e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c962:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c966:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c968:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	fa93 f2a3 	rbit	r2, r3
 800c972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c976:	601a      	str	r2, [r3, #0]
  return result;
 800c978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c97c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c97e:	fab3 f383 	clz	r3, r3
 800c982:	b2db      	uxtb	r3, r3
 800c984:	095b      	lsrs	r3, r3, #5
 800c986:	b2db      	uxtb	r3, r3
 800c988:	f043 0301 	orr.w	r3, r3, #1
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d102      	bne.n	800c998 <HAL_RCC_OscConfig+0xd4c>
 800c992:	4b31      	ldr	r3, [pc, #196]	; (800ca58 <HAL_RCC_OscConfig+0xe0c>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	e01b      	b.n	800c9d0 <HAL_RCC_OscConfig+0xd84>
 800c998:	f107 0320 	add.w	r3, r7, #32
 800c99c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c9a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c9a2:	f107 0320 	add.w	r3, r7, #32
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	fa93 f2a3 	rbit	r2, r3
 800c9ac:	f107 031c 	add.w	r3, r7, #28
 800c9b0:	601a      	str	r2, [r3, #0]
 800c9b2:	f107 0318 	add.w	r3, r7, #24
 800c9b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c9ba:	601a      	str	r2, [r3, #0]
 800c9bc:	f107 0318 	add.w	r3, r7, #24
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	fa93 f2a3 	rbit	r2, r3
 800c9c6:	f107 0314 	add.w	r3, r7, #20
 800c9ca:	601a      	str	r2, [r3, #0]
 800c9cc:	4b22      	ldr	r3, [pc, #136]	; (800ca58 <HAL_RCC_OscConfig+0xe0c>)
 800c9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9d0:	f107 0210 	add.w	r2, r7, #16
 800c9d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800c9d8:	6011      	str	r1, [r2, #0]
 800c9da:	f107 0210 	add.w	r2, r7, #16
 800c9de:	6812      	ldr	r2, [r2, #0]
 800c9e0:	fa92 f1a2 	rbit	r1, r2
 800c9e4:	f107 020c 	add.w	r2, r7, #12
 800c9e8:	6011      	str	r1, [r2, #0]
  return result;
 800c9ea:	f107 020c 	add.w	r2, r7, #12
 800c9ee:	6812      	ldr	r2, [r2, #0]
 800c9f0:	fab2 f282 	clz	r2, r2
 800c9f4:	b2d2      	uxtb	r2, r2
 800c9f6:	f042 0220 	orr.w	r2, r2, #32
 800c9fa:	b2d2      	uxtb	r2, r2
 800c9fc:	f002 021f 	and.w	r2, r2, #31
 800ca00:	2101      	movs	r1, #1
 800ca02:	fa01 f202 	lsl.w	r2, r1, r2
 800ca06:	4013      	ands	r3, r2
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d19e      	bne.n	800c94a <HAL_RCC_OscConfig+0xcfe>
 800ca0c:	e01e      	b.n	800ca4c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ca0e:	1d3b      	adds	r3, r7, #4
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	69db      	ldr	r3, [r3, #28]
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d101      	bne.n	800ca1c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	e018      	b.n	800ca4e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ca1c:	4b0e      	ldr	r3, [pc, #56]	; (800ca58 <HAL_RCC_OscConfig+0xe0c>)
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800ca24:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800ca28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ca2c:	1d3b      	adds	r3, r7, #4
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	6a1b      	ldr	r3, [r3, #32]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d108      	bne.n	800ca48 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800ca36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800ca3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ca3e:	1d3b      	adds	r3, r7, #4
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d001      	beq.n	800ca4c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e000      	b.n	800ca4e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800ca4c:	2300      	movs	r3, #0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}
 800ca58:	40021000 	.word	0x40021000

0800ca5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b09e      	sub	sp, #120	; 0x78
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800ca66:	2300      	movs	r3, #0
 800ca68:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d101      	bne.n	800ca74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ca70:	2301      	movs	r3, #1
 800ca72:	e162      	b.n	800cd3a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ca74:	4b90      	ldr	r3, [pc, #576]	; (800ccb8 <HAL_RCC_ClockConfig+0x25c>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f003 0307 	and.w	r3, r3, #7
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d910      	bls.n	800caa4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca82:	4b8d      	ldr	r3, [pc, #564]	; (800ccb8 <HAL_RCC_ClockConfig+0x25c>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f023 0207 	bic.w	r2, r3, #7
 800ca8a:	498b      	ldr	r1, [pc, #556]	; (800ccb8 <HAL_RCC_ClockConfig+0x25c>)
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca92:	4b89      	ldr	r3, [pc, #548]	; (800ccb8 <HAL_RCC_ClockConfig+0x25c>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f003 0307 	and.w	r3, r3, #7
 800ca9a:	683a      	ldr	r2, [r7, #0]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d001      	beq.n	800caa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800caa0:	2301      	movs	r3, #1
 800caa2:	e14a      	b.n	800cd3a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f003 0302 	and.w	r3, r3, #2
 800caac:	2b00      	cmp	r3, #0
 800caae:	d008      	beq.n	800cac2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cab0:	4b82      	ldr	r3, [pc, #520]	; (800ccbc <HAL_RCC_ClockConfig+0x260>)
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	497f      	ldr	r1, [pc, #508]	; (800ccbc <HAL_RCC_ClockConfig+0x260>)
 800cabe:	4313      	orrs	r3, r2
 800cac0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f003 0301 	and.w	r3, r3, #1
 800caca:	2b00      	cmp	r3, #0
 800cacc:	f000 80dc 	beq.w	800cc88 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d13c      	bne.n	800cb52 <HAL_RCC_ClockConfig+0xf6>
 800cad8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cadc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cae0:	fa93 f3a3 	rbit	r3, r3
 800cae4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800cae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cae8:	fab3 f383 	clz	r3, r3
 800caec:	b2db      	uxtb	r3, r3
 800caee:	095b      	lsrs	r3, r3, #5
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	f043 0301 	orr.w	r3, r3, #1
 800caf6:	b2db      	uxtb	r3, r3
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d102      	bne.n	800cb02 <HAL_RCC_ClockConfig+0xa6>
 800cafc:	4b6f      	ldr	r3, [pc, #444]	; (800ccbc <HAL_RCC_ClockConfig+0x260>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	e00f      	b.n	800cb22 <HAL_RCC_ClockConfig+0xc6>
 800cb02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cb06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cb08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb0a:	fa93 f3a3 	rbit	r3, r3
 800cb0e:	667b      	str	r3, [r7, #100]	; 0x64
 800cb10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cb14:	663b      	str	r3, [r7, #96]	; 0x60
 800cb16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb18:	fa93 f3a3 	rbit	r3, r3
 800cb1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb1e:	4b67      	ldr	r3, [pc, #412]	; (800ccbc <HAL_RCC_ClockConfig+0x260>)
 800cb20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cb26:	65ba      	str	r2, [r7, #88]	; 0x58
 800cb28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb2a:	fa92 f2a2 	rbit	r2, r2
 800cb2e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800cb30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb32:	fab2 f282 	clz	r2, r2
 800cb36:	b2d2      	uxtb	r2, r2
 800cb38:	f042 0220 	orr.w	r2, r2, #32
 800cb3c:	b2d2      	uxtb	r2, r2
 800cb3e:	f002 021f 	and.w	r2, r2, #31
 800cb42:	2101      	movs	r1, #1
 800cb44:	fa01 f202 	lsl.w	r2, r1, r2
 800cb48:	4013      	ands	r3, r2
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d17b      	bne.n	800cc46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	e0f3      	b.n	800cd3a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	2b02      	cmp	r3, #2
 800cb58:	d13c      	bne.n	800cbd4 <HAL_RCC_ClockConfig+0x178>
 800cb5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cb5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cb60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb62:	fa93 f3a3 	rbit	r3, r3
 800cb66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800cb68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb6a:	fab3 f383 	clz	r3, r3
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	095b      	lsrs	r3, r3, #5
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	f043 0301 	orr.w	r3, r3, #1
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	d102      	bne.n	800cb84 <HAL_RCC_ClockConfig+0x128>
 800cb7e:	4b4f      	ldr	r3, [pc, #316]	; (800ccbc <HAL_RCC_ClockConfig+0x260>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	e00f      	b.n	800cba4 <HAL_RCC_ClockConfig+0x148>
 800cb84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cb88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cb8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb8c:	fa93 f3a3 	rbit	r3, r3
 800cb90:	647b      	str	r3, [r7, #68]	; 0x44
 800cb92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cb96:	643b      	str	r3, [r7, #64]	; 0x40
 800cb98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb9a:	fa93 f3a3 	rbit	r3, r3
 800cb9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cba0:	4b46      	ldr	r3, [pc, #280]	; (800ccbc <HAL_RCC_ClockConfig+0x260>)
 800cba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800cba8:	63ba      	str	r2, [r7, #56]	; 0x38
 800cbaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbac:	fa92 f2a2 	rbit	r2, r2
 800cbb0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800cbb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbb4:	fab2 f282 	clz	r2, r2
 800cbb8:	b2d2      	uxtb	r2, r2
 800cbba:	f042 0220 	orr.w	r2, r2, #32
 800cbbe:	b2d2      	uxtb	r2, r2
 800cbc0:	f002 021f 	and.w	r2, r2, #31
 800cbc4:	2101      	movs	r1, #1
 800cbc6:	fa01 f202 	lsl.w	r2, r1, r2
 800cbca:	4013      	ands	r3, r2
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d13a      	bne.n	800cc46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	e0b2      	b.n	800cd3a <HAL_RCC_ClockConfig+0x2de>
 800cbd4:	2302      	movs	r3, #2
 800cbd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbda:	fa93 f3a3 	rbit	r3, r3
 800cbde:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800cbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cbe2:	fab3 f383 	clz	r3, r3
 800cbe6:	b2db      	uxtb	r3, r3
 800cbe8:	095b      	lsrs	r3, r3, #5
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	f043 0301 	orr.w	r3, r3, #1
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d102      	bne.n	800cbfc <HAL_RCC_ClockConfig+0x1a0>
 800cbf6:	4b31      	ldr	r3, [pc, #196]	; (800ccbc <HAL_RCC_ClockConfig+0x260>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	e00d      	b.n	800cc18 <HAL_RCC_ClockConfig+0x1bc>
 800cbfc:	2302      	movs	r3, #2
 800cbfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc02:	fa93 f3a3 	rbit	r3, r3
 800cc06:	627b      	str	r3, [r7, #36]	; 0x24
 800cc08:	2302      	movs	r3, #2
 800cc0a:	623b      	str	r3, [r7, #32]
 800cc0c:	6a3b      	ldr	r3, [r7, #32]
 800cc0e:	fa93 f3a3 	rbit	r3, r3
 800cc12:	61fb      	str	r3, [r7, #28]
 800cc14:	4b29      	ldr	r3, [pc, #164]	; (800ccbc <HAL_RCC_ClockConfig+0x260>)
 800cc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc18:	2202      	movs	r2, #2
 800cc1a:	61ba      	str	r2, [r7, #24]
 800cc1c:	69ba      	ldr	r2, [r7, #24]
 800cc1e:	fa92 f2a2 	rbit	r2, r2
 800cc22:	617a      	str	r2, [r7, #20]
  return result;
 800cc24:	697a      	ldr	r2, [r7, #20]
 800cc26:	fab2 f282 	clz	r2, r2
 800cc2a:	b2d2      	uxtb	r2, r2
 800cc2c:	f042 0220 	orr.w	r2, r2, #32
 800cc30:	b2d2      	uxtb	r2, r2
 800cc32:	f002 021f 	and.w	r2, r2, #31
 800cc36:	2101      	movs	r1, #1
 800cc38:	fa01 f202 	lsl.w	r2, r1, r2
 800cc3c:	4013      	ands	r3, r2
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d101      	bne.n	800cc46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800cc42:	2301      	movs	r3, #1
 800cc44:	e079      	b.n	800cd3a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cc46:	4b1d      	ldr	r3, [pc, #116]	; (800ccbc <HAL_RCC_ClockConfig+0x260>)
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	f023 0203 	bic.w	r2, r3, #3
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	491a      	ldr	r1, [pc, #104]	; (800ccbc <HAL_RCC_ClockConfig+0x260>)
 800cc54:	4313      	orrs	r3, r2
 800cc56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cc58:	f7fe f9fc 	bl	800b054 <HAL_GetTick>
 800cc5c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc5e:	e00a      	b.n	800cc76 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc60:	f7fe f9f8 	bl	800b054 <HAL_GetTick>
 800cc64:	4602      	mov	r2, r0
 800cc66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc68:	1ad3      	subs	r3, r2, r3
 800cc6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d901      	bls.n	800cc76 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800cc72:	2303      	movs	r3, #3
 800cc74:	e061      	b.n	800cd3a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc76:	4b11      	ldr	r3, [pc, #68]	; (800ccbc <HAL_RCC_ClockConfig+0x260>)
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	f003 020c 	and.w	r2, r3, #12
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d1eb      	bne.n	800cc60 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cc88:	4b0b      	ldr	r3, [pc, #44]	; (800ccb8 <HAL_RCC_ClockConfig+0x25c>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f003 0307 	and.w	r3, r3, #7
 800cc90:	683a      	ldr	r2, [r7, #0]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d214      	bcs.n	800ccc0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc96:	4b08      	ldr	r3, [pc, #32]	; (800ccb8 <HAL_RCC_ClockConfig+0x25c>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f023 0207 	bic.w	r2, r3, #7
 800cc9e:	4906      	ldr	r1, [pc, #24]	; (800ccb8 <HAL_RCC_ClockConfig+0x25c>)
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	4313      	orrs	r3, r2
 800cca4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cca6:	4b04      	ldr	r3, [pc, #16]	; (800ccb8 <HAL_RCC_ClockConfig+0x25c>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f003 0307 	and.w	r3, r3, #7
 800ccae:	683a      	ldr	r2, [r7, #0]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d005      	beq.n	800ccc0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e040      	b.n	800cd3a <HAL_RCC_ClockConfig+0x2de>
 800ccb8:	40022000 	.word	0x40022000
 800ccbc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f003 0304 	and.w	r3, r3, #4
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d008      	beq.n	800ccde <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cccc:	4b1d      	ldr	r3, [pc, #116]	; (800cd44 <HAL_RCC_ClockConfig+0x2e8>)
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	491a      	ldr	r1, [pc, #104]	; (800cd44 <HAL_RCC_ClockConfig+0x2e8>)
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f003 0308 	and.w	r3, r3, #8
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d009      	beq.n	800ccfe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ccea:	4b16      	ldr	r3, [pc, #88]	; (800cd44 <HAL_RCC_ClockConfig+0x2e8>)
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	691b      	ldr	r3, [r3, #16]
 800ccf6:	00db      	lsls	r3, r3, #3
 800ccf8:	4912      	ldr	r1, [pc, #72]	; (800cd44 <HAL_RCC_ClockConfig+0x2e8>)
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800ccfe:	f000 f829 	bl	800cd54 <HAL_RCC_GetSysClockFreq>
 800cd02:	4601      	mov	r1, r0
 800cd04:	4b0f      	ldr	r3, [pc, #60]	; (800cd44 <HAL_RCC_ClockConfig+0x2e8>)
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd0c:	22f0      	movs	r2, #240	; 0xf0
 800cd0e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd10:	693a      	ldr	r2, [r7, #16]
 800cd12:	fa92 f2a2 	rbit	r2, r2
 800cd16:	60fa      	str	r2, [r7, #12]
  return result;
 800cd18:	68fa      	ldr	r2, [r7, #12]
 800cd1a:	fab2 f282 	clz	r2, r2
 800cd1e:	b2d2      	uxtb	r2, r2
 800cd20:	40d3      	lsrs	r3, r2
 800cd22:	4a09      	ldr	r2, [pc, #36]	; (800cd48 <HAL_RCC_ClockConfig+0x2ec>)
 800cd24:	5cd3      	ldrb	r3, [r2, r3]
 800cd26:	fa21 f303 	lsr.w	r3, r1, r3
 800cd2a:	4a08      	ldr	r2, [pc, #32]	; (800cd4c <HAL_RCC_ClockConfig+0x2f0>)
 800cd2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800cd2e:	4b08      	ldr	r3, [pc, #32]	; (800cd50 <HAL_RCC_ClockConfig+0x2f4>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7fe f94a 	bl	800afcc <HAL_InitTick>
  
  return HAL_OK;
 800cd38:	2300      	movs	r3, #0
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3778      	adds	r7, #120	; 0x78
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	40021000 	.word	0x40021000
 800cd48:	0801114c 	.word	0x0801114c
 800cd4c:	20000000 	.word	0x20000000
 800cd50:	20000004 	.word	0x20000004

0800cd54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b08b      	sub	sp, #44	; 0x2c
 800cd58:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	61fb      	str	r3, [r7, #28]
 800cd5e:	2300      	movs	r3, #0
 800cd60:	61bb      	str	r3, [r7, #24]
 800cd62:	2300      	movs	r3, #0
 800cd64:	627b      	str	r3, [r7, #36]	; 0x24
 800cd66:	2300      	movs	r3, #0
 800cd68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800cd6e:	4b29      	ldr	r3, [pc, #164]	; (800ce14 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800cd74:	69fb      	ldr	r3, [r7, #28]
 800cd76:	f003 030c 	and.w	r3, r3, #12
 800cd7a:	2b04      	cmp	r3, #4
 800cd7c:	d002      	beq.n	800cd84 <HAL_RCC_GetSysClockFreq+0x30>
 800cd7e:	2b08      	cmp	r3, #8
 800cd80:	d003      	beq.n	800cd8a <HAL_RCC_GetSysClockFreq+0x36>
 800cd82:	e03c      	b.n	800cdfe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800cd84:	4b24      	ldr	r3, [pc, #144]	; (800ce18 <HAL_RCC_GetSysClockFreq+0xc4>)
 800cd86:	623b      	str	r3, [r7, #32]
      break;
 800cd88:	e03c      	b.n	800ce04 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800cd90:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800cd94:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd96:	68ba      	ldr	r2, [r7, #8]
 800cd98:	fa92 f2a2 	rbit	r2, r2
 800cd9c:	607a      	str	r2, [r7, #4]
  return result;
 800cd9e:	687a      	ldr	r2, [r7, #4]
 800cda0:	fab2 f282 	clz	r2, r2
 800cda4:	b2d2      	uxtb	r2, r2
 800cda6:	40d3      	lsrs	r3, r2
 800cda8:	4a1c      	ldr	r2, [pc, #112]	; (800ce1c <HAL_RCC_GetSysClockFreq+0xc8>)
 800cdaa:	5cd3      	ldrb	r3, [r2, r3]
 800cdac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800cdae:	4b19      	ldr	r3, [pc, #100]	; (800ce14 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cdb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdb2:	f003 030f 	and.w	r3, r3, #15
 800cdb6:	220f      	movs	r2, #15
 800cdb8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cdba:	693a      	ldr	r2, [r7, #16]
 800cdbc:	fa92 f2a2 	rbit	r2, r2
 800cdc0:	60fa      	str	r2, [r7, #12]
  return result;
 800cdc2:	68fa      	ldr	r2, [r7, #12]
 800cdc4:	fab2 f282 	clz	r2, r2
 800cdc8:	b2d2      	uxtb	r2, r2
 800cdca:	40d3      	lsrs	r3, r2
 800cdcc:	4a14      	ldr	r2, [pc, #80]	; (800ce20 <HAL_RCC_GetSysClockFreq+0xcc>)
 800cdce:	5cd3      	ldrb	r3, [r2, r3]
 800cdd0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800cdd2:	69fb      	ldr	r3, [r7, #28]
 800cdd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d008      	beq.n	800cdee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800cddc:	4a0e      	ldr	r2, [pc, #56]	; (800ce18 <HAL_RCC_GetSysClockFreq+0xc4>)
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	fbb2 f2f3 	udiv	r2, r2, r3
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	fb02 f303 	mul.w	r3, r2, r3
 800cdea:	627b      	str	r3, [r7, #36]	; 0x24
 800cdec:	e004      	b.n	800cdf8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	4a0c      	ldr	r2, [pc, #48]	; (800ce24 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cdf2:	fb02 f303 	mul.w	r3, r2, r3
 800cdf6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800cdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfa:	623b      	str	r3, [r7, #32]
      break;
 800cdfc:	e002      	b.n	800ce04 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800cdfe:	4b06      	ldr	r3, [pc, #24]	; (800ce18 <HAL_RCC_GetSysClockFreq+0xc4>)
 800ce00:	623b      	str	r3, [r7, #32]
      break;
 800ce02:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ce04:	6a3b      	ldr	r3, [r7, #32]
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	372c      	adds	r7, #44	; 0x2c
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop
 800ce14:	40021000 	.word	0x40021000
 800ce18:	007a1200 	.word	0x007a1200
 800ce1c:	08011164 	.word	0x08011164
 800ce20:	08011174 	.word	0x08011174
 800ce24:	003d0900 	.word	0x003d0900

0800ce28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ce2c:	4b03      	ldr	r3, [pc, #12]	; (800ce3c <HAL_RCC_GetHCLKFreq+0x14>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr
 800ce3a:	bf00      	nop
 800ce3c:	20000000 	.word	0x20000000

0800ce40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800ce46:	f7ff ffef 	bl	800ce28 <HAL_RCC_GetHCLKFreq>
 800ce4a:	4601      	mov	r1, r0
 800ce4c:	4b0b      	ldr	r3, [pc, #44]	; (800ce7c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ce54:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800ce58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	fa92 f2a2 	rbit	r2, r2
 800ce60:	603a      	str	r2, [r7, #0]
  return result;
 800ce62:	683a      	ldr	r2, [r7, #0]
 800ce64:	fab2 f282 	clz	r2, r2
 800ce68:	b2d2      	uxtb	r2, r2
 800ce6a:	40d3      	lsrs	r3, r2
 800ce6c:	4a04      	ldr	r2, [pc, #16]	; (800ce80 <HAL_RCC_GetPCLK1Freq+0x40>)
 800ce6e:	5cd3      	ldrb	r3, [r2, r3]
 800ce70:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800ce74:	4618      	mov	r0, r3
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	40021000 	.word	0x40021000
 800ce80:	0801115c 	.word	0x0801115c

0800ce84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800ce8a:	f7ff ffcd 	bl	800ce28 <HAL_RCC_GetHCLKFreq>
 800ce8e:	4601      	mov	r1, r0
 800ce90:	4b0b      	ldr	r3, [pc, #44]	; (800cec0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800ce98:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800ce9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	fa92 f2a2 	rbit	r2, r2
 800cea4:	603a      	str	r2, [r7, #0]
  return result;
 800cea6:	683a      	ldr	r2, [r7, #0]
 800cea8:	fab2 f282 	clz	r2, r2
 800ceac:	b2d2      	uxtb	r2, r2
 800ceae:	40d3      	lsrs	r3, r2
 800ceb0:	4a04      	ldr	r2, [pc, #16]	; (800cec4 <HAL_RCC_GetPCLK2Freq+0x40>)
 800ceb2:	5cd3      	ldrb	r3, [r2, r3]
 800ceb4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}
 800cec0:	40021000 	.word	0x40021000
 800cec4:	0801115c 	.word	0x0801115c

0800cec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b092      	sub	sp, #72	; 0x48
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ced0:	2300      	movs	r3, #0
 800ced2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800ced4:	2300      	movs	r3, #0
 800ced6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800ced8:	2300      	movs	r3, #0
 800ceda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	f000 80d4 	beq.w	800d094 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ceec:	4b4e      	ldr	r3, [pc, #312]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ceee:	69db      	ldr	r3, [r3, #28]
 800cef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d10e      	bne.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cef8:	4b4b      	ldr	r3, [pc, #300]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800cefa:	69db      	ldr	r3, [r3, #28]
 800cefc:	4a4a      	ldr	r2, [pc, #296]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800cefe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf02:	61d3      	str	r3, [r2, #28]
 800cf04:	4b48      	ldr	r3, [pc, #288]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800cf06:	69db      	ldr	r3, [r3, #28]
 800cf08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf0c:	60bb      	str	r3, [r7, #8]
 800cf0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cf10:	2301      	movs	r3, #1
 800cf12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf16:	4b45      	ldr	r3, [pc, #276]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d118      	bne.n	800cf54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cf22:	4b42      	ldr	r3, [pc, #264]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	4a41      	ldr	r2, [pc, #260]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800cf28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cf2e:	f7fe f891 	bl	800b054 <HAL_GetTick>
 800cf32:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf34:	e008      	b.n	800cf48 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf36:	f7fe f88d 	bl	800b054 <HAL_GetTick>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf3e:	1ad3      	subs	r3, r2, r3
 800cf40:	2b64      	cmp	r3, #100	; 0x64
 800cf42:	d901      	bls.n	800cf48 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800cf44:	2303      	movs	r3, #3
 800cf46:	e169      	b.n	800d21c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf48:	4b38      	ldr	r3, [pc, #224]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d0f0      	beq.n	800cf36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cf54:	4b34      	ldr	r3, [pc, #208]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800cf56:	6a1b      	ldr	r3, [r3, #32]
 800cf58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cf5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	f000 8084 	beq.w	800d06e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d07c      	beq.n	800d06e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cf74:	4b2c      	ldr	r3, [pc, #176]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800cf76:	6a1b      	ldr	r3, [r3, #32]
 800cf78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cf82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf86:	fa93 f3a3 	rbit	r3, r3
 800cf8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800cf8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cf8e:	fab3 f383 	clz	r3, r3
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	461a      	mov	r2, r3
 800cf96:	4b26      	ldr	r3, [pc, #152]	; (800d030 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800cf98:	4413      	add	r3, r2
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	6013      	str	r3, [r2, #0]
 800cfa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cfa6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfaa:	fa93 f3a3 	rbit	r3, r3
 800cfae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800cfb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cfb2:	fab3 f383 	clz	r3, r3
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	461a      	mov	r2, r3
 800cfba:	4b1d      	ldr	r3, [pc, #116]	; (800d030 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800cfbc:	4413      	add	r3, r2
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	461a      	mov	r2, r3
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800cfc6:	4a18      	ldr	r2, [pc, #96]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800cfc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800cfcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfce:	f003 0301 	and.w	r3, r3, #1
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d04b      	beq.n	800d06e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cfd6:	f7fe f83d 	bl	800b054 <HAL_GetTick>
 800cfda:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cfdc:	e00a      	b.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cfde:	f7fe f839 	bl	800b054 <HAL_GetTick>
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfe6:	1ad3      	subs	r3, r2, r3
 800cfe8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d901      	bls.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800cff0:	2303      	movs	r3, #3
 800cff2:	e113      	b.n	800d21c <HAL_RCCEx_PeriphCLKConfig+0x354>
 800cff4:	2302      	movs	r3, #2
 800cff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffa:	fa93 f3a3 	rbit	r3, r3
 800cffe:	627b      	str	r3, [r7, #36]	; 0x24
 800d000:	2302      	movs	r3, #2
 800d002:	623b      	str	r3, [r7, #32]
 800d004:	6a3b      	ldr	r3, [r7, #32]
 800d006:	fa93 f3a3 	rbit	r3, r3
 800d00a:	61fb      	str	r3, [r7, #28]
  return result;
 800d00c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d00e:	fab3 f383 	clz	r3, r3
 800d012:	b2db      	uxtb	r3, r3
 800d014:	095b      	lsrs	r3, r3, #5
 800d016:	b2db      	uxtb	r3, r3
 800d018:	f043 0302 	orr.w	r3, r3, #2
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	2b02      	cmp	r3, #2
 800d020:	d108      	bne.n	800d034 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800d022:	4b01      	ldr	r3, [pc, #4]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d024:	6a1b      	ldr	r3, [r3, #32]
 800d026:	e00d      	b.n	800d044 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800d028:	40021000 	.word	0x40021000
 800d02c:	40007000 	.word	0x40007000
 800d030:	10908100 	.word	0x10908100
 800d034:	2302      	movs	r3, #2
 800d036:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d038:	69bb      	ldr	r3, [r7, #24]
 800d03a:	fa93 f3a3 	rbit	r3, r3
 800d03e:	617b      	str	r3, [r7, #20]
 800d040:	4b78      	ldr	r3, [pc, #480]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d044:	2202      	movs	r2, #2
 800d046:	613a      	str	r2, [r7, #16]
 800d048:	693a      	ldr	r2, [r7, #16]
 800d04a:	fa92 f2a2 	rbit	r2, r2
 800d04e:	60fa      	str	r2, [r7, #12]
  return result;
 800d050:	68fa      	ldr	r2, [r7, #12]
 800d052:	fab2 f282 	clz	r2, r2
 800d056:	b2d2      	uxtb	r2, r2
 800d058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d05c:	b2d2      	uxtb	r2, r2
 800d05e:	f002 021f 	and.w	r2, r2, #31
 800d062:	2101      	movs	r1, #1
 800d064:	fa01 f202 	lsl.w	r2, r1, r2
 800d068:	4013      	ands	r3, r2
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d0b7      	beq.n	800cfde <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800d06e:	4b6d      	ldr	r3, [pc, #436]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d070:	6a1b      	ldr	r3, [r3, #32]
 800d072:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	496a      	ldr	r1, [pc, #424]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d07c:	4313      	orrs	r3, r2
 800d07e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800d080:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d084:	2b01      	cmp	r3, #1
 800d086:	d105      	bne.n	800d094 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d088:	4b66      	ldr	r3, [pc, #408]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d08a:	69db      	ldr	r3, [r3, #28]
 800d08c:	4a65      	ldr	r2, [pc, #404]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d08e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d092:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f003 0301 	and.w	r3, r3, #1
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d008      	beq.n	800d0b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d0a0:	4b60      	ldr	r3, [pc, #384]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0a4:	f023 0203 	bic.w	r2, r3, #3
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	689b      	ldr	r3, [r3, #8]
 800d0ac:	495d      	ldr	r1, [pc, #372]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f003 0302 	and.w	r3, r3, #2
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d008      	beq.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d0be:	4b59      	ldr	r3, [pc, #356]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	68db      	ldr	r3, [r3, #12]
 800d0ca:	4956      	ldr	r1, [pc, #344]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f003 0304 	and.w	r3, r3, #4
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d008      	beq.n	800d0ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d0dc:	4b51      	ldr	r3, [pc, #324]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d0de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	691b      	ldr	r3, [r3, #16]
 800d0e8:	494e      	ldr	r1, [pc, #312]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f003 0320 	and.w	r3, r3, #32
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d008      	beq.n	800d10c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d0fa:	4b4a      	ldr	r3, [pc, #296]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0fe:	f023 0210 	bic.w	r2, r3, #16
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	69db      	ldr	r3, [r3, #28]
 800d106:	4947      	ldr	r1, [pc, #284]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d108:	4313      	orrs	r3, r2
 800d10a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d114:	2b00      	cmp	r3, #0
 800d116:	d008      	beq.n	800d12a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800d118:	4b42      	ldr	r3, [pc, #264]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d124:	493f      	ldr	r1, [pc, #252]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d126:	4313      	orrs	r3, r2
 800d128:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d132:	2b00      	cmp	r3, #0
 800d134:	d008      	beq.n	800d148 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d136:	4b3b      	ldr	r3, [pc, #236]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d13a:	f023 0220 	bic.w	r2, r3, #32
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6a1b      	ldr	r3, [r3, #32]
 800d142:	4938      	ldr	r1, [pc, #224]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d144:	4313      	orrs	r3, r2
 800d146:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f003 0308 	and.w	r3, r3, #8
 800d150:	2b00      	cmp	r3, #0
 800d152:	d008      	beq.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d154:	4b33      	ldr	r3, [pc, #204]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d158:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	695b      	ldr	r3, [r3, #20]
 800d160:	4930      	ldr	r1, [pc, #192]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d162:	4313      	orrs	r3, r2
 800d164:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f003 0310 	and.w	r3, r3, #16
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d008      	beq.n	800d184 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d172:	4b2c      	ldr	r3, [pc, #176]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d176:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	699b      	ldr	r3, [r3, #24]
 800d17e:	4929      	ldr	r1, [pc, #164]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d180:	4313      	orrs	r3, r2
 800d182:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d008      	beq.n	800d1a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d190:	4b24      	ldr	r3, [pc, #144]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d19c:	4921      	ldr	r1, [pc, #132]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d008      	beq.n	800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d1ae:	4b1d      	ldr	r3, [pc, #116]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1b2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ba:	491a      	ldr	r1, [pc, #104]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d1bc:	4313      	orrs	r3, r2
 800d1be:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d008      	beq.n	800d1de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800d1cc:	4b15      	ldr	r3, [pc, #84]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1d8:	4912      	ldr	r1, [pc, #72]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d008      	beq.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800d1ea:	4b0e      	ldr	r3, [pc, #56]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1f6:	490b      	ldr	r1, [pc, #44]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d204:	2b00      	cmp	r3, #0
 800d206:	d008      	beq.n	800d21a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800d208:	4b06      	ldr	r3, [pc, #24]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d20a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d20c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d214:	4903      	ldr	r1, [pc, #12]	; (800d224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d216:	4313      	orrs	r3, r2
 800d218:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800d21a:	2300      	movs	r3, #0
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3748      	adds	r7, #72	; 0x48
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}
 800d224:	40021000 	.word	0x40021000

0800d228 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d230:	2301      	movs	r3, #1
 800d232:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d101      	bne.n	800d23e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800d23a:	2301      	movs	r3, #1
 800d23c:	e073      	b.n	800d326 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	7f5b      	ldrb	r3, [r3, #29]
 800d242:	b2db      	uxtb	r3, r3
 800d244:	2b00      	cmp	r3, #0
 800d246:	d105      	bne.n	800d254 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f7fd fb82 	bl	800a958 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2202      	movs	r2, #2
 800d258:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	f003 0310 	and.w	r3, r3, #16
 800d264:	2b10      	cmp	r3, #16
 800d266:	d055      	beq.n	800d314 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	22ca      	movs	r2, #202	; 0xca
 800d26e:	625a      	str	r2, [r3, #36]	; 0x24
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2253      	movs	r2, #83	; 0x53
 800d276:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 f87f 	bl	800d37c <RTC_EnterInitMode>
 800d27e:	4603      	mov	r3, r0
 800d280:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d282:	7bfb      	ldrb	r3, [r7, #15]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d12c      	bne.n	800d2e2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	689b      	ldr	r3, [r3, #8]
 800d28e:	687a      	ldr	r2, [r7, #4]
 800d290:	6812      	ldr	r2, [r2, #0]
 800d292:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d29a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	6899      	ldr	r1, [r3, #8]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	685a      	ldr	r2, [r3, #4]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	691b      	ldr	r3, [r3, #16]
 800d2aa:	431a      	orrs	r2, r3
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	695b      	ldr	r3, [r3, #20]
 800d2b0:	431a      	orrs	r2, r3
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	430a      	orrs	r2, r1
 800d2b8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	68d2      	ldr	r2, [r2, #12]
 800d2c2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	6919      	ldr	r1, [r3, #16]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	689b      	ldr	r3, [r3, #8]
 800d2ce:	041a      	lsls	r2, r3, #16
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	430a      	orrs	r2, r1
 800d2d6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f000 f886 	bl	800d3ea <RTC_ExitInitMode>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d2e2:	7bfb      	ldrb	r3, [r7, #15]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d110      	bne.n	800d30a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d2f6:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	699a      	ldr	r2, [r3, #24]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	430a      	orrs	r2, r1
 800d308:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	22ff      	movs	r2, #255	; 0xff
 800d310:	625a      	str	r2, [r3, #36]	; 0x24
 800d312:	e001      	b.n	800d318 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800d314:	2300      	movs	r3, #0
 800d316:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800d318:	7bfb      	ldrb	r3, [r7, #15]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d102      	bne.n	800d324 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2201      	movs	r2, #1
 800d322:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800d324:	7bfb      	ldrb	r3, [r7, #15]
}
 800d326:	4618      	mov	r0, r3
 800d328:	3710      	adds	r7, #16
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
	...

0800d330 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d338:	2300      	movs	r3, #0
 800d33a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a0d      	ldr	r2, [pc, #52]	; (800d378 <HAL_RTC_WaitForSynchro+0x48>)
 800d342:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d344:	f7fd fe86 	bl	800b054 <HAL_GetTick>
 800d348:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d34a:	e009      	b.n	800d360 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d34c:	f7fd fe82 	bl	800b054 <HAL_GetTick>
 800d350:	4602      	mov	r2, r0
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	1ad3      	subs	r3, r2, r3
 800d356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d35a:	d901      	bls.n	800d360 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800d35c:	2303      	movs	r3, #3
 800d35e:	e007      	b.n	800d370 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	68db      	ldr	r3, [r3, #12]
 800d366:	f003 0320 	and.w	r3, r3, #32
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d0ee      	beq.n	800d34c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800d36e:	2300      	movs	r3, #0
}
 800d370:	4618      	mov	r0, r3
 800d372:	3710      	adds	r7, #16
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}
 800d378:	0001ff5f 	.word	0x0001ff5f

0800d37c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d384:	2300      	movs	r3, #0
 800d386:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800d388:	2300      	movs	r3, #0
 800d38a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	68db      	ldr	r3, [r3, #12]
 800d392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d396:	2b00      	cmp	r3, #0
 800d398:	d122      	bne.n	800d3e0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	68da      	ldr	r2, [r3, #12]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d3a8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d3aa:	f7fd fe53 	bl	800b054 <HAL_GetTick>
 800d3ae:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800d3b0:	e00c      	b.n	800d3cc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d3b2:	f7fd fe4f 	bl	800b054 <HAL_GetTick>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	1ad3      	subs	r3, r2, r3
 800d3bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d3c0:	d904      	bls.n	800d3cc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2204      	movs	r2, #4
 800d3c6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	68db      	ldr	r3, [r3, #12]
 800d3d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d102      	bne.n	800d3e0 <RTC_EnterInitMode+0x64>
 800d3da:	7bfb      	ldrb	r3, [r7, #15]
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d1e8      	bne.n	800d3b2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800d3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3710      	adds	r7, #16
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}

0800d3ea <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d3ea:	b580      	push	{r7, lr}
 800d3ec:	b084      	sub	sp, #16
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	68da      	ldr	r2, [r3, #12]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d404:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	689b      	ldr	r3, [r3, #8]
 800d40c:	f003 0320 	and.w	r3, r3, #32
 800d410:	2b00      	cmp	r3, #0
 800d412:	d10a      	bne.n	800d42a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f7ff ff8b 	bl	800d330 <HAL_RTC_WaitForSynchro>
 800d41a:	4603      	mov	r3, r0
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d004      	beq.n	800d42a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2204      	movs	r2, #4
 800d424:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800d426:	2301      	movs	r3, #1
 800d428:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800d42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b082      	sub	sp, #8
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d101      	bne.n	800d446 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d442:	2301      	movs	r3, #1
 800d444:	e049      	b.n	800d4da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d44c:	b2db      	uxtb	r3, r3
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d106      	bne.n	800d460 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2200      	movs	r2, #0
 800d456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f7fd faa2 	bl	800a9a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2202      	movs	r2, #2
 800d464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	3304      	adds	r3, #4
 800d470:	4619      	mov	r1, r3
 800d472:	4610      	mov	r0, r2
 800d474:	f000 fab0 	bl	800d9d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2201      	movs	r2, #1
 800d47c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2201      	movs	r2, #1
 800d484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2201      	movs	r2, #1
 800d48c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2201      	movs	r2, #1
 800d494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2201      	movs	r2, #1
 800d49c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d4d8:	2300      	movs	r3, #0
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3708      	adds	r7, #8
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
	...

0800d4e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b085      	sub	sp, #20
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d001      	beq.n	800d4fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e04a      	b.n	800d592 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2202      	movs	r2, #2
 800d500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	68da      	ldr	r2, [r3, #12]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f042 0201 	orr.w	r2, r2, #1
 800d512:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4a21      	ldr	r2, [pc, #132]	; (800d5a0 <HAL_TIM_Base_Start_IT+0xbc>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d018      	beq.n	800d550 <HAL_TIM_Base_Start_IT+0x6c>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d526:	d013      	beq.n	800d550 <HAL_TIM_Base_Start_IT+0x6c>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4a1d      	ldr	r2, [pc, #116]	; (800d5a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800d52e:	4293      	cmp	r3, r2
 800d530:	d00e      	beq.n	800d550 <HAL_TIM_Base_Start_IT+0x6c>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	4a1c      	ldr	r2, [pc, #112]	; (800d5a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800d538:	4293      	cmp	r3, r2
 800d53a:	d009      	beq.n	800d550 <HAL_TIM_Base_Start_IT+0x6c>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4a1a      	ldr	r2, [pc, #104]	; (800d5ac <HAL_TIM_Base_Start_IT+0xc8>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d004      	beq.n	800d550 <HAL_TIM_Base_Start_IT+0x6c>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4a19      	ldr	r2, [pc, #100]	; (800d5b0 <HAL_TIM_Base_Start_IT+0xcc>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d115      	bne.n	800d57c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	689a      	ldr	r2, [r3, #8]
 800d556:	4b17      	ldr	r3, [pc, #92]	; (800d5b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800d558:	4013      	ands	r3, r2
 800d55a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2b06      	cmp	r3, #6
 800d560:	d015      	beq.n	800d58e <HAL_TIM_Base_Start_IT+0xaa>
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d568:	d011      	beq.n	800d58e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f042 0201 	orr.w	r2, r2, #1
 800d578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d57a:	e008      	b.n	800d58e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f042 0201 	orr.w	r2, r2, #1
 800d58a:	601a      	str	r2, [r3, #0]
 800d58c:	e000      	b.n	800d590 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d58e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d590:	2300      	movs	r3, #0
}
 800d592:	4618      	mov	r0, r3
 800d594:	3714      	adds	r7, #20
 800d596:	46bd      	mov	sp, r7
 800d598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59c:	4770      	bx	lr
 800d59e:	bf00      	nop
 800d5a0:	40012c00 	.word	0x40012c00
 800d5a4:	40000400 	.word	0x40000400
 800d5a8:	40000800 	.word	0x40000800
 800d5ac:	40013400 	.word	0x40013400
 800d5b0:	40014000 	.word	0x40014000
 800d5b4:	00010007 	.word	0x00010007

0800d5b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	691b      	ldr	r3, [r3, #16]
 800d5c6:	f003 0302 	and.w	r3, r3, #2
 800d5ca:	2b02      	cmp	r3, #2
 800d5cc:	d122      	bne.n	800d614 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	68db      	ldr	r3, [r3, #12]
 800d5d4:	f003 0302 	and.w	r3, r3, #2
 800d5d8:	2b02      	cmp	r3, #2
 800d5da:	d11b      	bne.n	800d614 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f06f 0202 	mvn.w	r2, #2
 800d5e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	699b      	ldr	r3, [r3, #24]
 800d5f2:	f003 0303 	and.w	r3, r3, #3
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d003      	beq.n	800d602 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f000 f9ce 	bl	800d99c <HAL_TIM_IC_CaptureCallback>
 800d600:	e005      	b.n	800d60e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 f9c0 	bl	800d988 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 f9d1 	bl	800d9b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2200      	movs	r2, #0
 800d612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	691b      	ldr	r3, [r3, #16]
 800d61a:	f003 0304 	and.w	r3, r3, #4
 800d61e:	2b04      	cmp	r3, #4
 800d620:	d122      	bne.n	800d668 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	f003 0304 	and.w	r3, r3, #4
 800d62c:	2b04      	cmp	r3, #4
 800d62e:	d11b      	bne.n	800d668 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f06f 0204 	mvn.w	r2, #4
 800d638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2202      	movs	r2, #2
 800d63e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	699b      	ldr	r3, [r3, #24]
 800d646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d003      	beq.n	800d656 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 f9a4 	bl	800d99c <HAL_TIM_IC_CaptureCallback>
 800d654:	e005      	b.n	800d662 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f000 f996 	bl	800d988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f000 f9a7 	bl	800d9b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2200      	movs	r2, #0
 800d666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	691b      	ldr	r3, [r3, #16]
 800d66e:	f003 0308 	and.w	r3, r3, #8
 800d672:	2b08      	cmp	r3, #8
 800d674:	d122      	bne.n	800d6bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	68db      	ldr	r3, [r3, #12]
 800d67c:	f003 0308 	and.w	r3, r3, #8
 800d680:	2b08      	cmp	r3, #8
 800d682:	d11b      	bne.n	800d6bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f06f 0208 	mvn.w	r2, #8
 800d68c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2204      	movs	r2, #4
 800d692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	69db      	ldr	r3, [r3, #28]
 800d69a:	f003 0303 	and.w	r3, r3, #3
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d003      	beq.n	800d6aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f000 f97a 	bl	800d99c <HAL_TIM_IC_CaptureCallback>
 800d6a8:	e005      	b.n	800d6b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f000 f96c 	bl	800d988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f000 f97d 	bl	800d9b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	691b      	ldr	r3, [r3, #16]
 800d6c2:	f003 0310 	and.w	r3, r3, #16
 800d6c6:	2b10      	cmp	r3, #16
 800d6c8:	d122      	bne.n	800d710 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	68db      	ldr	r3, [r3, #12]
 800d6d0:	f003 0310 	and.w	r3, r3, #16
 800d6d4:	2b10      	cmp	r3, #16
 800d6d6:	d11b      	bne.n	800d710 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f06f 0210 	mvn.w	r2, #16
 800d6e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2208      	movs	r2, #8
 800d6e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	69db      	ldr	r3, [r3, #28]
 800d6ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d003      	beq.n	800d6fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f000 f950 	bl	800d99c <HAL_TIM_IC_CaptureCallback>
 800d6fc:	e005      	b.n	800d70a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f000 f942 	bl	800d988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f000 f953 	bl	800d9b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2200      	movs	r2, #0
 800d70e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	691b      	ldr	r3, [r3, #16]
 800d716:	f003 0301 	and.w	r3, r3, #1
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d10e      	bne.n	800d73c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	68db      	ldr	r3, [r3, #12]
 800d724:	f003 0301 	and.w	r3, r3, #1
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d107      	bne.n	800d73c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f06f 0201 	mvn.w	r2, #1
 800d734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f7fc fda2 	bl	800a280 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	691b      	ldr	r3, [r3, #16]
 800d742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d746:	2b80      	cmp	r3, #128	; 0x80
 800d748:	d10e      	bne.n	800d768 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	68db      	ldr	r3, [r3, #12]
 800d750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d754:	2b80      	cmp	r3, #128	; 0x80
 800d756:	d107      	bne.n	800d768 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f000 faec 	bl	800dd40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	691b      	ldr	r3, [r3, #16]
 800d76e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d776:	d10e      	bne.n	800d796 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d782:	2b80      	cmp	r3, #128	; 0x80
 800d784:	d107      	bne.n	800d796 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d78e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f000 fadf 	bl	800dd54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	691b      	ldr	r3, [r3, #16]
 800d79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7a0:	2b40      	cmp	r3, #64	; 0x40
 800d7a2:	d10e      	bne.n	800d7c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	68db      	ldr	r3, [r3, #12]
 800d7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7ae:	2b40      	cmp	r3, #64	; 0x40
 800d7b0:	d107      	bne.n	800d7c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d7ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f000 f901 	bl	800d9c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	691b      	ldr	r3, [r3, #16]
 800d7c8:	f003 0320 	and.w	r3, r3, #32
 800d7cc:	2b20      	cmp	r3, #32
 800d7ce:	d10e      	bne.n	800d7ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	68db      	ldr	r3, [r3, #12]
 800d7d6:	f003 0320 	and.w	r3, r3, #32
 800d7da:	2b20      	cmp	r3, #32
 800d7dc:	d107      	bne.n	800d7ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f06f 0220 	mvn.w	r2, #32
 800d7e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f000 fa9f 	bl	800dd2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d7ee:	bf00      	nop
 800d7f0:	3708      	adds	r7, #8
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}

0800d7f6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d7f6:	b580      	push	{r7, lr}
 800d7f8:	b084      	sub	sp, #16
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	6078      	str	r0, [r7, #4]
 800d7fe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d800:	2300      	movs	r3, #0
 800d802:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d80a:	2b01      	cmp	r3, #1
 800d80c:	d101      	bne.n	800d812 <HAL_TIM_ConfigClockSource+0x1c>
 800d80e:	2302      	movs	r3, #2
 800d810:	e0b6      	b.n	800d980 <HAL_TIM_ConfigClockSource+0x18a>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2201      	movs	r2, #1
 800d816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2202      	movs	r2, #2
 800d81e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	689b      	ldr	r3, [r3, #8]
 800d828:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d830:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d834:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d83c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	68ba      	ldr	r2, [r7, #8]
 800d844:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d84e:	d03e      	beq.n	800d8ce <HAL_TIM_ConfigClockSource+0xd8>
 800d850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d854:	f200 8087 	bhi.w	800d966 <HAL_TIM_ConfigClockSource+0x170>
 800d858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d85c:	f000 8086 	beq.w	800d96c <HAL_TIM_ConfigClockSource+0x176>
 800d860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d864:	d87f      	bhi.n	800d966 <HAL_TIM_ConfigClockSource+0x170>
 800d866:	2b70      	cmp	r3, #112	; 0x70
 800d868:	d01a      	beq.n	800d8a0 <HAL_TIM_ConfigClockSource+0xaa>
 800d86a:	2b70      	cmp	r3, #112	; 0x70
 800d86c:	d87b      	bhi.n	800d966 <HAL_TIM_ConfigClockSource+0x170>
 800d86e:	2b60      	cmp	r3, #96	; 0x60
 800d870:	d050      	beq.n	800d914 <HAL_TIM_ConfigClockSource+0x11e>
 800d872:	2b60      	cmp	r3, #96	; 0x60
 800d874:	d877      	bhi.n	800d966 <HAL_TIM_ConfigClockSource+0x170>
 800d876:	2b50      	cmp	r3, #80	; 0x50
 800d878:	d03c      	beq.n	800d8f4 <HAL_TIM_ConfigClockSource+0xfe>
 800d87a:	2b50      	cmp	r3, #80	; 0x50
 800d87c:	d873      	bhi.n	800d966 <HAL_TIM_ConfigClockSource+0x170>
 800d87e:	2b40      	cmp	r3, #64	; 0x40
 800d880:	d058      	beq.n	800d934 <HAL_TIM_ConfigClockSource+0x13e>
 800d882:	2b40      	cmp	r3, #64	; 0x40
 800d884:	d86f      	bhi.n	800d966 <HAL_TIM_ConfigClockSource+0x170>
 800d886:	2b30      	cmp	r3, #48	; 0x30
 800d888:	d064      	beq.n	800d954 <HAL_TIM_ConfigClockSource+0x15e>
 800d88a:	2b30      	cmp	r3, #48	; 0x30
 800d88c:	d86b      	bhi.n	800d966 <HAL_TIM_ConfigClockSource+0x170>
 800d88e:	2b20      	cmp	r3, #32
 800d890:	d060      	beq.n	800d954 <HAL_TIM_ConfigClockSource+0x15e>
 800d892:	2b20      	cmp	r3, #32
 800d894:	d867      	bhi.n	800d966 <HAL_TIM_ConfigClockSource+0x170>
 800d896:	2b00      	cmp	r3, #0
 800d898:	d05c      	beq.n	800d954 <HAL_TIM_ConfigClockSource+0x15e>
 800d89a:	2b10      	cmp	r3, #16
 800d89c:	d05a      	beq.n	800d954 <HAL_TIM_ConfigClockSource+0x15e>
 800d89e:	e062      	b.n	800d966 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6818      	ldr	r0, [r3, #0]
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	6899      	ldr	r1, [r3, #8]
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	685a      	ldr	r2, [r3, #4]
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	68db      	ldr	r3, [r3, #12]
 800d8b0:	f000 f99c 	bl	800dbec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	689b      	ldr	r3, [r3, #8]
 800d8ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d8c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	68ba      	ldr	r2, [r7, #8]
 800d8ca:	609a      	str	r2, [r3, #8]
      break;
 800d8cc:	e04f      	b.n	800d96e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6818      	ldr	r0, [r3, #0]
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	6899      	ldr	r1, [r3, #8]
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	685a      	ldr	r2, [r3, #4]
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	68db      	ldr	r3, [r3, #12]
 800d8de:	f000 f985 	bl	800dbec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	689a      	ldr	r2, [r3, #8]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d8f0:	609a      	str	r2, [r3, #8]
      break;
 800d8f2:	e03c      	b.n	800d96e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6818      	ldr	r0, [r3, #0]
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	6859      	ldr	r1, [r3, #4]
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	461a      	mov	r2, r3
 800d902:	f000 f8f9 	bl	800daf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	2150      	movs	r1, #80	; 0x50
 800d90c:	4618      	mov	r0, r3
 800d90e:	f000 f952 	bl	800dbb6 <TIM_ITRx_SetConfig>
      break;
 800d912:	e02c      	b.n	800d96e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6818      	ldr	r0, [r3, #0]
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	6859      	ldr	r1, [r3, #4]
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	68db      	ldr	r3, [r3, #12]
 800d920:	461a      	mov	r2, r3
 800d922:	f000 f918 	bl	800db56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	2160      	movs	r1, #96	; 0x60
 800d92c:	4618      	mov	r0, r3
 800d92e:	f000 f942 	bl	800dbb6 <TIM_ITRx_SetConfig>
      break;
 800d932:	e01c      	b.n	800d96e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6818      	ldr	r0, [r3, #0]
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	6859      	ldr	r1, [r3, #4]
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	68db      	ldr	r3, [r3, #12]
 800d940:	461a      	mov	r2, r3
 800d942:	f000 f8d9 	bl	800daf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2140      	movs	r1, #64	; 0x40
 800d94c:	4618      	mov	r0, r3
 800d94e:	f000 f932 	bl	800dbb6 <TIM_ITRx_SetConfig>
      break;
 800d952:	e00c      	b.n	800d96e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	4619      	mov	r1, r3
 800d95e:	4610      	mov	r0, r2
 800d960:	f000 f929 	bl	800dbb6 <TIM_ITRx_SetConfig>
      break;
 800d964:	e003      	b.n	800d96e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800d966:	2301      	movs	r3, #1
 800d968:	73fb      	strb	r3, [r7, #15]
      break;
 800d96a:	e000      	b.n	800d96e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800d96c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2201      	movs	r2, #1
 800d972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2200      	movs	r2, #0
 800d97a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d980:	4618      	mov	r0, r3
 800d982:	3710      	adds	r7, #16
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}

0800d988 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d990:	bf00      	nop
 800d992:	370c      	adds	r7, #12
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr

0800d99c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b083      	sub	sp, #12
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d9a4:	bf00      	nop
 800d9a6:	370c      	adds	r7, #12
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr

0800d9b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b083      	sub	sp, #12
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d9b8:	bf00      	nop
 800d9ba:	370c      	adds	r7, #12
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr

0800d9c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b083      	sub	sp, #12
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d9cc:	bf00      	nop
 800d9ce:	370c      	adds	r7, #12
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b085      	sub	sp, #20
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	4a3c      	ldr	r2, [pc, #240]	; (800dadc <TIM_Base_SetConfig+0x104>)
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d00f      	beq.n	800da10 <TIM_Base_SetConfig+0x38>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d9f6:	d00b      	beq.n	800da10 <TIM_Base_SetConfig+0x38>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	4a39      	ldr	r2, [pc, #228]	; (800dae0 <TIM_Base_SetConfig+0x108>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d007      	beq.n	800da10 <TIM_Base_SetConfig+0x38>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	4a38      	ldr	r2, [pc, #224]	; (800dae4 <TIM_Base_SetConfig+0x10c>)
 800da04:	4293      	cmp	r3, r2
 800da06:	d003      	beq.n	800da10 <TIM_Base_SetConfig+0x38>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	4a37      	ldr	r2, [pc, #220]	; (800dae8 <TIM_Base_SetConfig+0x110>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d108      	bne.n	800da22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	685b      	ldr	r3, [r3, #4]
 800da1c:	68fa      	ldr	r2, [r7, #12]
 800da1e:	4313      	orrs	r3, r2
 800da20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	4a2d      	ldr	r2, [pc, #180]	; (800dadc <TIM_Base_SetConfig+0x104>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d01b      	beq.n	800da62 <TIM_Base_SetConfig+0x8a>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da30:	d017      	beq.n	800da62 <TIM_Base_SetConfig+0x8a>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	4a2a      	ldr	r2, [pc, #168]	; (800dae0 <TIM_Base_SetConfig+0x108>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d013      	beq.n	800da62 <TIM_Base_SetConfig+0x8a>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	4a29      	ldr	r2, [pc, #164]	; (800dae4 <TIM_Base_SetConfig+0x10c>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d00f      	beq.n	800da62 <TIM_Base_SetConfig+0x8a>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	4a28      	ldr	r2, [pc, #160]	; (800dae8 <TIM_Base_SetConfig+0x110>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d00b      	beq.n	800da62 <TIM_Base_SetConfig+0x8a>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	4a27      	ldr	r2, [pc, #156]	; (800daec <TIM_Base_SetConfig+0x114>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d007      	beq.n	800da62 <TIM_Base_SetConfig+0x8a>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	4a26      	ldr	r2, [pc, #152]	; (800daf0 <TIM_Base_SetConfig+0x118>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d003      	beq.n	800da62 <TIM_Base_SetConfig+0x8a>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	4a25      	ldr	r2, [pc, #148]	; (800daf4 <TIM_Base_SetConfig+0x11c>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d108      	bne.n	800da74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	68db      	ldr	r3, [r3, #12]
 800da6e:	68fa      	ldr	r2, [r7, #12]
 800da70:	4313      	orrs	r3, r2
 800da72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	695b      	ldr	r3, [r3, #20]
 800da7e:	4313      	orrs	r3, r2
 800da80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	68fa      	ldr	r2, [r7, #12]
 800da86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	689a      	ldr	r2, [r3, #8]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	681a      	ldr	r2, [r3, #0]
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	4a10      	ldr	r2, [pc, #64]	; (800dadc <TIM_Base_SetConfig+0x104>)
 800da9c:	4293      	cmp	r3, r2
 800da9e:	d00f      	beq.n	800dac0 <TIM_Base_SetConfig+0xe8>
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	4a11      	ldr	r2, [pc, #68]	; (800dae8 <TIM_Base_SetConfig+0x110>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d00b      	beq.n	800dac0 <TIM_Base_SetConfig+0xe8>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	4a10      	ldr	r2, [pc, #64]	; (800daec <TIM_Base_SetConfig+0x114>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d007      	beq.n	800dac0 <TIM_Base_SetConfig+0xe8>
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	4a0f      	ldr	r2, [pc, #60]	; (800daf0 <TIM_Base_SetConfig+0x118>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d003      	beq.n	800dac0 <TIM_Base_SetConfig+0xe8>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	4a0e      	ldr	r2, [pc, #56]	; (800daf4 <TIM_Base_SetConfig+0x11c>)
 800dabc:	4293      	cmp	r3, r2
 800dabe:	d103      	bne.n	800dac8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	691a      	ldr	r2, [r3, #16]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2201      	movs	r2, #1
 800dacc:	615a      	str	r2, [r3, #20]
}
 800dace:	bf00      	nop
 800dad0:	3714      	adds	r7, #20
 800dad2:	46bd      	mov	sp, r7
 800dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad8:	4770      	bx	lr
 800dada:	bf00      	nop
 800dadc:	40012c00 	.word	0x40012c00
 800dae0:	40000400 	.word	0x40000400
 800dae4:	40000800 	.word	0x40000800
 800dae8:	40013400 	.word	0x40013400
 800daec:	40014000 	.word	0x40014000
 800daf0:	40014400 	.word	0x40014400
 800daf4:	40014800 	.word	0x40014800

0800daf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b087      	sub	sp, #28
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	60f8      	str	r0, [r7, #12]
 800db00:	60b9      	str	r1, [r7, #8]
 800db02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	6a1b      	ldr	r3, [r3, #32]
 800db08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	6a1b      	ldr	r3, [r3, #32]
 800db0e:	f023 0201 	bic.w	r2, r3, #1
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	699b      	ldr	r3, [r3, #24]
 800db1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800db22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	011b      	lsls	r3, r3, #4
 800db28:	693a      	ldr	r2, [r7, #16]
 800db2a:	4313      	orrs	r3, r2
 800db2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	f023 030a 	bic.w	r3, r3, #10
 800db34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800db36:	697a      	ldr	r2, [r7, #20]
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	4313      	orrs	r3, r2
 800db3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	693a      	ldr	r2, [r7, #16]
 800db42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	697a      	ldr	r2, [r7, #20]
 800db48:	621a      	str	r2, [r3, #32]
}
 800db4a:	bf00      	nop
 800db4c:	371c      	adds	r7, #28
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr

0800db56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800db56:	b480      	push	{r7}
 800db58:	b087      	sub	sp, #28
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	60f8      	str	r0, [r7, #12]
 800db5e:	60b9      	str	r1, [r7, #8]
 800db60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	6a1b      	ldr	r3, [r3, #32]
 800db66:	f023 0210 	bic.w	r2, r3, #16
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	699b      	ldr	r3, [r3, #24]
 800db72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	6a1b      	ldr	r3, [r3, #32]
 800db78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800db80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	031b      	lsls	r3, r3, #12
 800db86:	697a      	ldr	r2, [r7, #20]
 800db88:	4313      	orrs	r3, r2
 800db8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800db92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	011b      	lsls	r3, r3, #4
 800db98:	693a      	ldr	r2, [r7, #16]
 800db9a:	4313      	orrs	r3, r2
 800db9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	697a      	ldr	r2, [r7, #20]
 800dba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	693a      	ldr	r2, [r7, #16]
 800dba8:	621a      	str	r2, [r3, #32]
}
 800dbaa:	bf00      	nop
 800dbac:	371c      	adds	r7, #28
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb4:	4770      	bx	lr

0800dbb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dbb6:	b480      	push	{r7}
 800dbb8:	b085      	sub	sp, #20
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
 800dbbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dbce:	683a      	ldr	r2, [r7, #0]
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	4313      	orrs	r3, r2
 800dbd4:	f043 0307 	orr.w	r3, r3, #7
 800dbd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	68fa      	ldr	r2, [r7, #12]
 800dbde:	609a      	str	r2, [r3, #8]
}
 800dbe0:	bf00      	nop
 800dbe2:	3714      	adds	r7, #20
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr

0800dbec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b087      	sub	sp, #28
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	60f8      	str	r0, [r7, #12]
 800dbf4:	60b9      	str	r1, [r7, #8]
 800dbf6:	607a      	str	r2, [r7, #4]
 800dbf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	689b      	ldr	r3, [r3, #8]
 800dbfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dc06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	021a      	lsls	r2, r3, #8
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	431a      	orrs	r2, r3
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	4313      	orrs	r3, r2
 800dc14:	697a      	ldr	r2, [r7, #20]
 800dc16:	4313      	orrs	r3, r2
 800dc18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	697a      	ldr	r2, [r7, #20]
 800dc1e:	609a      	str	r2, [r3, #8]
}
 800dc20:	bf00      	nop
 800dc22:	371c      	adds	r7, #28
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr

0800dc2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b085      	sub	sp, #20
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d101      	bne.n	800dc44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dc40:	2302      	movs	r3, #2
 800dc42:	e063      	b.n	800dd0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2201      	movs	r2, #1
 800dc48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2202      	movs	r2, #2
 800dc50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	689b      	ldr	r3, [r3, #8]
 800dc62:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	4a2b      	ldr	r2, [pc, #172]	; (800dd18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	d004      	beq.n	800dc78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	4a2a      	ldr	r2, [pc, #168]	; (800dd1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d108      	bne.n	800dc8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dc7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	68fa      	ldr	r2, [r7, #12]
 800dc86:	4313      	orrs	r3, r2
 800dc88:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	68fa      	ldr	r2, [r7, #12]
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	68fa      	ldr	r2, [r7, #12]
 800dca2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4a1b      	ldr	r2, [pc, #108]	; (800dd18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d018      	beq.n	800dce0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcb6:	d013      	beq.n	800dce0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	4a18      	ldr	r2, [pc, #96]	; (800dd20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d00e      	beq.n	800dce0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	4a17      	ldr	r2, [pc, #92]	; (800dd24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d009      	beq.n	800dce0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4a12      	ldr	r2, [pc, #72]	; (800dd1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d004      	beq.n	800dce0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	4a13      	ldr	r2, [pc, #76]	; (800dd28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d10c      	bne.n	800dcfa <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dce6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	689b      	ldr	r3, [r3, #8]
 800dcec:	68ba      	ldr	r2, [r7, #8]
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	68ba      	ldr	r2, [r7, #8]
 800dcf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2201      	movs	r2, #1
 800dcfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2200      	movs	r2, #0
 800dd06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd0a:	2300      	movs	r3, #0
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3714      	adds	r7, #20
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr
 800dd18:	40012c00 	.word	0x40012c00
 800dd1c:	40013400 	.word	0x40013400
 800dd20:	40000400 	.word	0x40000400
 800dd24:	40000800 	.word	0x40000800
 800dd28:	40014000 	.word	0x40014000

0800dd2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	b083      	sub	sp, #12
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dd34:	bf00      	nop
 800dd36:	370c      	adds	r7, #12
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr

0800dd40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b083      	sub	sp, #12
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dd48:	bf00      	nop
 800dd4a:	370c      	adds	r7, #12
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd52:	4770      	bx	lr

0800dd54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dd54:	b480      	push	{r7}
 800dd56:	b083      	sub	sp, #12
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dd5c:	bf00      	nop
 800dd5e:	370c      	adds	r7, #12
 800dd60:	46bd      	mov	sp, r7
 800dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd66:	4770      	bx	lr

0800dd68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d101      	bne.n	800dd7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dd76:	2301      	movs	r3, #1
 800dd78:	e040      	b.n	800ddfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d106      	bne.n	800dd90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2200      	movs	r2, #0
 800dd86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f7fc fe2e 	bl	800a9ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2224      	movs	r2, #36	; 0x24
 800dd94:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f022 0201 	bic.w	r2, r2, #1
 800dda4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f000 fc00 	bl	800e5ac <UART_SetConfig>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b01      	cmp	r3, #1
 800ddb0:	d101      	bne.n	800ddb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	e022      	b.n	800ddfc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d002      	beq.n	800ddc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f000 fdc6 	bl	800e950 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	685a      	ldr	r2, [r3, #4]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ddd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	689a      	ldr	r2, [r3, #8]
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dde2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	681a      	ldr	r2, [r3, #0]
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f042 0201 	orr.w	r2, r2, #1
 800ddf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f000 fe4d 	bl	800ea94 <UART_CheckIdleState>
 800ddfa:	4603      	mov	r3, r0
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3708      	adds	r7, #8
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b08a      	sub	sp, #40	; 0x28
 800de08:	af02      	add	r7, sp, #8
 800de0a:	60f8      	str	r0, [r7, #12]
 800de0c:	60b9      	str	r1, [r7, #8]
 800de0e:	603b      	str	r3, [r7, #0]
 800de10:	4613      	mov	r3, r2
 800de12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de18:	2b20      	cmp	r3, #32
 800de1a:	d178      	bne.n	800df0e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d002      	beq.n	800de28 <HAL_UART_Transmit+0x24>
 800de22:	88fb      	ldrh	r3, [r7, #6]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d101      	bne.n	800de2c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800de28:	2301      	movs	r3, #1
 800de2a:	e071      	b.n	800df10 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2200      	movs	r2, #0
 800de30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2221      	movs	r2, #33	; 0x21
 800de38:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800de3a:	f7fd f90b 	bl	800b054 <HAL_GetTick>
 800de3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	88fa      	ldrh	r2, [r7, #6]
 800de44:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	88fa      	ldrh	r2, [r7, #6]
 800de4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	689b      	ldr	r3, [r3, #8]
 800de54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de58:	d108      	bne.n	800de6c <HAL_UART_Transmit+0x68>
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	691b      	ldr	r3, [r3, #16]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d104      	bne.n	800de6c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800de62:	2300      	movs	r3, #0
 800de64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	61bb      	str	r3, [r7, #24]
 800de6a:	e003      	b.n	800de74 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800de70:	2300      	movs	r3, #0
 800de72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800de74:	e030      	b.n	800ded8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	9300      	str	r3, [sp, #0]
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	2200      	movs	r2, #0
 800de7e:	2180      	movs	r1, #128	; 0x80
 800de80:	68f8      	ldr	r0, [r7, #12]
 800de82:	f000 feaf 	bl	800ebe4 <UART_WaitOnFlagUntilTimeout>
 800de86:	4603      	mov	r3, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d004      	beq.n	800de96 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	2220      	movs	r2, #32
 800de90:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800de92:	2303      	movs	r3, #3
 800de94:	e03c      	b.n	800df10 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800de96:	69fb      	ldr	r3, [r7, #28]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d10b      	bne.n	800deb4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	881a      	ldrh	r2, [r3, #0]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dea8:	b292      	uxth	r2, r2
 800deaa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800deac:	69bb      	ldr	r3, [r7, #24]
 800deae:	3302      	adds	r3, #2
 800deb0:	61bb      	str	r3, [r7, #24]
 800deb2:	e008      	b.n	800dec6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800deb4:	69fb      	ldr	r3, [r7, #28]
 800deb6:	781a      	ldrb	r2, [r3, #0]
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	b292      	uxth	r2, r2
 800debe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dec0:	69fb      	ldr	r3, [r7, #28]
 800dec2:	3301      	adds	r3, #1
 800dec4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800decc:	b29b      	uxth	r3, r3
 800dece:	3b01      	subs	r3, #1
 800ded0:	b29a      	uxth	r2, r3
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800dede:	b29b      	uxth	r3, r3
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d1c8      	bne.n	800de76 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	9300      	str	r3, [sp, #0]
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	2200      	movs	r2, #0
 800deec:	2140      	movs	r1, #64	; 0x40
 800deee:	68f8      	ldr	r0, [r7, #12]
 800def0:	f000 fe78 	bl	800ebe4 <UART_WaitOnFlagUntilTimeout>
 800def4:	4603      	mov	r3, r0
 800def6:	2b00      	cmp	r3, #0
 800def8:	d004      	beq.n	800df04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2220      	movs	r2, #32
 800defe:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800df00:	2303      	movs	r3, #3
 800df02:	e005      	b.n	800df10 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2220      	movs	r2, #32
 800df08:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800df0a:	2300      	movs	r3, #0
 800df0c:	e000      	b.n	800df10 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800df0e:	2302      	movs	r3, #2
  }
}
 800df10:	4618      	mov	r0, r3
 800df12:	3720      	adds	r7, #32
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b08a      	sub	sp, #40	; 0x28
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	4613      	mov	r3, r2
 800df24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df2c:	2b20      	cmp	r3, #32
 800df2e:	d132      	bne.n	800df96 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d002      	beq.n	800df3c <HAL_UART_Receive_IT+0x24>
 800df36:	88fb      	ldrh	r3, [r7, #6]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d101      	bne.n	800df40 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800df3c:	2301      	movs	r3, #1
 800df3e:	e02b      	b.n	800df98 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2200      	movs	r2, #0
 800df44:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df50:	2b00      	cmp	r3, #0
 800df52:	d018      	beq.n	800df86 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	e853 3f00 	ldrex	r3, [r3]
 800df60:	613b      	str	r3, [r7, #16]
   return(result);
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800df68:	627b      	str	r3, [r7, #36]	; 0x24
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	461a      	mov	r2, r3
 800df70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df72:	623b      	str	r3, [r7, #32]
 800df74:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df76:	69f9      	ldr	r1, [r7, #28]
 800df78:	6a3a      	ldr	r2, [r7, #32]
 800df7a:	e841 2300 	strex	r3, r2, [r1]
 800df7e:	61bb      	str	r3, [r7, #24]
   return(result);
 800df80:	69bb      	ldr	r3, [r7, #24]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d1e6      	bne.n	800df54 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800df86:	88fb      	ldrh	r3, [r7, #6]
 800df88:	461a      	mov	r2, r3
 800df8a:	68b9      	ldr	r1, [r7, #8]
 800df8c:	68f8      	ldr	r0, [r7, #12]
 800df8e:	f000 fe91 	bl	800ecb4 <UART_Start_Receive_IT>
 800df92:	4603      	mov	r3, r0
 800df94:	e000      	b.n	800df98 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800df96:	2302      	movs	r3, #2
  }
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3728      	adds	r7, #40	; 0x28
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b0ba      	sub	sp, #232	; 0xe8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	69db      	ldr	r3, [r3, #28]
 800dfae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	689b      	ldr	r3, [r3, #8]
 800dfc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dfc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800dfca:	f640 030f 	movw	r3, #2063	; 0x80f
 800dfce:	4013      	ands	r3, r2
 800dfd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800dfd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d115      	bne.n	800e008 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800dfdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfe0:	f003 0320 	and.w	r3, r3, #32
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d00f      	beq.n	800e008 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800dfe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfec:	f003 0320 	and.w	r3, r3, #32
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d009      	beq.n	800e008 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	f000 82ab 	beq.w	800e554 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	4798      	blx	r3
      }
      return;
 800e006:	e2a5      	b.n	800e554 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e008:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f000 8117 	beq.w	800e240 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e016:	f003 0301 	and.w	r3, r3, #1
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d106      	bne.n	800e02c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e01e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e022:	4b85      	ldr	r3, [pc, #532]	; (800e238 <HAL_UART_IRQHandler+0x298>)
 800e024:	4013      	ands	r3, r2
 800e026:	2b00      	cmp	r3, #0
 800e028:	f000 810a 	beq.w	800e240 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e02c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e030:	f003 0301 	and.w	r3, r3, #1
 800e034:	2b00      	cmp	r3, #0
 800e036:	d011      	beq.n	800e05c <HAL_UART_IRQHandler+0xbc>
 800e038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e03c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e040:	2b00      	cmp	r3, #0
 800e042:	d00b      	beq.n	800e05c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	2201      	movs	r2, #1
 800e04a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e052:	f043 0201 	orr.w	r2, r3, #1
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e05c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e060:	f003 0302 	and.w	r3, r3, #2
 800e064:	2b00      	cmp	r3, #0
 800e066:	d011      	beq.n	800e08c <HAL_UART_IRQHandler+0xec>
 800e068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e06c:	f003 0301 	and.w	r3, r3, #1
 800e070:	2b00      	cmp	r3, #0
 800e072:	d00b      	beq.n	800e08c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	2202      	movs	r2, #2
 800e07a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e082:	f043 0204 	orr.w	r2, r3, #4
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e08c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e090:	f003 0304 	and.w	r3, r3, #4
 800e094:	2b00      	cmp	r3, #0
 800e096:	d011      	beq.n	800e0bc <HAL_UART_IRQHandler+0x11c>
 800e098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e09c:	f003 0301 	and.w	r3, r3, #1
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d00b      	beq.n	800e0bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	2204      	movs	r2, #4
 800e0aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0b2:	f043 0202 	orr.w	r2, r3, #2
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e0bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0c0:	f003 0308 	and.w	r3, r3, #8
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d017      	beq.n	800e0f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e0c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0cc:	f003 0320 	and.w	r3, r3, #32
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d105      	bne.n	800e0e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e0d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00b      	beq.n	800e0f8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	2208      	movs	r2, #8
 800e0e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0ee:	f043 0208 	orr.w	r2, r3, #8
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e0f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e100:	2b00      	cmp	r3, #0
 800e102:	d012      	beq.n	800e12a <HAL_UART_IRQHandler+0x18a>
 800e104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e108:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00c      	beq.n	800e12a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e118:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e120:	f043 0220 	orr.w	r2, r3, #32
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e130:	2b00      	cmp	r3, #0
 800e132:	f000 8211 	beq.w	800e558 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e13a:	f003 0320 	and.w	r3, r3, #32
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d00d      	beq.n	800e15e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e146:	f003 0320 	and.w	r3, r3, #32
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d007      	beq.n	800e15e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e152:	2b00      	cmp	r3, #0
 800e154:	d003      	beq.n	800e15e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e164:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	689b      	ldr	r3, [r3, #8]
 800e16e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e172:	2b40      	cmp	r3, #64	; 0x40
 800e174:	d005      	beq.n	800e182 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e176:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e17a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d04f      	beq.n	800e222 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f000 fe4a 	bl	800ee1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	689b      	ldr	r3, [r3, #8]
 800e18e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e192:	2b40      	cmp	r3, #64	; 0x40
 800e194:	d141      	bne.n	800e21a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	3308      	adds	r3, #8
 800e19c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e1a4:	e853 3f00 	ldrex	r3, [r3]
 800e1a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e1ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e1b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e1b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	3308      	adds	r3, #8
 800e1be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e1c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e1c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e1ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e1d2:	e841 2300 	strex	r3, r2, [r1]
 800e1d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e1da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d1d9      	bne.n	800e196 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d013      	beq.n	800e212 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1ee:	4a13      	ldr	r2, [pc, #76]	; (800e23c <HAL_UART_IRQHandler+0x29c>)
 800e1f0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7fd f882 	bl	800b300 <HAL_DMA_Abort_IT>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d017      	beq.n	800e232 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e208:	687a      	ldr	r2, [r7, #4]
 800e20a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800e20c:	4610      	mov	r0, r2
 800e20e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e210:	e00f      	b.n	800e232 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f000 f9b4 	bl	800e580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e218:	e00b      	b.n	800e232 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f000 f9b0 	bl	800e580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e220:	e007      	b.n	800e232 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 f9ac 	bl	800e580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2200      	movs	r2, #0
 800e22c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800e230:	e192      	b.n	800e558 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e232:	bf00      	nop
    return;
 800e234:	e190      	b.n	800e558 <HAL_UART_IRQHandler+0x5b8>
 800e236:	bf00      	nop
 800e238:	04000120 	.word	0x04000120
 800e23c:	0800eee5 	.word	0x0800eee5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e244:	2b01      	cmp	r3, #1
 800e246:	f040 814b 	bne.w	800e4e0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e24a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e24e:	f003 0310 	and.w	r3, r3, #16
 800e252:	2b00      	cmp	r3, #0
 800e254:	f000 8144 	beq.w	800e4e0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e25c:	f003 0310 	and.w	r3, r3, #16
 800e260:	2b00      	cmp	r3, #0
 800e262:	f000 813d 	beq.w	800e4e0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2210      	movs	r2, #16
 800e26c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	689b      	ldr	r3, [r3, #8]
 800e274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e278:	2b40      	cmp	r3, #64	; 0x40
 800e27a:	f040 80b5 	bne.w	800e3e8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e28a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e28e:	2b00      	cmp	r3, #0
 800e290:	f000 8164 	beq.w	800e55c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e29a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	f080 815c 	bcs.w	800e55c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e2aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2b2:	699b      	ldr	r3, [r3, #24]
 800e2b4:	2b20      	cmp	r3, #32
 800e2b6:	f000 8086 	beq.w	800e3c6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e2c6:	e853 3f00 	ldrex	r3, [r3]
 800e2ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e2ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e2d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e2d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	461a      	mov	r2, r3
 800e2e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e2e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e2e8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e2f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e2f4:	e841 2300 	strex	r3, r2, [r1]
 800e2f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e2fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e300:	2b00      	cmp	r3, #0
 800e302:	d1da      	bne.n	800e2ba <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	3308      	adds	r3, #8
 800e30a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e30c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e30e:	e853 3f00 	ldrex	r3, [r3]
 800e312:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e314:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e316:	f023 0301 	bic.w	r3, r3, #1
 800e31a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	3308      	adds	r3, #8
 800e324:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e328:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e32c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e32e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e330:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e334:	e841 2300 	strex	r3, r2, [r1]
 800e338:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e33a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d1e1      	bne.n	800e304 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	3308      	adds	r3, #8
 800e346:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e348:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e34a:	e853 3f00 	ldrex	r3, [r3]
 800e34e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e356:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	3308      	adds	r3, #8
 800e360:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e364:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e366:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e368:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e36a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e36c:	e841 2300 	strex	r3, r2, [r1]
 800e370:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e372:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e374:	2b00      	cmp	r3, #0
 800e376:	d1e3      	bne.n	800e340 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2220      	movs	r2, #32
 800e37c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2200      	movs	r2, #0
 800e384:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e38c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e38e:	e853 3f00 	ldrex	r3, [r3]
 800e392:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e396:	f023 0310 	bic.w	r3, r3, #16
 800e39a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	461a      	mov	r2, r3
 800e3a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e3a8:	65bb      	str	r3, [r7, #88]	; 0x58
 800e3aa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e3ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e3b0:	e841 2300 	strex	r3, r2, [r1]
 800e3b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e3b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d1e4      	bne.n	800e386 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7fc ff64 	bl	800b28e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2202      	movs	r2, #2
 800e3ca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	1ad3      	subs	r3, r2, r3
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	4619      	mov	r1, r3
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f000 f8d7 	bl	800e594 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e3e6:	e0b9      	b.n	800e55c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	1ad3      	subs	r3, r2, r3
 800e3f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e402:	b29b      	uxth	r3, r3
 800e404:	2b00      	cmp	r3, #0
 800e406:	f000 80ab 	beq.w	800e560 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800e40a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e40e:	2b00      	cmp	r3, #0
 800e410:	f000 80a6 	beq.w	800e560 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41c:	e853 3f00 	ldrex	r3, [r3]
 800e420:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e424:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e428:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	461a      	mov	r2, r3
 800e432:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e436:	647b      	str	r3, [r7, #68]	; 0x44
 800e438:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e43a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e43c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e43e:	e841 2300 	strex	r3, r2, [r1]
 800e442:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e446:	2b00      	cmp	r3, #0
 800e448:	d1e4      	bne.n	800e414 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	3308      	adds	r3, #8
 800e450:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e454:	e853 3f00 	ldrex	r3, [r3]
 800e458:	623b      	str	r3, [r7, #32]
   return(result);
 800e45a:	6a3b      	ldr	r3, [r7, #32]
 800e45c:	f023 0301 	bic.w	r3, r3, #1
 800e460:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	3308      	adds	r3, #8
 800e46a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e46e:	633a      	str	r2, [r7, #48]	; 0x30
 800e470:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e472:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e476:	e841 2300 	strex	r3, r2, [r1]
 800e47a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d1e3      	bne.n	800e44a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2220      	movs	r2, #32
 800e486:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	2200      	movs	r2, #0
 800e48e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2200      	movs	r2, #0
 800e494:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	e853 3f00 	ldrex	r3, [r3]
 800e4a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	f023 0310 	bic.w	r3, r3, #16
 800e4aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e4b8:	61fb      	str	r3, [r7, #28]
 800e4ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4bc:	69b9      	ldr	r1, [r7, #24]
 800e4be:	69fa      	ldr	r2, [r7, #28]
 800e4c0:	e841 2300 	strex	r3, r2, [r1]
 800e4c4:	617b      	str	r3, [r7, #20]
   return(result);
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d1e4      	bne.n	800e496 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2202      	movs	r2, #2
 800e4d0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e4d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f000 f85b 	bl	800e594 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e4de:	e03f      	b.n	800e560 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e4e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d00e      	beq.n	800e50a <HAL_UART_IRQHandler+0x56a>
 800e4ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e4f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d008      	beq.n	800e50a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e500:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f000 fed6 	bl	800f2b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e508:	e02d      	b.n	800e566 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e50a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e50e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e512:	2b00      	cmp	r3, #0
 800e514:	d00e      	beq.n	800e534 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e51a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d008      	beq.n	800e534 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e526:	2b00      	cmp	r3, #0
 800e528:	d01c      	beq.n	800e564 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	4798      	blx	r3
    }
    return;
 800e532:	e017      	b.n	800e564 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d012      	beq.n	800e566 <HAL_UART_IRQHandler+0x5c6>
 800e540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d00c      	beq.n	800e566 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f000 fcdf 	bl	800ef10 <UART_EndTransmit_IT>
    return;
 800e552:	e008      	b.n	800e566 <HAL_UART_IRQHandler+0x5c6>
      return;
 800e554:	bf00      	nop
 800e556:	e006      	b.n	800e566 <HAL_UART_IRQHandler+0x5c6>
    return;
 800e558:	bf00      	nop
 800e55a:	e004      	b.n	800e566 <HAL_UART_IRQHandler+0x5c6>
      return;
 800e55c:	bf00      	nop
 800e55e:	e002      	b.n	800e566 <HAL_UART_IRQHandler+0x5c6>
      return;
 800e560:	bf00      	nop
 800e562:	e000      	b.n	800e566 <HAL_UART_IRQHandler+0x5c6>
    return;
 800e564:	bf00      	nop
  }

}
 800e566:	37e8      	adds	r7, #232	; 0xe8
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b083      	sub	sp, #12
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e574:	bf00      	nop
 800e576:	370c      	adds	r7, #12
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr

0800e580 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e580:	b480      	push	{r7}
 800e582:	b083      	sub	sp, #12
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e588:	bf00      	nop
 800e58a:	370c      	adds	r7, #12
 800e58c:	46bd      	mov	sp, r7
 800e58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e592:	4770      	bx	lr

0800e594 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e594:	b480      	push	{r7}
 800e596:	b083      	sub	sp, #12
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	460b      	mov	r3, r1
 800e59e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e5a0:	bf00      	nop
 800e5a2:	370c      	adds	r7, #12
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr

0800e5ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b088      	sub	sp, #32
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	689a      	ldr	r2, [r3, #8]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	691b      	ldr	r3, [r3, #16]
 800e5c0:	431a      	orrs	r2, r3
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	695b      	ldr	r3, [r3, #20]
 800e5c6:	431a      	orrs	r2, r3
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	69db      	ldr	r3, [r3, #28]
 800e5cc:	4313      	orrs	r3, r2
 800e5ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800e5da:	f023 030c 	bic.w	r3, r3, #12
 800e5de:	687a      	ldr	r2, [r7, #4]
 800e5e0:	6812      	ldr	r2, [r2, #0]
 800e5e2:	6979      	ldr	r1, [r7, #20]
 800e5e4:	430b      	orrs	r3, r1
 800e5e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	685b      	ldr	r3, [r3, #4]
 800e5ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	68da      	ldr	r2, [r3, #12]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	430a      	orrs	r2, r1
 800e5fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	699b      	ldr	r3, [r3, #24]
 800e602:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6a1b      	ldr	r3, [r3, #32]
 800e608:	697a      	ldr	r2, [r7, #20]
 800e60a:	4313      	orrs	r3, r2
 800e60c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	689b      	ldr	r3, [r3, #8]
 800e614:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	697a      	ldr	r2, [r7, #20]
 800e61e:	430a      	orrs	r2, r1
 800e620:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	4aad      	ldr	r2, [pc, #692]	; (800e8dc <UART_SetConfig+0x330>)
 800e628:	4293      	cmp	r3, r2
 800e62a:	d120      	bne.n	800e66e <UART_SetConfig+0xc2>
 800e62c:	4bac      	ldr	r3, [pc, #688]	; (800e8e0 <UART_SetConfig+0x334>)
 800e62e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e630:	f003 0303 	and.w	r3, r3, #3
 800e634:	2b03      	cmp	r3, #3
 800e636:	d817      	bhi.n	800e668 <UART_SetConfig+0xbc>
 800e638:	a201      	add	r2, pc, #4	; (adr r2, 800e640 <UART_SetConfig+0x94>)
 800e63a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e63e:	bf00      	nop
 800e640:	0800e651 	.word	0x0800e651
 800e644:	0800e65d 	.word	0x0800e65d
 800e648:	0800e663 	.word	0x0800e663
 800e64c:	0800e657 	.word	0x0800e657
 800e650:	2301      	movs	r3, #1
 800e652:	77fb      	strb	r3, [r7, #31]
 800e654:	e0b5      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e656:	2302      	movs	r3, #2
 800e658:	77fb      	strb	r3, [r7, #31]
 800e65a:	e0b2      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e65c:	2304      	movs	r3, #4
 800e65e:	77fb      	strb	r3, [r7, #31]
 800e660:	e0af      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e662:	2308      	movs	r3, #8
 800e664:	77fb      	strb	r3, [r7, #31]
 800e666:	e0ac      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e668:	2310      	movs	r3, #16
 800e66a:	77fb      	strb	r3, [r7, #31]
 800e66c:	e0a9      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	4a9c      	ldr	r2, [pc, #624]	; (800e8e4 <UART_SetConfig+0x338>)
 800e674:	4293      	cmp	r3, r2
 800e676:	d124      	bne.n	800e6c2 <UART_SetConfig+0x116>
 800e678:	4b99      	ldr	r3, [pc, #612]	; (800e8e0 <UART_SetConfig+0x334>)
 800e67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e67c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e680:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e684:	d011      	beq.n	800e6aa <UART_SetConfig+0xfe>
 800e686:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e68a:	d817      	bhi.n	800e6bc <UART_SetConfig+0x110>
 800e68c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e690:	d011      	beq.n	800e6b6 <UART_SetConfig+0x10a>
 800e692:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e696:	d811      	bhi.n	800e6bc <UART_SetConfig+0x110>
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d003      	beq.n	800e6a4 <UART_SetConfig+0xf8>
 800e69c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6a0:	d006      	beq.n	800e6b0 <UART_SetConfig+0x104>
 800e6a2:	e00b      	b.n	800e6bc <UART_SetConfig+0x110>
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	77fb      	strb	r3, [r7, #31]
 800e6a8:	e08b      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e6aa:	2302      	movs	r3, #2
 800e6ac:	77fb      	strb	r3, [r7, #31]
 800e6ae:	e088      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e6b0:	2304      	movs	r3, #4
 800e6b2:	77fb      	strb	r3, [r7, #31]
 800e6b4:	e085      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e6b6:	2308      	movs	r3, #8
 800e6b8:	77fb      	strb	r3, [r7, #31]
 800e6ba:	e082      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e6bc:	2310      	movs	r3, #16
 800e6be:	77fb      	strb	r3, [r7, #31]
 800e6c0:	e07f      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4a88      	ldr	r2, [pc, #544]	; (800e8e8 <UART_SetConfig+0x33c>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d124      	bne.n	800e716 <UART_SetConfig+0x16a>
 800e6cc:	4b84      	ldr	r3, [pc, #528]	; (800e8e0 <UART_SetConfig+0x334>)
 800e6ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800e6d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800e6d8:	d011      	beq.n	800e6fe <UART_SetConfig+0x152>
 800e6da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800e6de:	d817      	bhi.n	800e710 <UART_SetConfig+0x164>
 800e6e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e6e4:	d011      	beq.n	800e70a <UART_SetConfig+0x15e>
 800e6e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e6ea:	d811      	bhi.n	800e710 <UART_SetConfig+0x164>
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d003      	beq.n	800e6f8 <UART_SetConfig+0x14c>
 800e6f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e6f4:	d006      	beq.n	800e704 <UART_SetConfig+0x158>
 800e6f6:	e00b      	b.n	800e710 <UART_SetConfig+0x164>
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	77fb      	strb	r3, [r7, #31]
 800e6fc:	e061      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e6fe:	2302      	movs	r3, #2
 800e700:	77fb      	strb	r3, [r7, #31]
 800e702:	e05e      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e704:	2304      	movs	r3, #4
 800e706:	77fb      	strb	r3, [r7, #31]
 800e708:	e05b      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e70a:	2308      	movs	r3, #8
 800e70c:	77fb      	strb	r3, [r7, #31]
 800e70e:	e058      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e710:	2310      	movs	r3, #16
 800e712:	77fb      	strb	r3, [r7, #31]
 800e714:	e055      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	4a74      	ldr	r2, [pc, #464]	; (800e8ec <UART_SetConfig+0x340>)
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d124      	bne.n	800e76a <UART_SetConfig+0x1be>
 800e720:	4b6f      	ldr	r3, [pc, #444]	; (800e8e0 <UART_SetConfig+0x334>)
 800e722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e724:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800e728:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e72c:	d011      	beq.n	800e752 <UART_SetConfig+0x1a6>
 800e72e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e732:	d817      	bhi.n	800e764 <UART_SetConfig+0x1b8>
 800e734:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e738:	d011      	beq.n	800e75e <UART_SetConfig+0x1b2>
 800e73a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e73e:	d811      	bhi.n	800e764 <UART_SetConfig+0x1b8>
 800e740:	2b00      	cmp	r3, #0
 800e742:	d003      	beq.n	800e74c <UART_SetConfig+0x1a0>
 800e744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e748:	d006      	beq.n	800e758 <UART_SetConfig+0x1ac>
 800e74a:	e00b      	b.n	800e764 <UART_SetConfig+0x1b8>
 800e74c:	2300      	movs	r3, #0
 800e74e:	77fb      	strb	r3, [r7, #31]
 800e750:	e037      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e752:	2302      	movs	r3, #2
 800e754:	77fb      	strb	r3, [r7, #31]
 800e756:	e034      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e758:	2304      	movs	r3, #4
 800e75a:	77fb      	strb	r3, [r7, #31]
 800e75c:	e031      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e75e:	2308      	movs	r3, #8
 800e760:	77fb      	strb	r3, [r7, #31]
 800e762:	e02e      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e764:	2310      	movs	r3, #16
 800e766:	77fb      	strb	r3, [r7, #31]
 800e768:	e02b      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	4a60      	ldr	r2, [pc, #384]	; (800e8f0 <UART_SetConfig+0x344>)
 800e770:	4293      	cmp	r3, r2
 800e772:	d124      	bne.n	800e7be <UART_SetConfig+0x212>
 800e774:	4b5a      	ldr	r3, [pc, #360]	; (800e8e0 <UART_SetConfig+0x334>)
 800e776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e778:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800e77c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800e780:	d011      	beq.n	800e7a6 <UART_SetConfig+0x1fa>
 800e782:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800e786:	d817      	bhi.n	800e7b8 <UART_SetConfig+0x20c>
 800e788:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e78c:	d011      	beq.n	800e7b2 <UART_SetConfig+0x206>
 800e78e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e792:	d811      	bhi.n	800e7b8 <UART_SetConfig+0x20c>
 800e794:	2b00      	cmp	r3, #0
 800e796:	d003      	beq.n	800e7a0 <UART_SetConfig+0x1f4>
 800e798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e79c:	d006      	beq.n	800e7ac <UART_SetConfig+0x200>
 800e79e:	e00b      	b.n	800e7b8 <UART_SetConfig+0x20c>
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	77fb      	strb	r3, [r7, #31]
 800e7a4:	e00d      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e7a6:	2302      	movs	r3, #2
 800e7a8:	77fb      	strb	r3, [r7, #31]
 800e7aa:	e00a      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e7ac:	2304      	movs	r3, #4
 800e7ae:	77fb      	strb	r3, [r7, #31]
 800e7b0:	e007      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e7b2:	2308      	movs	r3, #8
 800e7b4:	77fb      	strb	r3, [r7, #31]
 800e7b6:	e004      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e7b8:	2310      	movs	r3, #16
 800e7ba:	77fb      	strb	r3, [r7, #31]
 800e7bc:	e001      	b.n	800e7c2 <UART_SetConfig+0x216>
 800e7be:	2310      	movs	r3, #16
 800e7c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	69db      	ldr	r3, [r3, #28]
 800e7c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e7ca:	d15b      	bne.n	800e884 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800e7cc:	7ffb      	ldrb	r3, [r7, #31]
 800e7ce:	2b08      	cmp	r3, #8
 800e7d0:	d827      	bhi.n	800e822 <UART_SetConfig+0x276>
 800e7d2:	a201      	add	r2, pc, #4	; (adr r2, 800e7d8 <UART_SetConfig+0x22c>)
 800e7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7d8:	0800e7fd 	.word	0x0800e7fd
 800e7dc:	0800e805 	.word	0x0800e805
 800e7e0:	0800e80d 	.word	0x0800e80d
 800e7e4:	0800e823 	.word	0x0800e823
 800e7e8:	0800e813 	.word	0x0800e813
 800e7ec:	0800e823 	.word	0x0800e823
 800e7f0:	0800e823 	.word	0x0800e823
 800e7f4:	0800e823 	.word	0x0800e823
 800e7f8:	0800e81b 	.word	0x0800e81b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e7fc:	f7fe fb20 	bl	800ce40 <HAL_RCC_GetPCLK1Freq>
 800e800:	61b8      	str	r0, [r7, #24]
        break;
 800e802:	e013      	b.n	800e82c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e804:	f7fe fb3e 	bl	800ce84 <HAL_RCC_GetPCLK2Freq>
 800e808:	61b8      	str	r0, [r7, #24]
        break;
 800e80a:	e00f      	b.n	800e82c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e80c:	4b39      	ldr	r3, [pc, #228]	; (800e8f4 <UART_SetConfig+0x348>)
 800e80e:	61bb      	str	r3, [r7, #24]
        break;
 800e810:	e00c      	b.n	800e82c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e812:	f7fe fa9f 	bl	800cd54 <HAL_RCC_GetSysClockFreq>
 800e816:	61b8      	str	r0, [r7, #24]
        break;
 800e818:	e008      	b.n	800e82c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e81a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e81e:	61bb      	str	r3, [r7, #24]
        break;
 800e820:	e004      	b.n	800e82c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800e822:	2300      	movs	r3, #0
 800e824:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e826:	2301      	movs	r3, #1
 800e828:	77bb      	strb	r3, [r7, #30]
        break;
 800e82a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	f000 8083 	beq.w	800e93a <UART_SetConfig+0x38e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e834:	69bb      	ldr	r3, [r7, #24]
 800e836:	005a      	lsls	r2, r3, #1
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	085b      	lsrs	r3, r3, #1
 800e83e:	441a      	add	r2, r3
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	fbb2 f3f3 	udiv	r3, r2, r3
 800e848:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	2b0f      	cmp	r3, #15
 800e84e:	d916      	bls.n	800e87e <UART_SetConfig+0x2d2>
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e856:	d212      	bcs.n	800e87e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	b29b      	uxth	r3, r3
 800e85c:	f023 030f 	bic.w	r3, r3, #15
 800e860:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	085b      	lsrs	r3, r3, #1
 800e866:	b29b      	uxth	r3, r3
 800e868:	f003 0307 	and.w	r3, r3, #7
 800e86c:	b29a      	uxth	r2, r3
 800e86e:	89fb      	ldrh	r3, [r7, #14]
 800e870:	4313      	orrs	r3, r2
 800e872:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	89fa      	ldrh	r2, [r7, #14]
 800e87a:	60da      	str	r2, [r3, #12]
 800e87c:	e05d      	b.n	800e93a <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 800e87e:	2301      	movs	r3, #1
 800e880:	77bb      	strb	r3, [r7, #30]
 800e882:	e05a      	b.n	800e93a <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e884:	7ffb      	ldrb	r3, [r7, #31]
 800e886:	2b08      	cmp	r3, #8
 800e888:	d836      	bhi.n	800e8f8 <UART_SetConfig+0x34c>
 800e88a:	a201      	add	r2, pc, #4	; (adr r2, 800e890 <UART_SetConfig+0x2e4>)
 800e88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e890:	0800e8b5 	.word	0x0800e8b5
 800e894:	0800e8bd 	.word	0x0800e8bd
 800e898:	0800e8c5 	.word	0x0800e8c5
 800e89c:	0800e8f9 	.word	0x0800e8f9
 800e8a0:	0800e8cb 	.word	0x0800e8cb
 800e8a4:	0800e8f9 	.word	0x0800e8f9
 800e8a8:	0800e8f9 	.word	0x0800e8f9
 800e8ac:	0800e8f9 	.word	0x0800e8f9
 800e8b0:	0800e8d3 	.word	0x0800e8d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e8b4:	f7fe fac4 	bl	800ce40 <HAL_RCC_GetPCLK1Freq>
 800e8b8:	61b8      	str	r0, [r7, #24]
        break;
 800e8ba:	e022      	b.n	800e902 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e8bc:	f7fe fae2 	bl	800ce84 <HAL_RCC_GetPCLK2Freq>
 800e8c0:	61b8      	str	r0, [r7, #24]
        break;
 800e8c2:	e01e      	b.n	800e902 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e8c4:	4b0b      	ldr	r3, [pc, #44]	; (800e8f4 <UART_SetConfig+0x348>)
 800e8c6:	61bb      	str	r3, [r7, #24]
        break;
 800e8c8:	e01b      	b.n	800e902 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e8ca:	f7fe fa43 	bl	800cd54 <HAL_RCC_GetSysClockFreq>
 800e8ce:	61b8      	str	r0, [r7, #24]
        break;
 800e8d0:	e017      	b.n	800e902 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8d6:	61bb      	str	r3, [r7, #24]
        break;
 800e8d8:	e013      	b.n	800e902 <UART_SetConfig+0x356>
 800e8da:	bf00      	nop
 800e8dc:	40013800 	.word	0x40013800
 800e8e0:	40021000 	.word	0x40021000
 800e8e4:	40004400 	.word	0x40004400
 800e8e8:	40004800 	.word	0x40004800
 800e8ec:	40004c00 	.word	0x40004c00
 800e8f0:	40005000 	.word	0x40005000
 800e8f4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	77bb      	strb	r3, [r7, #30]
        break;
 800e900:	bf00      	nop
    }

    if (pclk != 0U)
 800e902:	69bb      	ldr	r3, [r7, #24]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d018      	beq.n	800e93a <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	685b      	ldr	r3, [r3, #4]
 800e90c:	085a      	lsrs	r2, r3, #1
 800e90e:	69bb      	ldr	r3, [r7, #24]
 800e910:	441a      	add	r2, r3
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	fbb2 f3f3 	udiv	r3, r2, r3
 800e91a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	2b0f      	cmp	r3, #15
 800e920:	d909      	bls.n	800e936 <UART_SetConfig+0x38a>
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e928:	d205      	bcs.n	800e936 <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	b29a      	uxth	r2, r3
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	60da      	str	r2, [r3, #12]
 800e934:	e001      	b.n	800e93a <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 800e936:	2301      	movs	r3, #1
 800e938:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2200      	movs	r2, #0
 800e93e:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2200      	movs	r2, #0
 800e944:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800e946:	7fbb      	ldrb	r3, [r7, #30]
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3720      	adds	r7, #32
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}

0800e950 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e950:	b480      	push	{r7}
 800e952:	b083      	sub	sp, #12
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e95c:	f003 0301 	and.w	r3, r3, #1
 800e960:	2b00      	cmp	r3, #0
 800e962:	d00a      	beq.n	800e97a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	430a      	orrs	r2, r1
 800e978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e97e:	f003 0302 	and.w	r3, r3, #2
 800e982:	2b00      	cmp	r3, #0
 800e984:	d00a      	beq.n	800e99c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	685b      	ldr	r3, [r3, #4]
 800e98c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	430a      	orrs	r2, r1
 800e99a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9a0:	f003 0304 	and.w	r3, r3, #4
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d00a      	beq.n	800e9be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	430a      	orrs	r2, r1
 800e9bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9c2:	f003 0308 	and.w	r3, r3, #8
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d00a      	beq.n	800e9e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	685b      	ldr	r3, [r3, #4]
 800e9d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	430a      	orrs	r2, r1
 800e9de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9e4:	f003 0310 	and.w	r3, r3, #16
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d00a      	beq.n	800ea02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	689b      	ldr	r3, [r3, #8]
 800e9f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	430a      	orrs	r2, r1
 800ea00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea06:	f003 0320 	and.w	r3, r3, #32
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d00a      	beq.n	800ea24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	689b      	ldr	r3, [r3, #8]
 800ea14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	430a      	orrs	r2, r1
 800ea22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d01a      	beq.n	800ea66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	430a      	orrs	r2, r1
 800ea44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea4e:	d10a      	bne.n	800ea66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	430a      	orrs	r2, r1
 800ea64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d00a      	beq.n	800ea88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	430a      	orrs	r2, r1
 800ea86:	605a      	str	r2, [r3, #4]
  }
}
 800ea88:	bf00      	nop
 800ea8a:	370c      	adds	r7, #12
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr

0800ea94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b098      	sub	sp, #96	; 0x60
 800ea98:	af02      	add	r7, sp, #8
 800ea9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eaa4:	f7fc fad6 	bl	800b054 <HAL_GetTick>
 800eaa8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f003 0308 	and.w	r3, r3, #8
 800eab4:	2b08      	cmp	r3, #8
 800eab6:	d12e      	bne.n	800eb16 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eab8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eabc:	9300      	str	r3, [sp, #0]
 800eabe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eac0:	2200      	movs	r2, #0
 800eac2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f000 f88c 	bl	800ebe4 <UART_WaitOnFlagUntilTimeout>
 800eacc:	4603      	mov	r3, r0
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d021      	beq.n	800eb16 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ead8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eada:	e853 3f00 	ldrex	r3, [r3]
 800eade:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eae6:	653b      	str	r3, [r7, #80]	; 0x50
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	461a      	mov	r2, r3
 800eaee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eaf0:	647b      	str	r3, [r7, #68]	; 0x44
 800eaf2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaf4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eaf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eaf8:	e841 2300 	strex	r3, r2, [r1]
 800eafc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d1e6      	bne.n	800ead2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2220      	movs	r2, #32
 800eb08:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb12:	2303      	movs	r3, #3
 800eb14:	e062      	b.n	800ebdc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	f003 0304 	and.w	r3, r3, #4
 800eb20:	2b04      	cmp	r3, #4
 800eb22:	d149      	bne.n	800ebb8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb28:	9300      	str	r3, [sp, #0]
 800eb2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f000 f856 	bl	800ebe4 <UART_WaitOnFlagUntilTimeout>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d03c      	beq.n	800ebb8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb46:	e853 3f00 	ldrex	r3, [r3]
 800eb4a:	623b      	str	r3, [r7, #32]
   return(result);
 800eb4c:	6a3b      	ldr	r3, [r7, #32]
 800eb4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eb52:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	461a      	mov	r2, r3
 800eb5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb5c:	633b      	str	r3, [r7, #48]	; 0x30
 800eb5e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb64:	e841 2300 	strex	r3, r2, [r1]
 800eb68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d1e6      	bne.n	800eb3e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	3308      	adds	r3, #8
 800eb76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	e853 3f00 	ldrex	r3, [r3]
 800eb7e:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	f023 0301 	bic.w	r3, r3, #1
 800eb86:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	3308      	adds	r3, #8
 800eb8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb90:	61fa      	str	r2, [r7, #28]
 800eb92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb94:	69b9      	ldr	r1, [r7, #24]
 800eb96:	69fa      	ldr	r2, [r7, #28]
 800eb98:	e841 2300 	strex	r3, r2, [r1]
 800eb9c:	617b      	str	r3, [r7, #20]
   return(result);
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d1e5      	bne.n	800eb70 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2220      	movs	r2, #32
 800eba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ebb4:	2303      	movs	r3, #3
 800ebb6:	e011      	b.n	800ebdc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2220      	movs	r2, #32
 800ebbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2220      	movs	r2, #32
 800ebc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800ebda:	2300      	movs	r3, #0
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3758      	adds	r7, #88	; 0x58
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	60f8      	str	r0, [r7, #12]
 800ebec:	60b9      	str	r1, [r7, #8]
 800ebee:	603b      	str	r3, [r7, #0]
 800ebf0:	4613      	mov	r3, r2
 800ebf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ebf4:	e049      	b.n	800ec8a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ebf6:	69bb      	ldr	r3, [r7, #24]
 800ebf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebfc:	d045      	beq.n	800ec8a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebfe:	f7fc fa29 	bl	800b054 <HAL_GetTick>
 800ec02:	4602      	mov	r2, r0
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	1ad3      	subs	r3, r2, r3
 800ec08:	69ba      	ldr	r2, [r7, #24]
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d302      	bcc.n	800ec14 <UART_WaitOnFlagUntilTimeout+0x30>
 800ec0e:	69bb      	ldr	r3, [r7, #24]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d101      	bne.n	800ec18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ec14:	2303      	movs	r3, #3
 800ec16:	e048      	b.n	800ecaa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f003 0304 	and.w	r3, r3, #4
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d031      	beq.n	800ec8a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	69db      	ldr	r3, [r3, #28]
 800ec2c:	f003 0308 	and.w	r3, r3, #8
 800ec30:	2b08      	cmp	r3, #8
 800ec32:	d110      	bne.n	800ec56 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	2208      	movs	r2, #8
 800ec3a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ec3c:	68f8      	ldr	r0, [r7, #12]
 800ec3e:	f000 f8ed 	bl	800ee1c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2208      	movs	r2, #8
 800ec46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800ec52:	2301      	movs	r3, #1
 800ec54:	e029      	b.n	800ecaa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	69db      	ldr	r3, [r3, #28]
 800ec5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ec60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec64:	d111      	bne.n	800ec8a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ec70:	68f8      	ldr	r0, [r7, #12]
 800ec72:	f000 f8d3 	bl	800ee1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	2220      	movs	r2, #32
 800ec7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	2200      	movs	r2, #0
 800ec82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800ec86:	2303      	movs	r3, #3
 800ec88:	e00f      	b.n	800ecaa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	69da      	ldr	r2, [r3, #28]
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	4013      	ands	r3, r2
 800ec94:	68ba      	ldr	r2, [r7, #8]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	bf0c      	ite	eq
 800ec9a:	2301      	moveq	r3, #1
 800ec9c:	2300      	movne	r3, #0
 800ec9e:	b2db      	uxtb	r3, r3
 800eca0:	461a      	mov	r2, r3
 800eca2:	79fb      	ldrb	r3, [r7, #7]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d0a6      	beq.n	800ebf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eca8:	2300      	movs	r3, #0
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3710      	adds	r7, #16
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}
	...

0800ecb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b097      	sub	sp, #92	; 0x5c
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	60f8      	str	r0, [r7, #12]
 800ecbc:	60b9      	str	r1, [r7, #8]
 800ecbe:	4613      	mov	r3, r2
 800ecc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	68ba      	ldr	r2, [r7, #8]
 800ecc6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	88fa      	ldrh	r2, [r7, #6]
 800eccc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	88fa      	ldrh	r2, [r7, #6]
 800ecd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	689b      	ldr	r3, [r3, #8]
 800ece2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ece6:	d10e      	bne.n	800ed06 <UART_Start_Receive_IT+0x52>
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	691b      	ldr	r3, [r3, #16]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d105      	bne.n	800ecfc <UART_Start_Receive_IT+0x48>
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ecf6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ecfa:	e01a      	b.n	800ed32 <UART_Start_Receive_IT+0x7e>
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	22ff      	movs	r2, #255	; 0xff
 800ed00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ed04:	e015      	b.n	800ed32 <UART_Start_Receive_IT+0x7e>
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	689b      	ldr	r3, [r3, #8]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d10d      	bne.n	800ed2a <UART_Start_Receive_IT+0x76>
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	691b      	ldr	r3, [r3, #16]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d104      	bne.n	800ed20 <UART_Start_Receive_IT+0x6c>
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	22ff      	movs	r2, #255	; 0xff
 800ed1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ed1e:	e008      	b.n	800ed32 <UART_Start_Receive_IT+0x7e>
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	227f      	movs	r2, #127	; 0x7f
 800ed24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ed28:	e003      	b.n	800ed32 <UART_Start_Receive_IT+0x7e>
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	2200      	movs	r2, #0
 800ed36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	2222      	movs	r2, #34	; 0x22
 800ed3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	3308      	adds	r3, #8
 800ed48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed4c:	e853 3f00 	ldrex	r3, [r3]
 800ed50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ed52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed54:	f043 0301 	orr.w	r3, r3, #1
 800ed58:	657b      	str	r3, [r7, #84]	; 0x54
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	3308      	adds	r3, #8
 800ed60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ed62:	64ba      	str	r2, [r7, #72]	; 0x48
 800ed64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed6a:	e841 2300 	strex	r3, r2, [r1]
 800ed6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ed70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d1e5      	bne.n	800ed42 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	689b      	ldr	r3, [r3, #8]
 800ed7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed7e:	d107      	bne.n	800ed90 <UART_Start_Receive_IT+0xdc>
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	691b      	ldr	r3, [r3, #16]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d103      	bne.n	800ed90 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	4a22      	ldr	r2, [pc, #136]	; (800ee14 <UART_Start_Receive_IT+0x160>)
 800ed8c:	669a      	str	r2, [r3, #104]	; 0x68
 800ed8e:	e002      	b.n	800ed96 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	4a21      	ldr	r2, [pc, #132]	; (800ee18 <UART_Start_Receive_IT+0x164>)
 800ed94:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	691b      	ldr	r3, [r3, #16]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d019      	beq.n	800edd2 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda6:	e853 3f00 	ldrex	r3, [r3]
 800edaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800edac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800edb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	461a      	mov	r2, r3
 800edba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edbc:	637b      	str	r3, [r7, #52]	; 0x34
 800edbe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800edc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800edc4:	e841 2300 	strex	r3, r2, [r1]
 800edc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800edca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d1e6      	bne.n	800ed9e <UART_Start_Receive_IT+0xea>
 800edd0:	e018      	b.n	800ee04 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	e853 3f00 	ldrex	r3, [r3]
 800edde:	613b      	str	r3, [r7, #16]
   return(result);
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	f043 0320 	orr.w	r3, r3, #32
 800ede6:	653b      	str	r3, [r7, #80]	; 0x50
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	461a      	mov	r2, r3
 800edee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edf0:	623b      	str	r3, [r7, #32]
 800edf2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edf4:	69f9      	ldr	r1, [r7, #28]
 800edf6:	6a3a      	ldr	r2, [r7, #32]
 800edf8:	e841 2300 	strex	r3, r2, [r1]
 800edfc:	61bb      	str	r3, [r7, #24]
   return(result);
 800edfe:	69bb      	ldr	r3, [r7, #24]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d1e6      	bne.n	800edd2 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 800ee04:	2300      	movs	r3, #0
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	375c      	adds	r7, #92	; 0x5c
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee10:	4770      	bx	lr
 800ee12:	bf00      	nop
 800ee14:	0800f10d 	.word	0x0800f10d
 800ee18:	0800ef65 	.word	0x0800ef65

0800ee1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ee1c:	b480      	push	{r7}
 800ee1e:	b095      	sub	sp, #84	; 0x54
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee2c:	e853 3f00 	ldrex	r3, [r3]
 800ee30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ee32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ee38:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	461a      	mov	r2, r3
 800ee40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee42:	643b      	str	r3, [r7, #64]	; 0x40
 800ee44:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee4a:	e841 2300 	strex	r3, r2, [r1]
 800ee4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ee50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d1e6      	bne.n	800ee24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	3308      	adds	r3, #8
 800ee5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee5e:	6a3b      	ldr	r3, [r7, #32]
 800ee60:	e853 3f00 	ldrex	r3, [r3]
 800ee64:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee66:	69fb      	ldr	r3, [r7, #28]
 800ee68:	f023 0301 	bic.w	r3, r3, #1
 800ee6c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	3308      	adds	r3, #8
 800ee74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee76:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ee78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee7e:	e841 2300 	strex	r3, r2, [r1]
 800ee82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d1e5      	bne.n	800ee56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee8e:	2b01      	cmp	r3, #1
 800ee90:	d118      	bne.n	800eec4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	e853 3f00 	ldrex	r3, [r3]
 800ee9e:	60bb      	str	r3, [r7, #8]
   return(result);
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	f023 0310 	bic.w	r3, r3, #16
 800eea6:	647b      	str	r3, [r7, #68]	; 0x44
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	461a      	mov	r2, r3
 800eeae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eeb0:	61bb      	str	r3, [r7, #24]
 800eeb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeb4:	6979      	ldr	r1, [r7, #20]
 800eeb6:	69ba      	ldr	r2, [r7, #24]
 800eeb8:	e841 2300 	strex	r3, r2, [r1]
 800eebc:	613b      	str	r3, [r7, #16]
   return(result);
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d1e6      	bne.n	800ee92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2220      	movs	r2, #32
 800eec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2200      	movs	r2, #0
 800eed0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2200      	movs	r2, #0
 800eed6:	669a      	str	r2, [r3, #104]	; 0x68
}
 800eed8:	bf00      	nop
 800eeda:	3754      	adds	r7, #84	; 0x54
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr

0800eee4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b084      	sub	sp, #16
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2200      	movs	r2, #0
 800eef6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2200      	movs	r2, #0
 800eefe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ef02:	68f8      	ldr	r0, [r7, #12]
 800ef04:	f7ff fb3c 	bl	800e580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef08:	bf00      	nop
 800ef0a:	3710      	adds	r7, #16
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}

0800ef10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b088      	sub	sp, #32
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	e853 3f00 	ldrex	r3, [r3]
 800ef24:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef2c:	61fb      	str	r3, [r7, #28]
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	461a      	mov	r2, r3
 800ef34:	69fb      	ldr	r3, [r7, #28]
 800ef36:	61bb      	str	r3, [r7, #24]
 800ef38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef3a:	6979      	ldr	r1, [r7, #20]
 800ef3c:	69ba      	ldr	r2, [r7, #24]
 800ef3e:	e841 2300 	strex	r3, r2, [r1]
 800ef42:	613b      	str	r3, [r7, #16]
   return(result);
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d1e6      	bne.n	800ef18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2220      	movs	r2, #32
 800ef4e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2200      	movs	r2, #0
 800ef54:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f7ff fb08 	bl	800e56c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef5c:	bf00      	nop
 800ef5e:	3720      	adds	r7, #32
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}

0800ef64 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b09c      	sub	sp, #112	; 0x70
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ef72:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef7c:	2b22      	cmp	r3, #34	; 0x22
 800ef7e:	f040 80b9 	bne.w	800f0f4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ef88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ef8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ef90:	b2d9      	uxtb	r1, r3
 800ef92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ef96:	b2da      	uxtb	r2, r3
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef9c:	400a      	ands	r2, r1
 800ef9e:	b2d2      	uxtb	r2, r2
 800efa0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efa6:	1c5a      	adds	r2, r3, #1
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	3b01      	subs	r3, #1
 800efb6:	b29a      	uxth	r2, r3
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800efc4:	b29b      	uxth	r3, r3
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	f040 809c 	bne.w	800f104 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efd4:	e853 3f00 	ldrex	r3, [r3]
 800efd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800efda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800efe0:	66bb      	str	r3, [r7, #104]	; 0x68
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	461a      	mov	r2, r3
 800efe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800efea:	65bb      	str	r3, [r7, #88]	; 0x58
 800efec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eff0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eff2:	e841 2300 	strex	r3, r2, [r1]
 800eff6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800effa:	2b00      	cmp	r3, #0
 800effc:	d1e6      	bne.n	800efcc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	3308      	adds	r3, #8
 800f004:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f008:	e853 3f00 	ldrex	r3, [r3]
 800f00c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f010:	f023 0301 	bic.w	r3, r3, #1
 800f014:	667b      	str	r3, [r7, #100]	; 0x64
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	3308      	adds	r3, #8
 800f01c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f01e:	647a      	str	r2, [r7, #68]	; 0x44
 800f020:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f022:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f024:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f026:	e841 2300 	strex	r3, r2, [r1]
 800f02a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d1e5      	bne.n	800effe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2220      	movs	r2, #32
 800f036:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2200      	movs	r2, #0
 800f03e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2200      	movs	r2, #0
 800f044:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	685b      	ldr	r3, [r3, #4]
 800f04c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f050:	2b00      	cmp	r3, #0
 800f052:	d018      	beq.n	800f086 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05c:	e853 3f00 	ldrex	r3, [r3]
 800f060:	623b      	str	r3, [r7, #32]
   return(result);
 800f062:	6a3b      	ldr	r3, [r7, #32]
 800f064:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f068:	663b      	str	r3, [r7, #96]	; 0x60
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	461a      	mov	r2, r3
 800f070:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f072:	633b      	str	r3, [r7, #48]	; 0x30
 800f074:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f076:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f07a:	e841 2300 	strex	r3, r2, [r1]
 800f07e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f082:	2b00      	cmp	r3, #0
 800f084:	d1e6      	bne.n	800f054 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f08a:	2b01      	cmp	r3, #1
 800f08c:	d12e      	bne.n	800f0ec <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2200      	movs	r2, #0
 800f092:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	e853 3f00 	ldrex	r3, [r3]
 800f0a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f023 0310 	bic.w	r3, r3, #16
 800f0a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0b2:	61fb      	str	r3, [r7, #28]
 800f0b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b6:	69b9      	ldr	r1, [r7, #24]
 800f0b8:	69fa      	ldr	r2, [r7, #28]
 800f0ba:	e841 2300 	strex	r3, r2, [r1]
 800f0be:	617b      	str	r3, [r7, #20]
   return(result);
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d1e6      	bne.n	800f094 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	69db      	ldr	r3, [r3, #28]
 800f0cc:	f003 0310 	and.w	r3, r3, #16
 800f0d0:	2b10      	cmp	r3, #16
 800f0d2:	d103      	bne.n	800f0dc <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	2210      	movs	r2, #16
 800f0da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f0e2:	4619      	mov	r1, r3
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7ff fa55 	bl	800e594 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f0ea:	e00b      	b.n	800f104 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f7fb f8d7 	bl	800a2a0 <HAL_UART_RxCpltCallback>
}
 800f0f2:	e007      	b.n	800f104 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	699a      	ldr	r2, [r3, #24]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	f042 0208 	orr.w	r2, r2, #8
 800f102:	619a      	str	r2, [r3, #24]
}
 800f104:	bf00      	nop
 800f106:	3770      	adds	r7, #112	; 0x70
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}

0800f10c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b09c      	sub	sp, #112	; 0x70
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f11a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f124:	2b22      	cmp	r3, #34	; 0x22
 800f126:	f040 80b9 	bne.w	800f29c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f130:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f138:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800f13a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800f13e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f142:	4013      	ands	r3, r2
 800f144:	b29a      	uxth	r2, r3
 800f146:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f148:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f14e:	1c9a      	adds	r2, r3, #2
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f15a:	b29b      	uxth	r3, r3
 800f15c:	3b01      	subs	r3, #1
 800f15e:	b29a      	uxth	r2, r3
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f16c:	b29b      	uxth	r3, r3
 800f16e:	2b00      	cmp	r3, #0
 800f170:	f040 809c 	bne.w	800f2ac <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f17a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f17c:	e853 3f00 	ldrex	r3, [r3]
 800f180:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f184:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f188:	667b      	str	r3, [r7, #100]	; 0x64
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	461a      	mov	r2, r3
 800f190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f192:	657b      	str	r3, [r7, #84]	; 0x54
 800f194:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f196:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f198:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f19a:	e841 2300 	strex	r3, r2, [r1]
 800f19e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f1a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d1e6      	bne.n	800f174 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	3308      	adds	r3, #8
 800f1ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1b0:	e853 3f00 	ldrex	r3, [r3]
 800f1b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b8:	f023 0301 	bic.w	r3, r3, #1
 800f1bc:	663b      	str	r3, [r7, #96]	; 0x60
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	3308      	adds	r3, #8
 800f1c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f1c6:	643a      	str	r2, [r7, #64]	; 0x40
 800f1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f1cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f1ce:	e841 2300 	strex	r3, r2, [r1]
 800f1d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d1e5      	bne.n	800f1a6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2220      	movs	r2, #32
 800f1de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	685b      	ldr	r3, [r3, #4]
 800f1f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d018      	beq.n	800f22e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f202:	6a3b      	ldr	r3, [r7, #32]
 800f204:	e853 3f00 	ldrex	r3, [r3]
 800f208:	61fb      	str	r3, [r7, #28]
   return(result);
 800f20a:	69fb      	ldr	r3, [r7, #28]
 800f20c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f210:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	461a      	mov	r2, r3
 800f218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f21a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f21c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f21e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f222:	e841 2300 	strex	r3, r2, [r1]
 800f226:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d1e6      	bne.n	800f1fc <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f232:	2b01      	cmp	r3, #1
 800f234:	d12e      	bne.n	800f294 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2200      	movs	r2, #0
 800f23a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	e853 3f00 	ldrex	r3, [r3]
 800f248:	60bb      	str	r3, [r7, #8]
   return(result);
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	f023 0310 	bic.w	r3, r3, #16
 800f250:	65bb      	str	r3, [r7, #88]	; 0x58
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	461a      	mov	r2, r3
 800f258:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f25a:	61bb      	str	r3, [r7, #24]
 800f25c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f25e:	6979      	ldr	r1, [r7, #20]
 800f260:	69ba      	ldr	r2, [r7, #24]
 800f262:	e841 2300 	strex	r3, r2, [r1]
 800f266:	613b      	str	r3, [r7, #16]
   return(result);
 800f268:	693b      	ldr	r3, [r7, #16]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d1e6      	bne.n	800f23c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	69db      	ldr	r3, [r3, #28]
 800f274:	f003 0310 	and.w	r3, r3, #16
 800f278:	2b10      	cmp	r3, #16
 800f27a:	d103      	bne.n	800f284 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	2210      	movs	r2, #16
 800f282:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f28a:	4619      	mov	r1, r3
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f7ff f981 	bl	800e594 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f292:	e00b      	b.n	800f2ac <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f7fb f803 	bl	800a2a0 <HAL_UART_RxCpltCallback>
}
 800f29a:	e007      	b.n	800f2ac <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	699a      	ldr	r2, [r3, #24]
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	f042 0208 	orr.w	r2, r2, #8
 800f2aa:	619a      	str	r2, [r3, #24]
}
 800f2ac:	bf00      	nop
 800f2ae:	3770      	adds	r7, #112	; 0x70
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}

0800f2b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	b083      	sub	sp, #12
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f2bc:	bf00      	nop
 800f2be:	370c      	adds	r7, #12
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr

0800f2c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b085      	sub	sp, #20
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f2d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800f2d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800f2dc:	b29a      	uxth	r2, r3
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	b29b      	uxth	r3, r3
 800f2e2:	43db      	mvns	r3, r3
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	4013      	ands	r3, r2
 800f2e8:	b29a      	uxth	r2, r3
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f2f0:	2300      	movs	r3, #0
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3714      	adds	r7, #20
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fc:	4770      	bx	lr

0800f2fe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800f2fe:	b084      	sub	sp, #16
 800f300:	b480      	push	{r7}
 800f302:	b083      	sub	sp, #12
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
 800f308:	f107 0014 	add.w	r0, r7, #20
 800f30c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2201      	movs	r2, #1
 800f314:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2200      	movs	r2, #0
 800f31c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2200      	movs	r2, #0
 800f324:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2200      	movs	r2, #0
 800f32c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800f330:	2300      	movs	r3, #0
}
 800f332:	4618      	mov	r0, r3
 800f334:	370c      	adds	r7, #12
 800f336:	46bd      	mov	sp, r7
 800f338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33c:	b004      	add	sp, #16
 800f33e:	4770      	bx	lr

0800f340 <module_TIMERCallback>:
/******************************************************************************/
/***                      Processing functions Callback                      **/
/******************************************************************************/
/******************************************************************************/
void module_TIMERCallback(void * arg)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b082      	sub	sp, #8
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
	static uint32_t check_counter = 0;
	if(check_counter != 0)
 800f348:	4b12      	ldr	r3, [pc, #72]	; (800f394 <module_TIMERCallback+0x54>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d017      	beq.n	800f380 <module_TIMERCallback+0x40>
	{
		LOGA(INF_FILE, "module timer: %ld\r\n", DRV_GETTICK() - check_counter);
 800f350:	4811      	ldr	r0, [pc, #68]	; (800f398 <module_TIMERCallback+0x58>)
 800f352:	f000 fd8d 	bl	800fe70 <iprintf>
 800f356:	bf00      	nop
 800f358:	f7fb fe7c 	bl	800b054 <HAL_GetTick>
 800f35c:	4602      	mov	r2, r0
 800f35e:	4b0d      	ldr	r3, [pc, #52]	; (800f394 <module_TIMERCallback+0x54>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	1ad3      	subs	r3, r2, r3
 800f364:	222e      	movs	r2, #46	; 0x2e
 800f366:	490d      	ldr	r1, [pc, #52]	; (800f39c <module_TIMERCallback+0x5c>)
 800f368:	480d      	ldr	r0, [pc, #52]	; (800f3a0 <module_TIMERCallback+0x60>)
 800f36a:	f000 fd81 	bl	800fe70 <iprintf>
 800f36e:	480d      	ldr	r0, [pc, #52]	; (800f3a4 <module_TIMERCallback+0x64>)
 800f370:	f000 fd7e 	bl	800fe70 <iprintf>
		check_counter = DRV_GETTICK();
 800f374:	f7fb fe6e 	bl	800b054 <HAL_GetTick>
 800f378:	4603      	mov	r3, r0
 800f37a:	4a06      	ldr	r2, [pc, #24]	; (800f394 <module_TIMERCallback+0x54>)
 800f37c:	6013      	str	r3, [r2, #0]
	}
	else
	{
		check_counter = DRV_GETTICK();
	}
}
 800f37e:	e004      	b.n	800f38a <module_TIMERCallback+0x4a>
		check_counter = DRV_GETTICK();
 800f380:	f7fb fe68 	bl	800b054 <HAL_GetTick>
 800f384:	4603      	mov	r3, r0
 800f386:	4a03      	ldr	r2, [pc, #12]	; (800f394 <module_TIMERCallback+0x54>)
 800f388:	6013      	str	r3, [r2, #0]
}
 800f38a:	bf00      	nop
 800f38c:	3708      	adds	r7, #8
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}
 800f392:	bf00      	nop
 800f394:	20000090 	.word	0x20000090
 800f398:	08010eb0 	.word	0x08010eb0
 800f39c:	08011184 	.word	0x08011184
 800f3a0:	08010eb8 	.word	0x08010eb8
 800f3a4:	08010edc 	.word	0x08010edc

0800f3a8 <module_init>:
/******************************************************************************/
/***                            Public functions                             **/
/******************************************************************************/
/******************************************************************************/
void module_init(void)
{
 800f3a8:	b590      	push	{r4, r7, lr}
 800f3aa:	b08d      	sub	sp, #52	; 0x34
 800f3ac:	af04      	add	r7, sp, #16
	memset(&MODULE, 0x00, sizeof(MODULE));
 800f3ae:	2218      	movs	r2, #24
 800f3b0:	2100      	movs	r1, #0
 800f3b2:	4811      	ldr	r0, [pc, #68]	; (800f3f8 <module_init+0x50>)
 800f3b4:	f000 fd54 	bl	800fe60 <memset>

	MODULE.Init = &module_init;
 800f3b8:	4b0f      	ldr	r3, [pc, #60]	; (800f3f8 <module_init+0x50>)
 800f3ba:	4a10      	ldr	r2, [pc, #64]	; (800f3fc <module_init+0x54>)
 800f3bc:	605a      	str	r2, [r3, #4]


	MODULE.work.timer_refesh = REFESH_TIME;
 800f3be:	4b0e      	ldr	r3, [pc, #56]	; (800f3f8 <module_init+0x50>)
 800f3c0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800f3c4:	611a      	str	r2, [r3, #16]
	Cblk_parameter_t module_Tmrcbk;
	_Clear_DrvPar(&module_Tmrcbk);
 800f3c6:	463b      	mov	r3, r7
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f000 f81d 	bl	800f408 <_Clear_DrvPar>
	module_Tmrcbk.type = DR_TIMER;
 800f3ce:	2305      	movs	r3, #5
 800f3d0:	713b      	strb	r3, [r7, #4]
	module_Tmrcbk.para =  &MODULE.work.timer_refesh;
 800f3d2:	4b0b      	ldr	r3, [pc, #44]	; (800f400 <module_init+0x58>)
 800f3d4:	60bb      	str	r3, [r7, #8]
	module_Tmrcbk.EventCallback_t = &module_TIMERCallback;
 800f3d6:	4b0b      	ldr	r3, [pc, #44]	; (800f404 <module_init+0x5c>)
 800f3d8:	603b      	str	r3, [r7, #0]
	Drv_RegisterIRQ_callback(module_Tmrcbk);
 800f3da:	466c      	mov	r4, sp
 800f3dc:	f107 0310 	add.w	r3, r7, #16
 800f3e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f3e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f3e6:	463b      	mov	r3, r7
 800f3e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f3ea:	f000 f915 	bl	800f618 <Drv_RegisterIRQ_callback>


}
 800f3ee:	bf00      	nop
 800f3f0:	3724      	adds	r7, #36	; 0x24
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd90      	pop	{r4, r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	200006c8 	.word	0x200006c8
 800f3fc:	0800f3a9 	.word	0x0800f3a9
 800f400:	200006d8 	.word	0x200006d8
 800f404:	0800f341 	.word	0x0800f341

0800f408 <_Clear_DrvPar>:
*/
/******************************************************************************/
/***                        TIMER FUNCTION FOR THE DRIVER                    **/
/******************************************************************************/
void _Clear_DrvPar(Cblk_parameter_t *_cblk)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
	memset(_cblk,0,sizeof(Cblk_parameter_t));
 800f410:	2220      	movs	r2, #32
 800f412:	2100      	movs	r1, #0
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f000 fd23 	bl	800fe60 <memset>
	_cblk->type = DR_NULL;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2200      	movs	r2, #0
 800f41e:	711a      	strb	r2, [r3, #4]
	_cblk->active = false;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2200      	movs	r2, #0
 800f424:	761a      	strb	r2, [r3, #24]
	_cblk->para = 0;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2200      	movs	r2, #0
 800f42a:	609a      	str	r2, [r3, #8]
	_cblk->private_systick = 0;
 800f42c:	6879      	ldr	r1, [r7, #4]
 800f42e:	f04f 0200 	mov.w	r2, #0
 800f432:	f04f 0300 	mov.w	r3, #0
 800f436:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_cblk->EventCallback_t = 0;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2200      	movs	r2, #0
 800f43e:	601a      	str	r2, [r3, #0]
}
 800f440:	bf00      	nop
 800f442:	3708      	adds	r7, #8
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}

0800f448 <Drv_RegisterTIMER>:
void Drv_RegisterTIMER(void)
{
 800f448:	b590      	push	{r4, r7, lr}
 800f44a:	b08d      	sub	sp, #52	; 0x34
 800f44c:	af04      	add	r7, sp, #16
	Cblk_parameter_t cbkirq;
	_Clear_DrvPar(&cbkirq);
 800f44e:	463b      	mov	r3, r7
 800f450:	4618      	mov	r0, r3
 800f452:	f7ff ffd9 	bl	800f408 <_Clear_DrvPar>
	cbkirq.type = DR_TIMER_SYS;
 800f456:	2304      	movs	r3, #4
 800f458:	713b      	strb	r3, [r7, #4]
	Drv_RegisterIRQ_callback(cbkirq);
 800f45a:	466c      	mov	r4, sp
 800f45c:	f107 0310 	add.w	r3, r7, #16
 800f460:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f462:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f466:	463b      	mov	r3, r7
 800f468:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f46a:	f000 f8d5 	bl	800f618 <Drv_RegisterIRQ_callback>
}
 800f46e:	bf00      	nop
 800f470:	3724      	adds	r7, #36	; 0x24
 800f472:	46bd      	mov	sp, r7
 800f474:	bd90      	pop	{r4, r7, pc}
	...

0800f478 <DRV_TIMER_FNC>:
void DRV_TIMER_FNC(void *arg)
{
 800f478:	b4b0      	push	{r4, r5, r7}
 800f47a:	b085      	sub	sp, #20
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<IRQ_MAX; i++)
 800f480:	2300      	movs	r3, #0
 800f482:	73fb      	strb	r3, [r7, #15]
 800f484:	e07f      	b.n	800f586 <DRV_TIMER_FNC+0x10e>
	{
		if(IRQ_Arr[i].type == DR_NULL) return;
 800f486:	7bfb      	ldrb	r3, [r7, #15]
 800f488:	4a44      	ldr	r2, [pc, #272]	; (800f59c <DRV_TIMER_FNC+0x124>)
 800f48a:	015b      	lsls	r3, r3, #5
 800f48c:	4413      	add	r3, r2
 800f48e:	3304      	adds	r3, #4
 800f490:	781b      	ldrb	r3, [r3, #0]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d07c      	beq.n	800f590 <DRV_TIMER_FNC+0x118>

		if((IRQ_Arr[i].type) == DR_TIMER)
 800f496:	7bfb      	ldrb	r3, [r7, #15]
 800f498:	4a40      	ldr	r2, [pc, #256]	; (800f59c <DRV_TIMER_FNC+0x124>)
 800f49a:	015b      	lsls	r3, r3, #5
 800f49c:	4413      	add	r3, r2
 800f49e:	3304      	adds	r3, #4
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	2b05      	cmp	r3, #5
 800f4a4:	d16c      	bne.n	800f580 <DRV_TIMER_FNC+0x108>
		{
			if(*(uint32_t*)IRQ_Arr[i].para != 0 && IRQ_Arr[i].para != 0)
 800f4a6:	7bfb      	ldrb	r3, [r7, #15]
 800f4a8:	4a3c      	ldr	r2, [pc, #240]	; (800f59c <DRV_TIMER_FNC+0x124>)
 800f4aa:	015b      	lsls	r3, r3, #5
 800f4ac:	4413      	add	r3, r2
 800f4ae:	3308      	adds	r3, #8
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d04e      	beq.n	800f556 <DRV_TIMER_FNC+0xde>
 800f4b8:	7bfb      	ldrb	r3, [r7, #15]
 800f4ba:	4a38      	ldr	r2, [pc, #224]	; (800f59c <DRV_TIMER_FNC+0x124>)
 800f4bc:	015b      	lsls	r3, r3, #5
 800f4be:	4413      	add	r3, r2
 800f4c0:	3308      	adds	r3, #8
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d046      	beq.n	800f556 <DRV_TIMER_FNC+0xde>
			{
				if(++IRQ_Arr[i].private_systick >= (*(uint32_t*)IRQ_Arr[i].para) / DRV_TIMER_PERIOD)
 800f4c8:	7bf9      	ldrb	r1, [r7, #15]
 800f4ca:	4a34      	ldr	r2, [pc, #208]	; (800f59c <DRV_TIMER_FNC+0x124>)
 800f4cc:	014b      	lsls	r3, r1, #5
 800f4ce:	4413      	add	r3, r2
 800f4d0:	3310      	adds	r3, #16
 800f4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d6:	1c54      	adds	r4, r2, #1
 800f4d8:	f143 0500 	adc.w	r5, r3, #0
 800f4dc:	4a2f      	ldr	r2, [pc, #188]	; (800f59c <DRV_TIMER_FNC+0x124>)
 800f4de:	014b      	lsls	r3, r1, #5
 800f4e0:	4413      	add	r3, r2
 800f4e2:	3310      	adds	r3, #16
 800f4e4:	e9c3 4500 	strd	r4, r5, [r3]
 800f4e8:	4a2c      	ldr	r2, [pc, #176]	; (800f59c <DRV_TIMER_FNC+0x124>)
 800f4ea:	014b      	lsls	r3, r1, #5
 800f4ec:	4413      	add	r3, r2
 800f4ee:	3310      	adds	r3, #16
 800f4f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f4f4:	7bfb      	ldrb	r3, [r7, #15]
 800f4f6:	4a29      	ldr	r2, [pc, #164]	; (800f59c <DRV_TIMER_FNC+0x124>)
 800f4f8:	015b      	lsls	r3, r3, #5
 800f4fa:	4413      	add	r3, r2
 800f4fc:	3308      	adds	r3, #8
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	4a27      	ldr	r2, [pc, #156]	; (800f5a0 <DRV_TIMER_FNC+0x128>)
 800f504:	fba2 2303 	umull	r2, r3, r2, r3
 800f508:	099b      	lsrs	r3, r3, #6
 800f50a:	461a      	mov	r2, r3
 800f50c:	f04f 0300 	mov.w	r3, #0
 800f510:	4299      	cmp	r1, r3
 800f512:	bf08      	it	eq
 800f514:	4290      	cmpeq	r0, r2
 800f516:	d333      	bcc.n	800f580 <DRV_TIMER_FNC+0x108>
				{
					if(IRQ_Arr[i].active == false)
 800f518:	7bfb      	ldrb	r3, [r7, #15]
 800f51a:	4a20      	ldr	r2, [pc, #128]	; (800f59c <DRV_TIMER_FNC+0x124>)
 800f51c:	015b      	lsls	r3, r3, #5
 800f51e:	4413      	add	r3, r2
 800f520:	3318      	adds	r3, #24
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	f083 0301 	eor.w	r3, r3, #1
 800f528:	b2db      	uxtb	r3, r3
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d006      	beq.n	800f53c <DRV_TIMER_FNC+0xc4>
					{
						IRQ_Arr[i].active = true;
 800f52e:	7bfb      	ldrb	r3, [r7, #15]
 800f530:	4a1a      	ldr	r2, [pc, #104]	; (800f59c <DRV_TIMER_FNC+0x124>)
 800f532:	015b      	lsls	r3, r3, #5
 800f534:	4413      	add	r3, r2
 800f536:	3318      	adds	r3, #24
 800f538:	2201      	movs	r2, #1
 800f53a:	701a      	strb	r2, [r3, #0]
					}
					IRQ_Arr[i].private_systick = 0;
 800f53c:	7bfb      	ldrb	r3, [r7, #15]
 800f53e:	4a17      	ldr	r2, [pc, #92]	; (800f59c <DRV_TIMER_FNC+0x124>)
 800f540:	015b      	lsls	r3, r3, #5
 800f542:	4413      	add	r3, r2
 800f544:	f103 0110 	add.w	r1, r3, #16
 800f548:	f04f 0200 	mov.w	r2, #0
 800f54c:	f04f 0300 	mov.w	r3, #0
 800f550:	e9c1 2300 	strd	r2, r3, [r1]
				if(++IRQ_Arr[i].private_systick >= (*(uint32_t*)IRQ_Arr[i].para) / DRV_TIMER_PERIOD)
 800f554:	e014      	b.n	800f580 <DRV_TIMER_FNC+0x108>
				}
			}
			else if(!(*(uint32_t*)IRQ_Arr[i].para))
 800f556:	7bfb      	ldrb	r3, [r7, #15]
 800f558:	4a10      	ldr	r2, [pc, #64]	; (800f59c <DRV_TIMER_FNC+0x124>)
 800f55a:	015b      	lsls	r3, r3, #5
 800f55c:	4413      	add	r3, r2
 800f55e:	3308      	adds	r3, #8
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d10b      	bne.n	800f580 <DRV_TIMER_FNC+0x108>
			{
				IRQ_Arr[i].private_systick = 0;
 800f568:	7bfb      	ldrb	r3, [r7, #15]
 800f56a:	4a0c      	ldr	r2, [pc, #48]	; (800f59c <DRV_TIMER_FNC+0x124>)
 800f56c:	015b      	lsls	r3, r3, #5
 800f56e:	4413      	add	r3, r2
 800f570:	f103 0110 	add.w	r1, r3, #16
 800f574:	f04f 0200 	mov.w	r2, #0
 800f578:	f04f 0300 	mov.w	r3, #0
 800f57c:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t i=0; i<IRQ_MAX; i++)
 800f580:	7bfb      	ldrb	r3, [r7, #15]
 800f582:	3301      	adds	r3, #1
 800f584:	73fb      	strb	r3, [r7, #15]
 800f586:	7bfb      	ldrb	r3, [r7, #15]
 800f588:	2b13      	cmp	r3, #19
 800f58a:	f67f af7c 	bls.w	800f486 <DRV_TIMER_FNC+0xe>
 800f58e:	e000      	b.n	800f592 <DRV_TIMER_FNC+0x11a>
		if(IRQ_Arr[i].type == DR_NULL) return;
 800f590:	bf00      	nop
			}
		}
	}
}
 800f592:	3714      	adds	r7, #20
 800f594:	46bd      	mov	sp, r7
 800f596:	bcb0      	pop	{r4, r5, r7}
 800f598:	4770      	bx	lr
 800f59a:	bf00      	nop
 800f59c:	200006e0 	.word	0x200006e0
 800f5a0:	10624dd3 	.word	0x10624dd3

0800f5a4 <DRV_RUN>:

void DRV_RUN(void)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b082      	sub	sp, #8
 800f5a8:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<IRQ_MAX; i++)
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	71fb      	strb	r3, [r7, #7]
 800f5ae:	e028      	b.n	800f602 <DRV_RUN+0x5e>
	{
		if(IRQ_Arr[i].type == DR_NULL) return;
 800f5b0:	79fb      	ldrb	r3, [r7, #7]
 800f5b2:	4a18      	ldr	r2, [pc, #96]	; (800f614 <DRV_RUN+0x70>)
 800f5b4:	015b      	lsls	r3, r3, #5
 800f5b6:	4413      	add	r3, r2
 800f5b8:	3304      	adds	r3, #4
 800f5ba:	781b      	ldrb	r3, [r3, #0]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d024      	beq.n	800f60a <DRV_RUN+0x66>
		if(IRQ_Arr[i].active && IRQ_Arr[i].type == DR_TIMER)
 800f5c0:	79fb      	ldrb	r3, [r7, #7]
 800f5c2:	4a14      	ldr	r2, [pc, #80]	; (800f614 <DRV_RUN+0x70>)
 800f5c4:	015b      	lsls	r3, r3, #5
 800f5c6:	4413      	add	r3, r2
 800f5c8:	3318      	adds	r3, #24
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d015      	beq.n	800f5fc <DRV_RUN+0x58>
 800f5d0:	79fb      	ldrb	r3, [r7, #7]
 800f5d2:	4a10      	ldr	r2, [pc, #64]	; (800f614 <DRV_RUN+0x70>)
 800f5d4:	015b      	lsls	r3, r3, #5
 800f5d6:	4413      	add	r3, r2
 800f5d8:	3304      	adds	r3, #4
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	2b05      	cmp	r3, #5
 800f5de:	d10d      	bne.n	800f5fc <DRV_RUN+0x58>
		{
			IRQ_Arr[i].EventCallback_t(0);
 800f5e0:	79fb      	ldrb	r3, [r7, #7]
 800f5e2:	4a0c      	ldr	r2, [pc, #48]	; (800f614 <DRV_RUN+0x70>)
 800f5e4:	015b      	lsls	r3, r3, #5
 800f5e6:	4413      	add	r3, r2
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	2000      	movs	r0, #0
 800f5ec:	4798      	blx	r3
			IRQ_Arr[i].active=false;
 800f5ee:	79fb      	ldrb	r3, [r7, #7]
 800f5f0:	4a08      	ldr	r2, [pc, #32]	; (800f614 <DRV_RUN+0x70>)
 800f5f2:	015b      	lsls	r3, r3, #5
 800f5f4:	4413      	add	r3, r2
 800f5f6:	3318      	adds	r3, #24
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<IRQ_MAX; i++)
 800f5fc:	79fb      	ldrb	r3, [r7, #7]
 800f5fe:	3301      	adds	r3, #1
 800f600:	71fb      	strb	r3, [r7, #7]
 800f602:	79fb      	ldrb	r3, [r7, #7]
 800f604:	2b13      	cmp	r3, #19
 800f606:	d9d3      	bls.n	800f5b0 <DRV_RUN+0xc>
 800f608:	e000      	b.n	800f60c <DRV_RUN+0x68>
		if(IRQ_Arr[i].type == DR_NULL) return;
 800f60a:	bf00      	nop
		}
	}
}
 800f60c:	3708      	adds	r7, #8
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}
 800f612:	bf00      	nop
 800f614:	200006e0 	.word	0x200006e0

0800f618 <Drv_RegisterIRQ_callback>:
/******************************************************************************/
/***                 INTERRUPT FUNCTIONS FOR THE DRIVER                      **/
/******************************************************************************/
bool Drv_RegisterIRQ_callback(Cblk_parameter_t cbk)
{
 800f618:	b084      	sub	sp, #16
 800f61a:	b5b0      	push	{r4, r5, r7, lr}
 800f61c:	b082      	sub	sp, #8
 800f61e:	af00      	add	r7, sp, #0
 800f620:	f107 0418 	add.w	r4, r7, #24
 800f624:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t i;
	for(i=0;i<IRQ_MAX;i++)
 800f628:	2300      	movs	r3, #0
 800f62a:	71fb      	strb	r3, [r7, #7]
 800f62c:	e020      	b.n	800f670 <Drv_RegisterIRQ_callback+0x58>
	{
		if(IRQ_Arr[i].type == DR_NULL)
 800f62e:	79fb      	ldrb	r3, [r7, #7]
 800f630:	4a15      	ldr	r2, [pc, #84]	; (800f688 <Drv_RegisterIRQ_callback+0x70>)
 800f632:	015b      	lsls	r3, r3, #5
 800f634:	4413      	add	r3, r2
 800f636:	3304      	adds	r3, #4
 800f638:	781b      	ldrb	r3, [r3, #0]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d115      	bne.n	800f66a <Drv_RegisterIRQ_callback+0x52>
		{
			_Clear_DrvPar(&IRQ_Arr[i]);
 800f63e:	79fb      	ldrb	r3, [r7, #7]
 800f640:	015b      	lsls	r3, r3, #5
 800f642:	4a11      	ldr	r2, [pc, #68]	; (800f688 <Drv_RegisterIRQ_callback+0x70>)
 800f644:	4413      	add	r3, r2
 800f646:	4618      	mov	r0, r3
 800f648:	f7ff fede 	bl	800f408 <_Clear_DrvPar>
			IRQ_Arr[i] = cbk;
 800f64c:	79fb      	ldrb	r3, [r7, #7]
 800f64e:	4a0e      	ldr	r2, [pc, #56]	; (800f688 <Drv_RegisterIRQ_callback+0x70>)
 800f650:	015b      	lsls	r3, r3, #5
 800f652:	4413      	add	r3, r2
 800f654:	461d      	mov	r5, r3
 800f656:	f107 0418 	add.w	r4, r7, #24
 800f65a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f65c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f65e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f662:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			return true;
 800f666:	2301      	movs	r3, #1
 800f668:	e006      	b.n	800f678 <Drv_RegisterIRQ_callback+0x60>
	for(i=0;i<IRQ_MAX;i++)
 800f66a:	79fb      	ldrb	r3, [r7, #7]
 800f66c:	3301      	adds	r3, #1
 800f66e:	71fb      	strb	r3, [r7, #7]
 800f670:	79fb      	ldrb	r3, [r7, #7]
 800f672:	2b13      	cmp	r3, #19
 800f674:	d9db      	bls.n	800f62e <Drv_RegisterIRQ_callback+0x16>
		}
	}
	return false;
 800f676:	2300      	movs	r3, #0
}
 800f678:	4618      	mov	r0, r3
 800f67a:	3708      	adds	r7, #8
 800f67c:	46bd      	mov	sp, r7
 800f67e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800f682:	b004      	add	sp, #16
 800f684:	4770      	bx	lr
 800f686:	bf00      	nop
 800f688:	200006e0 	.word	0x200006e0

0800f68c <UART_IRQ>:
    \param[in]  none
    \param[out] none
    \retval     none
*/
void UART_IRQ(uint32_t _uart, uint8_t _char)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b084      	sub	sp, #16
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
 800f694:	460b      	mov	r3, r1
 800f696:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i=0; i<IRQ_MAX; i++)
 800f698:	2300      	movs	r3, #0
 800f69a:	73fb      	strb	r3, [r7, #15]
 800f69c:	e024      	b.n	800f6e8 <UART_IRQ+0x5c>
	{
		if(IRQ_Arr[i].type == DR_NULL)
 800f69e:	7bfb      	ldrb	r3, [r7, #15]
 800f6a0:	4a15      	ldr	r2, [pc, #84]	; (800f6f8 <UART_IRQ+0x6c>)
 800f6a2:	015b      	lsls	r3, r3, #5
 800f6a4:	4413      	add	r3, r2
 800f6a6:	3304      	adds	r3, #4
 800f6a8:	781b      	ldrb	r3, [r3, #0]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d020      	beq.n	800f6f0 <UART_IRQ+0x64>
		{
			return;
		}

		if(IRQ_Arr[i].type == DR_UART)
 800f6ae:	7bfb      	ldrb	r3, [r7, #15]
 800f6b0:	4a11      	ldr	r2, [pc, #68]	; (800f6f8 <UART_IRQ+0x6c>)
 800f6b2:	015b      	lsls	r3, r3, #5
 800f6b4:	4413      	add	r3, r2
 800f6b6:	3304      	adds	r3, #4
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	2b01      	cmp	r3, #1
 800f6bc:	d111      	bne.n	800f6e2 <UART_IRQ+0x56>
		{
			if(_uart == *(uint32_t*)IRQ_Arr[i].para)
 800f6be:	7bfb      	ldrb	r3, [r7, #15]
 800f6c0:	4a0d      	ldr	r2, [pc, #52]	; (800f6f8 <UART_IRQ+0x6c>)
 800f6c2:	015b      	lsls	r3, r3, #5
 800f6c4:	4413      	add	r3, r2
 800f6c6:	3308      	adds	r3, #8
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	687a      	ldr	r2, [r7, #4]
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d107      	bne.n	800f6e2 <UART_IRQ+0x56>
			{
				IRQ_Arr[i].EventCallback_t(&_char);         // IRQ_Arr[i].para
 800f6d2:	7bfb      	ldrb	r3, [r7, #15]
 800f6d4:	4a08      	ldr	r2, [pc, #32]	; (800f6f8 <UART_IRQ+0x6c>)
 800f6d6:	015b      	lsls	r3, r3, #5
 800f6d8:	4413      	add	r3, r2
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	1cfa      	adds	r2, r7, #3
 800f6de:	4610      	mov	r0, r2
 800f6e0:	4798      	blx	r3
	for(uint8_t i=0; i<IRQ_MAX; i++)
 800f6e2:	7bfb      	ldrb	r3, [r7, #15]
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	73fb      	strb	r3, [r7, #15]
 800f6e8:	7bfb      	ldrb	r3, [r7, #15]
 800f6ea:	2b13      	cmp	r3, #19
 800f6ec:	d9d7      	bls.n	800f69e <UART_IRQ+0x12>
 800f6ee:	e000      	b.n	800f6f2 <UART_IRQ+0x66>
			return;
 800f6f0:	bf00      	nop
			}
		}
	}
}
 800f6f2:	3710      	adds	r7, #16
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	200006e0 	.word	0x200006e0

0800f6fc <write_flash>:
/******************************************************************************/
/***                            Private functions                            **/
/******************************************************************************/
/******************************************************************************/
void write_flash(uint8_t *data)
{
 800f6fc:	b5b0      	push	{r4, r5, r7, lr}
 800f6fe:	b090      	sub	sp, #64	; 0x40
 800f700:	af02      	add	r7, sp, #8
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	466b      	mov	r3, sp
 800f706:	461d      	mov	r5, r3
	volatile uint32_t data_to_FLASH[(strlen((char*)data)/4)	+ (int)((strlen((char*)data) % 4) != 0)];
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f7fa fd61 	bl	800a1d0 <strlen>
 800f70e:	4603      	mov	r3, r0
 800f710:	089c      	lsrs	r4, r3, #2
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f7fa fd5c 	bl	800a1d0 <strlen>
 800f718:	4603      	mov	r3, r0
 800f71a:	f003 0303 	and.w	r3, r3, #3
 800f71e:	2b00      	cmp	r3, #0
 800f720:	bf14      	ite	ne
 800f722:	2301      	movne	r3, #1
 800f724:	2300      	moveq	r3, #0
 800f726:	b2db      	uxtb	r3, r3
 800f728:	441c      	add	r4, r3
 800f72a:	4623      	mov	r3, r4
 800f72c:	3b01      	subs	r3, #1
 800f72e:	637b      	str	r3, [r7, #52]	; 0x34
 800f730:	4620      	mov	r0, r4
 800f732:	f04f 0100 	mov.w	r1, #0
 800f736:	f04f 0200 	mov.w	r2, #0
 800f73a:	f04f 0300 	mov.w	r3, #0
 800f73e:	014b      	lsls	r3, r1, #5
 800f740:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800f744:	0142      	lsls	r2, r0, #5
 800f746:	4620      	mov	r0, r4
 800f748:	f04f 0100 	mov.w	r1, #0
 800f74c:	f04f 0200 	mov.w	r2, #0
 800f750:	f04f 0300 	mov.w	r3, #0
 800f754:	014b      	lsls	r3, r1, #5
 800f756:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800f75a:	0142      	lsls	r2, r0, #5
 800f75c:	00a3      	lsls	r3, r4, #2
 800f75e:	3307      	adds	r3, #7
 800f760:	08db      	lsrs	r3, r3, #3
 800f762:	00db      	lsls	r3, r3, #3
 800f764:	ebad 0d03 	sub.w	sp, sp, r3
 800f768:	ab02      	add	r3, sp, #8
 800f76a:	3303      	adds	r3, #3
 800f76c:	089b      	lsrs	r3, r3, #2
 800f76e:	009b      	lsls	r3, r3, #2
 800f770:	633b      	str	r3, [r7, #48]	; 0x30
	memset((uint8_t*)data_to_FLASH, 0, strlen((char*)data_to_FLASH));
 800f772:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f776:	4618      	mov	r0, r3
 800f778:	f7fa fd2a 	bl	800a1d0 <strlen>
 800f77c:	4603      	mov	r3, r0
 800f77e:	461a      	mov	r2, r3
 800f780:	2100      	movs	r1, #0
 800f782:	4620      	mov	r0, r4
 800f784:	f000 fb6c 	bl	800fe60 <memset>
	strcpy((char*)data_to_FLASH, (char*)data);
 800f788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f78a:	6879      	ldr	r1, [r7, #4]
 800f78c:	4618      	mov	r0, r3
 800f78e:	f000 fbfd 	bl	800ff8c <strcpy>

	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4) + (int)((strlen((char*)data_to_FLASH) % 4) != 0);
 800f792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f794:	4618      	mov	r0, r3
 800f796:	f7fa fd1b 	bl	800a1d0 <strlen>
 800f79a:	4603      	mov	r3, r0
 800f79c:	089c      	lsrs	r4, r3, #2
 800f79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f7fa fd15 	bl	800a1d0 <strlen>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	f003 0303 	and.w	r3, r3, #3
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	bf14      	ite	ne
 800f7b0:	2301      	movne	r3, #1
 800f7b2:	2300      	moveq	r3, #0
 800f7b4:	b2db      	uxtb	r3, r3
 800f7b6:	4423      	add	r3, r4
 800f7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint16_t pages       = (strlen((char*)data)/page_size) + (int)((strlen((char*)data)%page_size) != 0);
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f7fa fd08 	bl	800a1d0 <strlen>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	0adb      	lsrs	r3, r3, #11
 800f7c4:	b29c      	uxth	r4, r3
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f7fa fd02 	bl	800a1d0 <strlen>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	bf14      	ite	ne
 800f7d6:	2301      	movne	r3, #1
 800f7d8:	2300      	moveq	r3, #0
 800f7da:	b2db      	uxtb	r3, r3
 800f7dc:	b29b      	uxth	r3, r3
 800f7de:	4423      	add	r3, r4
 800f7e0:	b29b      	uxth	r3, r3
 800f7e2:	857b      	strh	r3, [r7, #42]	; 0x2a
	LOGA(FLA, "Symbol: {%s} / %d / %d\r\n", data_to_FLASH, data_length, pages);
 800f7e4:	4834      	ldr	r0, [pc, #208]	; (800f8b8 <write_flash+0x1bc>)
 800f7e6:	f000 fb43 	bl	800fe70 <iprintf>
 800f7ea:	bf00      	nop
 800f7ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f0:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800f7f2:	b289      	uxth	r1, r1
 800f7f4:	9101      	str	r1, [sp, #4]
 800f7f6:	9300      	str	r3, [sp, #0]
 800f7f8:	4613      	mov	r3, r2
 800f7fa:	222b      	movs	r2, #43	; 0x2b
 800f7fc:	492f      	ldr	r1, [pc, #188]	; (800f8bc <write_flash+0x1c0>)
 800f7fe:	4830      	ldr	r0, [pc, #192]	; (800f8c0 <write_flash+0x1c4>)
 800f800:	f000 fb36 	bl	800fe70 <iprintf>
 800f804:	482f      	ldr	r0, [pc, #188]	; (800f8c4 <write_flash+0x1c8>)
 800f806:	f000 fb33 	bl	800fe70 <iprintf>
	  /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 800f80a:	f7fb fe27 	bl	800b45c <HAL_FLASH_Unlock>

	  /* Allow Access to option bytes sector */
	  HAL_FLASH_OB_Unlock();
 800f80e:	f7fb fe5b 	bl	800b4c8 <HAL_FLASH_OB_Unlock>

	  /* Fill EraseInit structure*/
	  FLASH_EraseInitTypeDef EraseInitStruct;
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800f812:	2300      	movs	r3, #0
 800f814:	61fb      	str	r3, [r7, #28]
	  EraseInitStruct.PageAddress = FLASH_STORAGE;
 800f816:	4b2c      	ldr	r3, [pc, #176]	; (800f8c8 <write_flash+0x1cc>)
 800f818:	623b      	str	r3, [r7, #32]
	  EraseInitStruct.NbPages = pages;
 800f81a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f81c:	b29b      	uxth	r3, r3
 800f81e:	627b      	str	r3, [r7, #36]	; 0x24
	  uint32_t PageError;

	  volatile uint32_t write_cnt=0, index=0;
 800f820:	2300      	movs	r3, #0
 800f822:	617b      	str	r3, [r7, #20]
 800f824:	2300      	movs	r3, #0
 800f826:	613b      	str	r3, [r7, #16]

	  volatile HAL_StatusTypeDef status;
	  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800f828:	f107 0218 	add.w	r2, r7, #24
 800f82c:	f107 031c 	add.w	r3, r7, #28
 800f830:	4611      	mov	r1, r2
 800f832:	4618      	mov	r0, r3
 800f834:	f7fb ff02 	bl	800b63c <HAL_FLASHEx_Erase>
 800f838:	4603      	mov	r3, r0
 800f83a:	73fb      	strb	r3, [r7, #15]
	  while(index < data_length)
 800f83c:	e02e      	b.n	800f89c <write_flash+0x1a0>
	  {
		  if (status == HAL_OK)
 800f83e:	7bfb      	ldrb	r3, [r7, #15]
 800f840:	b2db      	uxtb	r3, r3
 800f842:	2b00      	cmp	r3, #0
 800f844:	d12a      	bne.n	800f89c <write_flash+0x1a0>
		  {
			  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_STORAGE+write_cnt, data_to_FLASH[index]);
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800f84c:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
 800f850:	693a      	ldr	r2, [r7, #16]
 800f852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f858:	461a      	mov	r2, r3
 800f85a:	f04f 0300 	mov.w	r3, #0
 800f85e:	2002      	movs	r0, #2
 800f860:	f7fb fd8c 	bl	800b37c <HAL_FLASH_Program>
 800f864:	4603      	mov	r3, r0
 800f866:	73fb      	strb	r3, [r7, #15]
			  if(status == HAL_OK)
 800f868:	7bfb      	ldrb	r3, [r7, #15]
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d115      	bne.n	800f89c <write_flash+0x1a0>
			  {
				  LOGA(FLA, "Data: {%c}\r\n", data_to_FLASH[index]);
 800f870:	4811      	ldr	r0, [pc, #68]	; (800f8b8 <write_flash+0x1bc>)
 800f872:	f000 fafd 	bl	800fe70 <iprintf>
 800f876:	bf00      	nop
 800f878:	693a      	ldr	r2, [r7, #16]
 800f87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f87c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f880:	2244      	movs	r2, #68	; 0x44
 800f882:	490e      	ldr	r1, [pc, #56]	; (800f8bc <write_flash+0x1c0>)
 800f884:	4811      	ldr	r0, [pc, #68]	; (800f8cc <write_flash+0x1d0>)
 800f886:	f000 faf3 	bl	800fe70 <iprintf>
 800f88a:	480e      	ldr	r0, [pc, #56]	; (800f8c4 <write_flash+0x1c8>)
 800f88c:	f000 faf0 	bl	800fe70 <iprintf>
				  write_cnt += 4;
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	3304      	adds	r3, #4
 800f894:	617b      	str	r3, [r7, #20]
				  index++;
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	3301      	adds	r3, #1
 800f89a:	613b      	str	r3, [r7, #16]
	  while(index < data_length)
 800f89c:	693a      	ldr	r2, [r7, #16]
 800f89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d3cc      	bcc.n	800f83e <write_flash+0x142>
			  }
		  }
	  }

	  HAL_FLASH_OB_Lock();
 800f8a4:	f7fb fe2c 	bl	800b500 <HAL_FLASH_OB_Lock>
	  HAL_FLASH_Lock();
 800f8a8:	f7fb fdfe 	bl	800b4a8 <HAL_FLASH_Lock>
 800f8ac:	46ad      	mov	sp, r5
}
 800f8ae:	bf00      	nop
 800f8b0:	3738      	adds	r7, #56	; 0x38
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bdb0      	pop	{r4, r5, r7, pc}
 800f8b6:	bf00      	nop
 800f8b8:	08010ee4 	.word	0x08010ee4
 800f8bc:	0801119c 	.word	0x0801119c
 800f8c0:	08010eec 	.word	0x08010eec
 800f8c4:	08010f14 	.word	0x08010f14
 800f8c8:	08009000 	.word	0x08009000
 800f8cc:	08010f1c 	.word	0x08010f1c

0800f8d0 <read_flash>:

void read_flash(uint8_t* data)
{
 800f8d0:	b480      	push	{r7}
 800f8d2:	b085      	sub	sp, #20
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
	volatile uint32_t read_data;
	volatile uint32_t read_cnt=0;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	60bb      	str	r3, [r7, #8]
	do
	{
		read_data = *(uint32_t*)(FLASH_STORAGE + read_cnt);
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800f8e2:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	60fb      	str	r3, [r7, #12]
		if(read_data != 0xFFFFFFFF)
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8f0:	d020      	beq.n	800f934 <read_flash+0x64>
		{
			data[read_cnt] = (uint8_t)read_data;
 800f8f2:	68f9      	ldr	r1, [r7, #12]
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	687a      	ldr	r2, [r7, #4]
 800f8f8:	4413      	add	r3, r2
 800f8fa:	b2ca      	uxtb	r2, r1
 800f8fc:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 1] = (uint8_t)(read_data >> 8);
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	0a19      	lsrs	r1, r3, #8
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	3301      	adds	r3, #1
 800f906:	687a      	ldr	r2, [r7, #4]
 800f908:	4413      	add	r3, r2
 800f90a:	b2ca      	uxtb	r2, r1
 800f90c:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 2] = (uint8_t)(read_data >> 16);
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	0c19      	lsrs	r1, r3, #16
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	3302      	adds	r3, #2
 800f916:	687a      	ldr	r2, [r7, #4]
 800f918:	4413      	add	r3, r2
 800f91a:	b2ca      	uxtb	r2, r1
 800f91c:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 3] = (uint8_t)(read_data >> 24);
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	0e19      	lsrs	r1, r3, #24
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	3303      	adds	r3, #3
 800f926:	687a      	ldr	r2, [r7, #4]
 800f928:	4413      	add	r3, r2
 800f92a:	b2ca      	uxtb	r2, r1
 800f92c:	701a      	strb	r2, [r3, #0]
			read_cnt += 4;
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	3304      	adds	r3, #4
 800f932:	60bb      	str	r3, [r7, #8]
		}
	}while(read_data != 0xFFFFFFFF);
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f93a:	d1cf      	bne.n	800f8dc <read_flash+0xc>
}
 800f93c:	bf00      	nop
 800f93e:	bf00      	nop
 800f940:	3714      	adds	r7, #20
 800f942:	46bd      	mov	sp, r7
 800f944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f948:	4770      	bx	lr
	...

0800f94c <flash_init>:
/******************************************************************************/
/***                            Public functions                             **/
/******************************************************************************/
/******************************************************************************/
void flash_init(void)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	af00      	add	r7, sp, #0
	memset(&FLA_MEMORY, 0x00, sizeof(FLA_MEMORY));
 800f950:	220c      	movs	r2, #12
 800f952:	2100      	movs	r1, #0
 800f954:	4806      	ldr	r0, [pc, #24]	; (800f970 <flash_init+0x24>)
 800f956:	f000 fa83 	bl	800fe60 <memset>
	FLA_MEMORY.init = &flash_init;
 800f95a:	4b05      	ldr	r3, [pc, #20]	; (800f970 <flash_init+0x24>)
 800f95c:	4a05      	ldr	r2, [pc, #20]	; (800f974 <flash_init+0x28>)
 800f95e:	601a      	str	r2, [r3, #0]
	FLA_MEMORY.write = &write_flash;
 800f960:	4b03      	ldr	r3, [pc, #12]	; (800f970 <flash_init+0x24>)
 800f962:	4a05      	ldr	r2, [pc, #20]	; (800f978 <flash_init+0x2c>)
 800f964:	605a      	str	r2, [r3, #4]
	FLA_MEMORY.read = &read_flash;
 800f966:	4b02      	ldr	r3, [pc, #8]	; (800f970 <flash_init+0x24>)
 800f968:	4a04      	ldr	r2, [pc, #16]	; (800f97c <flash_init+0x30>)
 800f96a:	609a      	str	r2, [r3, #8]
}
 800f96c:	bf00      	nop
 800f96e:	bd80      	pop	{r7, pc}
 800f970:	20000960 	.word	0x20000960
 800f974:	0800f94d 	.word	0x0800f94d
 800f978:	0800f6fd 	.word	0x0800f6fd
 800f97c:	0800f8d1 	.word	0x0800f8d1

0800f980 <_help>:
	"** p atcmd <module> : At command testing\r\n"
	//"**   <module> = ec,gps,..\r\n"
	"**   EX: p atcmd ec\r\n"
	"** p atcmd exit\r\n"
};
void _help(type_debug_t _type,void* arg){
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
 800f986:	4603      	mov	r3, r0
 800f988:	6039      	str	r1, [r7, #0]
 800f98a:	71fb      	strb	r3, [r7, #7]
	printf("\r\n%s",help);
 800f98c:	4916      	ldr	r1, [pc, #88]	; (800f9e8 <_help+0x68>)
 800f98e:	4817      	ldr	r0, [pc, #92]	; (800f9ec <_help+0x6c>)
 800f990:	f000 fa6e 	bl	800fe70 <iprintf>
	printf("** Plog commands line: <cmd> on/off \r\n");
 800f994:	4816      	ldr	r0, [pc, #88]	; (800f9f0 <_help+0x70>)
 800f996:	f000 faf1 	bl	800ff7c <puts>
	uint8_t i=0;
 800f99a:	2300      	movs	r3, #0
 800f99c:	73fb      	strb	r3, [r7, #15]
	while(plog_cmd[i].type!=PLEND){
 800f99e:	e012      	b.n	800f9c6 <_help+0x46>
		printf("|-> ");
 800f9a0:	4814      	ldr	r0, [pc, #80]	; (800f9f4 <_help+0x74>)
 800f9a2:	f000 fa65 	bl	800fe70 <iprintf>
		printf("%s\r\n",plog_cmd[i].cmd_txt);
 800f9a6:	7bfa      	ldrb	r2, [r7, #15]
 800f9a8:	4913      	ldr	r1, [pc, #76]	; (800f9f8 <_help+0x78>)
 800f9aa:	4613      	mov	r3, r2
 800f9ac:	005b      	lsls	r3, r3, #1
 800f9ae:	4413      	add	r3, r2
 800f9b0:	009b      	lsls	r3, r3, #2
 800f9b2:	440b      	add	r3, r1
 800f9b4:	3304      	adds	r3, #4
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	4810      	ldr	r0, [pc, #64]	; (800f9fc <_help+0x7c>)
 800f9bc:	f000 fa58 	bl	800fe70 <iprintf>
		i++;
 800f9c0:	7bfb      	ldrb	r3, [r7, #15]
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	73fb      	strb	r3, [r7, #15]
	while(plog_cmd[i].type!=PLEND){
 800f9c6:	7bfa      	ldrb	r2, [r7, #15]
 800f9c8:	490b      	ldr	r1, [pc, #44]	; (800f9f8 <_help+0x78>)
 800f9ca:	4613      	mov	r3, r2
 800f9cc:	005b      	lsls	r3, r3, #1
 800f9ce:	4413      	add	r3, r2
 800f9d0:	009b      	lsls	r3, r3, #2
 800f9d2:	440b      	add	r3, r1
 800f9d4:	781b      	ldrb	r3, [r3, #0]
 800f9d6:	2b17      	cmp	r3, #23
 800f9d8:	d1e2      	bne.n	800f9a0 <_help+0x20>
	}
	printf("******************* (C)HaiLuong-2023 **********************\r\n");
 800f9da:	4809      	ldr	r0, [pc, #36]	; (800fa00 <_help+0x80>)
 800f9dc:	f000 face 	bl	800ff7c <puts>
}
 800f9e0:	bf00      	nop
 800f9e2:	3710      	adds	r7, #16
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	080112a4 	.word	0x080112a4
 800f9ec:	08010ff0 	.word	0x08010ff0
 800f9f0:	08010ff8 	.word	0x08010ff8
 800f9f4:	08011020 	.word	0x08011020
 800f9f8:	080111a8 	.word	0x080111a8
 800f9fc:	08011028 	.word	0x08011028
 800fa00:	08011030 	.word	0x08011030

0800fa04 <_ResetHW>:
void _ResetHW(type_debug_t _type,void* arg){
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b082      	sub	sp, #8
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	6039      	str	r1, [r7, #0]
 800fa0e:	71fb      	strb	r3, [r7, #7]
	printf("Reseting..........\r\n");
 800fa10:	4803      	ldr	r0, [pc, #12]	; (800fa20 <_ResetHW+0x1c>)
 800fa12:	f000 fab3 	bl	800ff7c <puts>
//	DRV_DELAY_MS(500);
//	DRV_Reset(0);
}
 800fa16:	bf00      	nop
 800fa18:	3708      	adds	r7, #8
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	08011070 	.word	0x08011070

0800fa24 <_Simulate>:

void _Simulate(type_debug_t _type,void* arg){
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b084      	sub	sp, #16
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	6039      	str	r1, [r7, #0]
 800fa2e:	71fb      	strb	r3, [r7, #7]
	char *_arr = (char*)arg;
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	60fb      	str	r3, [r7, #12]
	Passing(_type,_arr);
 800fa34:	4b04      	ldr	r3, [pc, #16]	; (800fa48 <_Simulate+0x24>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	79fa      	ldrb	r2, [r7, #7]
 800fa3a:	68f9      	ldr	r1, [r7, #12]
 800fa3c:	4610      	mov	r0, r2
 800fa3e:	4798      	blx	r3
}
 800fa40:	bf00      	nop
 800fa42:	3710      	adds	r7, #16
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	20000a00 	.word	0x20000a00

0800fa4c <_ATCmdTest>:

void _ATCmdTest(type_debug_t _type,void * arg){
 800fa4c:	b480      	push	{r7}
 800fa4e:	b085      	sub	sp, #20
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	4603      	mov	r3, r0
 800fa54:	6039      	str	r1, [r7, #0]
 800fa56:	71fb      	strb	r3, [r7, #7]
	char *_arr = (char*)arg;
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	60fb      	str	r3, [r7, #12]
			printf("EXIT EC20xx at-cmd testing mode!\r\n");
			DirectMode = false;
		}
		#endif
//	}
}
 800fa5c:	bf00      	nop
 800fa5e:	3714      	adds	r7, #20
 800fa60:	46bd      	mov	sp, r7
 800fa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa66:	4770      	bx	lr

0800fa68 <_set_plog>:

void _set_plog (type_debug_t _type,void * arg){
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b086      	sub	sp, #24
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	4603      	mov	r3, r0
 800fa70:	6039      	str	r1, [r7, #0]
 800fa72:	71fb      	strb	r3, [r7, #7]
	uint32_t buf = 0x00000000U;
 800fa74:	2300      	movs	r3, #0
 800fa76:	617b      	str	r3, [r7, #20]
	char *_arr = (char*)arg;
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	613b      	str	r3, [r7, #16]
	bool _mode = bool_dbg_fnc(_arr);
 800fa7c:	6938      	ldr	r0, [r7, #16]
 800fa7e:	f000 f8a7 	bl	800fbd0 <bool_dbg_fnc>
 800fa82:	4603      	mov	r3, r0
 800fa84:	73fb      	strb	r3, [r7, #15]
	if(_mode == true) buf= 0xFFFFFFFFU;
 800fa86:	7bfb      	ldrb	r3, [r7, #15]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d002      	beq.n	800fa92 <_set_plog+0x2a>
 800fa8c:	f04f 33ff 	mov.w	r3, #4294967295
 800fa90:	617b      	str	r3, [r7, #20]
	switch ((uint8_t)_type)
 800fa92:	79fb      	ldrb	r3, [r7, #7]
 800fa94:	2b0e      	cmp	r3, #14
 800fa96:	d002      	beq.n	800fa9e <_set_plog+0x36>
 800fa98:	2b0f      	cmp	r3, #15
 800fa9a:	d005      	beq.n	800faa8 <_set_plog+0x40>
 800fa9c:	e009      	b.n	800fab2 <_set_plog+0x4a>
	{
		case ALL: {
			FmDebug = (buf & PL_ALL);
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	b29a      	uxth	r2, r3
 800faa2:	4b17      	ldr	r3, [pc, #92]	; (800fb00 <_set_plog+0x98>)
 800faa4:	801a      	strh	r2, [r3, #0]
			break;
 800faa6:	e026      	b.n	800faf6 <_set_plog+0x8e>
		}
		case DEFAULT: {
			FmDebug = PL_DEFAULT;
 800faa8:	4b15      	ldr	r3, [pc, #84]	; (800fb00 <_set_plog+0x98>)
 800faaa:	f243 12c4 	movw	r2, #12740	; 0x31c4
 800faae:	801a      	strh	r2, [r3, #0]
			break;
 800fab0:	e021      	b.n	800faf6 <_set_plog+0x8e>
		}
		
		default: 
		{
			if(_mode == false) FmDebug = FmDebug & (~BIT(_type));
 800fab2:	7bfb      	ldrb	r3, [r7, #15]
 800fab4:	f083 0301 	eor.w	r3, r3, #1
 800fab8:	b2db      	uxtb	r3, r3
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d00e      	beq.n	800fadc <_set_plog+0x74>
 800fabe:	79fb      	ldrb	r3, [r7, #7]
 800fac0:	2201      	movs	r2, #1
 800fac2:	fa02 f303 	lsl.w	r3, r2, r3
 800fac6:	b29b      	uxth	r3, r3
 800fac8:	43db      	mvns	r3, r3
 800faca:	b29a      	uxth	r2, r3
 800facc:	4b0c      	ldr	r3, [pc, #48]	; (800fb00 <_set_plog+0x98>)
 800face:	881b      	ldrh	r3, [r3, #0]
 800fad0:	b29b      	uxth	r3, r3
 800fad2:	4013      	ands	r3, r2
 800fad4:	b29a      	uxth	r2, r3
 800fad6:	4b0a      	ldr	r3, [pc, #40]	; (800fb00 <_set_plog+0x98>)
 800fad8:	801a      	strh	r2, [r3, #0]
			else FmDebug = FmDebug | BIT(_type);
			break;
 800fada:	e00b      	b.n	800faf4 <_set_plog+0x8c>
			else FmDebug = FmDebug | BIT(_type);
 800fadc:	79fb      	ldrb	r3, [r7, #7]
 800fade:	2201      	movs	r2, #1
 800fae0:	fa02 f303 	lsl.w	r3, r2, r3
 800fae4:	b29a      	uxth	r2, r3
 800fae6:	4b06      	ldr	r3, [pc, #24]	; (800fb00 <_set_plog+0x98>)
 800fae8:	881b      	ldrh	r3, [r3, #0]
 800faea:	b29b      	uxth	r3, r3
 800faec:	4313      	orrs	r3, r2
 800faee:	b29a      	uxth	r2, r3
 800faf0:	4b03      	ldr	r3, [pc, #12]	; (800fb00 <_set_plog+0x98>)
 800faf2:	801a      	strh	r2, [r3, #0]
			break;
 800faf4:	bf00      	nop
		}
	};
	//printf("fmDBG("PRINTF_BINARY_PATTERN_INT16 ")\r\n",PRINTF_BYTE_TO_BINARY_INT16(FmDebug));
}
 800faf6:	bf00      	nop
 800faf8:	3718      	adds	r7, #24
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
 800fafe:	bf00      	nop
 800fb00:	2000000a 	.word	0x2000000a

0800fb04 <_plog_parser>:
/* 			p|space|TYPE_DBG|space|MODE|\r\n| */
/*	ex: p drv on\r\n : turn on driver debug
*				p drv off\r\n : turn off driver debug
*/
void _plog_parser(char *_arr,uint8_t _arr_sz)
{
 800fb04:	b5b0      	push	{r4, r5, r7, lr}
 800fb06:	b084      	sub	sp, #16
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	460b      	mov	r3, r1
 800fb0e:	70fb      	strb	r3, [r7, #3]
	uint8_t i =0;
 800fb10:	2300      	movs	r3, #0
 800fb12:	73fb      	strb	r3, [r7, #15]
	printf("%s",_arr);
 800fb14:	6879      	ldr	r1, [r7, #4]
 800fb16:	482c      	ldr	r0, [pc, #176]	; (800fbc8 <_plog_parser+0xc4>)
 800fb18:	f000 f9aa 	bl	800fe70 <iprintf>
	while(PLEND != plog_cmd[i].type)
 800fb1c:	e044      	b.n	800fba8 <_plog_parser+0xa4>
	{
		if (strncmp (plog_cmd[i].cmd_txt,_arr,strlen(plog_cmd[i].cmd_txt)) == 0)
 800fb1e:	7bfa      	ldrb	r2, [r7, #15]
 800fb20:	492a      	ldr	r1, [pc, #168]	; (800fbcc <_plog_parser+0xc8>)
 800fb22:	4613      	mov	r3, r2
 800fb24:	005b      	lsls	r3, r3, #1
 800fb26:	4413      	add	r3, r2
 800fb28:	009b      	lsls	r3, r3, #2
 800fb2a:	440b      	add	r3, r1
 800fb2c:	3304      	adds	r3, #4
 800fb2e:	681c      	ldr	r4, [r3, #0]
 800fb30:	7bfa      	ldrb	r2, [r7, #15]
 800fb32:	4926      	ldr	r1, [pc, #152]	; (800fbcc <_plog_parser+0xc8>)
 800fb34:	4613      	mov	r3, r2
 800fb36:	005b      	lsls	r3, r3, #1
 800fb38:	4413      	add	r3, r2
 800fb3a:	009b      	lsls	r3, r3, #2
 800fb3c:	440b      	add	r3, r1
 800fb3e:	3304      	adds	r3, #4
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7fa fb44 	bl	800a1d0 <strlen>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	6879      	ldr	r1, [r7, #4]
 800fb4e:	4620      	mov	r0, r4
 800fb50:	f000 fa24 	bl	800ff9c <strncmp>
 800fb54:	4603      	mov	r3, r0
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d123      	bne.n	800fba2 <_plog_parser+0x9e>
		{
			plog_cmd[i].Cbk_fnc(plog_cmd[i].type,&_arr[strlen(plog_cmd[i].cmd_txt)+1]);
 800fb5a:	7bfa      	ldrb	r2, [r7, #15]
 800fb5c:	491b      	ldr	r1, [pc, #108]	; (800fbcc <_plog_parser+0xc8>)
 800fb5e:	4613      	mov	r3, r2
 800fb60:	005b      	lsls	r3, r3, #1
 800fb62:	4413      	add	r3, r2
 800fb64:	009b      	lsls	r3, r3, #2
 800fb66:	440b      	add	r3, r1
 800fb68:	3308      	adds	r3, #8
 800fb6a:	681c      	ldr	r4, [r3, #0]
 800fb6c:	7bfa      	ldrb	r2, [r7, #15]
 800fb6e:	4917      	ldr	r1, [pc, #92]	; (800fbcc <_plog_parser+0xc8>)
 800fb70:	4613      	mov	r3, r2
 800fb72:	005b      	lsls	r3, r3, #1
 800fb74:	4413      	add	r3, r2
 800fb76:	009b      	lsls	r3, r3, #2
 800fb78:	440b      	add	r3, r1
 800fb7a:	781d      	ldrb	r5, [r3, #0]
 800fb7c:	7bfa      	ldrb	r2, [r7, #15]
 800fb7e:	4913      	ldr	r1, [pc, #76]	; (800fbcc <_plog_parser+0xc8>)
 800fb80:	4613      	mov	r3, r2
 800fb82:	005b      	lsls	r3, r3, #1
 800fb84:	4413      	add	r3, r2
 800fb86:	009b      	lsls	r3, r3, #2
 800fb88:	440b      	add	r3, r1
 800fb8a:	3304      	adds	r3, #4
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7fa fb1e 	bl	800a1d0 <strlen>
 800fb94:	4603      	mov	r3, r0
 800fb96:	3301      	adds	r3, #1
 800fb98:	687a      	ldr	r2, [r7, #4]
 800fb9a:	4413      	add	r3, r2
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	4628      	mov	r0, r5
 800fba0:	47a0      	blx	r4
		}
		i++;
 800fba2:	7bfb      	ldrb	r3, [r7, #15]
 800fba4:	3301      	adds	r3, #1
 800fba6:	73fb      	strb	r3, [r7, #15]
	while(PLEND != plog_cmd[i].type)
 800fba8:	7bfa      	ldrb	r2, [r7, #15]
 800fbaa:	4908      	ldr	r1, [pc, #32]	; (800fbcc <_plog_parser+0xc8>)
 800fbac:	4613      	mov	r3, r2
 800fbae:	005b      	lsls	r3, r3, #1
 800fbb0:	4413      	add	r3, r2
 800fbb2:	009b      	lsls	r3, r3, #2
 800fbb4:	440b      	add	r3, r1
 800fbb6:	781b      	ldrb	r3, [r3, #0]
 800fbb8:	2b17      	cmp	r3, #23
 800fbba:	d1b0      	bne.n	800fb1e <_plog_parser+0x1a>
	};
}
 800fbbc:	bf00      	nop
 800fbbe:	bf00      	nop
 800fbc0:	3710      	adds	r7, #16
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bdb0      	pop	{r4, r5, r7, pc}
 800fbc6:	bf00      	nop
 800fbc8:	08011084 	.word	0x08011084
 800fbcc:	080111a8 	.word	0x080111a8

0800fbd0 <bool_dbg_fnc>:
/******************************************************************************/
/***                            Private functions                            **/
/******************************************************************************/
/******************************************************************************/

bool bool_dbg_fnc(char *_input){
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b082      	sub	sp, #8
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
	if(strncmp(_input,"on",2) == 0) return true;
 800fbd8:	2202      	movs	r2, #2
 800fbda:	4907      	ldr	r1, [pc, #28]	; (800fbf8 <bool_dbg_fnc+0x28>)
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f000 f9dd 	bl	800ff9c <strncmp>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d101      	bne.n	800fbec <bool_dbg_fnc+0x1c>
 800fbe8:	2301      	movs	r3, #1
 800fbea:	e000      	b.n	800fbee <bool_dbg_fnc+0x1e>
//	else if(strncmp(_input,"off",3) == 0) 
	return false;
 800fbec:	2300      	movs	r3, #0
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3708      	adds	r7, #8
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}
 800fbf6:	bf00      	nop
 800fbf8:	08011088 	.word	0x08011088

0800fbfc <PLOG_Init>:
/******************************************************************************/
/******************************************************************************/
/******************************************************************************/

void PLOG_Init(void)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	af00      	add	r7, sp, #0
	memset(&PLOG, 0x00, sizeof(PLOG));
 800fc00:	2290      	movs	r2, #144	; 0x90
 800fc02:	2100      	movs	r1, #0
 800fc04:	4806      	ldr	r0, [pc, #24]	; (800fc20 <PLOG_Init+0x24>)
 800fc06:	f000 f92b 	bl	800fe60 <memset>
	PLOG.Init = &PLOG_Init;
 800fc0a:	4b05      	ldr	r3, [pc, #20]	; (800fc20 <PLOG_Init+0x24>)
 800fc0c:	4a05      	ldr	r2, [pc, #20]	; (800fc24 <PLOG_Init+0x28>)
 800fc0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	PLOG.plog_parser = &_plog_parser;
 800fc12:	4b03      	ldr	r3, [pc, #12]	; (800fc20 <PLOG_Init+0x24>)
 800fc14:	4a04      	ldr	r2, [pc, #16]	; (800fc28 <PLOG_Init+0x2c>)
 800fc16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
////	plog_cbk.EventCallback_t = &Plog_callback;
//plog_cbk.EventCallback_t = &Plog_timeout_callback;
	
//	Drv_RegisterUART(115200,PLOG.usart.peri.uart.rcu_uart,PLOG.usart.peri.uart.tx,PLOG.usart.peri.uart.rx);
//	Drv_RegisterIRQ_callback(plog_cbk);
}
 800fc1a:	bf00      	nop
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	20000970 	.word	0x20000970
 800fc24:	0800fbfd 	.word	0x0800fbfd
 800fc28:	0800fb05 	.word	0x0800fb05

0800fc2c <test_cbk>:
/******************************************************************************/
/***                      Processing functions Callback                      **/
/******************************************************************************/
/******************************************************************************/
void test_cbk(void * arg)                 // callback to period timer
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b082      	sub	sp, #8
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
	static uint32_t check_counter = 0;
	if(check_counter != 0)
 800fc34:	4b12      	ldr	r3, [pc, #72]	; (800fc80 <test_cbk+0x54>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d017      	beq.n	800fc6c <test_cbk+0x40>
	{
		LOGA(INF, "Call timer: %ld\r\n", DRV_GETTICK() - check_counter);
 800fc3c:	4811      	ldr	r0, [pc, #68]	; (800fc84 <test_cbk+0x58>)
 800fc3e:	f000 f917 	bl	800fe70 <iprintf>
 800fc42:	bf00      	nop
 800fc44:	f7fb fa06 	bl	800b054 <HAL_GetTick>
 800fc48:	4602      	mov	r2, r0
 800fc4a:	4b0d      	ldr	r3, [pc, #52]	; (800fc80 <test_cbk+0x54>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	1ad3      	subs	r3, r2, r3
 800fc50:	222e      	movs	r2, #46	; 0x2e
 800fc52:	490d      	ldr	r1, [pc, #52]	; (800fc88 <test_cbk+0x5c>)
 800fc54:	480d      	ldr	r0, [pc, #52]	; (800fc8c <test_cbk+0x60>)
 800fc56:	f000 f90b 	bl	800fe70 <iprintf>
 800fc5a:	480d      	ldr	r0, [pc, #52]	; (800fc90 <test_cbk+0x64>)
 800fc5c:	f000 f908 	bl	800fe70 <iprintf>
		check_counter = DRV_GETTICK();
 800fc60:	f7fb f9f8 	bl	800b054 <HAL_GetTick>
 800fc64:	4603      	mov	r3, r0
 800fc66:	4a06      	ldr	r2, [pc, #24]	; (800fc80 <test_cbk+0x54>)
 800fc68:	6013      	str	r3, [r2, #0]
	}
	else
	{
		check_counter = DRV_GETTICK();
	}
}
 800fc6a:	e004      	b.n	800fc76 <test_cbk+0x4a>
		check_counter = DRV_GETTICK();
 800fc6c:	f7fb f9f2 	bl	800b054 <HAL_GetTick>
 800fc70:	4603      	mov	r3, r0
 800fc72:	4a03      	ldr	r2, [pc, #12]	; (800fc80 <test_cbk+0x54>)
 800fc74:	6013      	str	r3, [r2, #0]
}
 800fc76:	bf00      	nop
 800fc78:	3708      	adds	r7, #8
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
 800fc7e:	bf00      	nop
 800fc80:	20000094 	.word	0x20000094
 800fc84:	080110e4 	.word	0x080110e4
 800fc88:	080114cc 	.word	0x080114cc
 800fc8c:	080110ec 	.word	0x080110ec
 800fc90:	0801110c 	.word	0x0801110c

0800fc94 <test_uart_cbk>:

void test_uart_cbk(void * arg)         // callback to usart interrupt
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
	if(TEST_CBK.usart.rx.idx < sizeof(TEST_CBK.usart.rx.rcv) - 1)
 800fc9c:	4b0e      	ldr	r3, [pc, #56]	; (800fcd8 <test_uart_cbk+0x44>)
 800fc9e:	8b1b      	ldrh	r3, [r3, #24]
 800fca0:	2b62      	cmp	r3, #98	; 0x62
 800fca2:	d80b      	bhi.n	800fcbc <test_uart_cbk+0x28>
	{
		TEST_CBK.usart.rx.rcv[TEST_CBK.usart.rx.idx++] = *(uint8_t *) arg;
 800fca4:	4b0c      	ldr	r3, [pc, #48]	; (800fcd8 <test_uart_cbk+0x44>)
 800fca6:	8b1b      	ldrh	r3, [r3, #24]
 800fca8:	1c5a      	adds	r2, r3, #1
 800fcaa:	b291      	uxth	r1, r2
 800fcac:	4a0a      	ldr	r2, [pc, #40]	; (800fcd8 <test_uart_cbk+0x44>)
 800fcae:	8311      	strh	r1, [r2, #24]
 800fcb0:	4619      	mov	r1, r3
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	781a      	ldrb	r2, [r3, #0]
 800fcb6:	4b08      	ldr	r3, [pc, #32]	; (800fcd8 <test_uart_cbk+0x44>)
 800fcb8:	440b      	add	r3, r1
 800fcba:	769a      	strb	r2, [r3, #26]
	}
	TEST_CBK.usart.rx.rxtime = DRV_GETTICK();
 800fcbc:	f7fb f9ca 	bl	800b054 <HAL_GetTick>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	f04f 0300 	mov.w	r3, #0
 800fcc8:	4903      	ldr	r1, [pc, #12]	; (800fcd8 <test_uart_cbk+0x44>)
 800fcca:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
}
 800fcce:	bf00      	nop
 800fcd0:	3708      	adds	r7, #8
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	20000a08 	.word	0x20000a08

0800fcdc <run_test_callback>:
/******************************************************************************/
/***                            MainRun functions                            **/
/******************************************************************************/
/******************************************************************************/
void run_test_callback(void)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	af00      	add	r7, sp, #0
	if(TEST_CBK.usart.rx.idx > 1 && abs((int)(DRV_GETTICK() - TEST_CBK.usart.rx.rxtime)) > RX_TIMEOUT)
 800fce0:	4b18      	ldr	r3, [pc, #96]	; (800fd44 <run_test_callback+0x68>)
 800fce2:	8b1b      	ldrh	r3, [r3, #24]
 800fce4:	2b01      	cmp	r3, #1
 800fce6:	d92a      	bls.n	800fd3e <run_test_callback+0x62>
 800fce8:	f7fb f9b4 	bl	800b054 <HAL_GetTick>
 800fcec:	4601      	mov	r1, r0
 800fcee:	4b15      	ldr	r3, [pc, #84]	; (800fd44 <run_test_callback+0x68>)
 800fcf0:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800fcf4:	4613      	mov	r3, r2
 800fcf6:	1acb      	subs	r3, r1, r3
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	bfb8      	it	lt
 800fcfc:	425b      	neglt	r3, r3
 800fcfe:	2b96      	cmp	r3, #150	; 0x96
 800fd00:	dd1d      	ble.n	800fd3e <run_test_callback+0x62>
	{

		LOGA(GPS, "Data: %s\r\n", TEST_CBK.usart.rx.rcv);
 800fd02:	4811      	ldr	r0, [pc, #68]	; (800fd48 <run_test_callback+0x6c>)
 800fd04:	f000 f8b4 	bl	800fe70 <iprintf>
 800fd08:	bf00      	nop
 800fd0a:	4b10      	ldr	r3, [pc, #64]	; (800fd4c <run_test_callback+0x70>)
 800fd0c:	2249      	movs	r2, #73	; 0x49
 800fd0e:	4910      	ldr	r1, [pc, #64]	; (800fd50 <run_test_callback+0x74>)
 800fd10:	4810      	ldr	r0, [pc, #64]	; (800fd54 <run_test_callback+0x78>)
 800fd12:	f000 f8ad 	bl	800fe70 <iprintf>
 800fd16:	4810      	ldr	r0, [pc, #64]	; (800fd58 <run_test_callback+0x7c>)
 800fd18:	f000 f8aa 	bl	800fe70 <iprintf>
		PLOG.plog_parser((char* )TEST_CBK.usart.rx.rcv, TEST_CBK.usart.rx.idx);
 800fd1c:	4b0f      	ldr	r3, [pc, #60]	; (800fd5c <run_test_callback+0x80>)
 800fd1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd22:	4a08      	ldr	r2, [pc, #32]	; (800fd44 <run_test_callback+0x68>)
 800fd24:	8b12      	ldrh	r2, [r2, #24]
 800fd26:	b2d2      	uxtb	r2, r2
 800fd28:	4611      	mov	r1, r2
 800fd2a:	4808      	ldr	r0, [pc, #32]	; (800fd4c <run_test_callback+0x70>)
 800fd2c:	4798      	blx	r3
		memset(&TEST_CBK.usart.rx.rcv, 0x00, sizeof(TEST_CBK.usart.rx.rcv));
 800fd2e:	2264      	movs	r2, #100	; 0x64
 800fd30:	2100      	movs	r1, #0
 800fd32:	4806      	ldr	r0, [pc, #24]	; (800fd4c <run_test_callback+0x70>)
 800fd34:	f000 f894 	bl	800fe60 <memset>
		TEST_CBK.usart.rx.idx = 0;
 800fd38:	4b02      	ldr	r3, [pc, #8]	; (800fd44 <run_test_callback+0x68>)
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	831a      	strh	r2, [r3, #24]
	}
}
 800fd3e:	bf00      	nop
 800fd40:	bd80      	pop	{r7, pc}
 800fd42:	bf00      	nop
 800fd44:	20000a08 	.word	0x20000a08
 800fd48:	08011114 	.word	0x08011114
 800fd4c:	20000a22 	.word	0x20000a22
 800fd50:	080114d8 	.word	0x080114d8
 800fd54:	0801111c 	.word	0x0801111c
 800fd58:	0801110c 	.word	0x0801110c
 800fd5c:	20000970 	.word	0x20000970

0800fd60 <init_test_callback>:
/******************************************************************************/
/***                            Public functions                             **/
/******************************************************************************/
/******************************************************************************/
void init_test_callback(void)
{
 800fd60:	b590      	push	{r4, r7, lr}
 800fd62:	b095      	sub	sp, #84	; 0x54
 800fd64:	af04      	add	r7, sp, #16
	memset(&TEST_CBK, 0x00, sizeof(TEST_CBK));
 800fd66:	2298      	movs	r2, #152	; 0x98
 800fd68:	2100      	movs	r1, #0
 800fd6a:	4821      	ldr	r0, [pc, #132]	; (800fdf0 <init_test_callback+0x90>)
 800fd6c:	f000 f878 	bl	800fe60 <memset>

	Cblk_parameter_t test_callback;

	TEST_CBK.tim.time_refesh = 6000;
 800fd70:	4b1f      	ldr	r3, [pc, #124]	; (800fdf0 <init_test_callback+0x90>)
 800fd72:	f241 7270 	movw	r2, #6000	; 0x1770
 800fd76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	_Clear_DrvPar(&test_callback);
 800fd7a:	f107 0320 	add.w	r3, r7, #32
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f7ff fb42 	bl	800f408 <_Clear_DrvPar>
	test_callback.type = DR_TIMER;
 800fd84:	2305      	movs	r3, #5
 800fd86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	test_callback.para = &TEST_CBK.tim.time_refesh;
 800fd8a:	4b1a      	ldr	r3, [pc, #104]	; (800fdf4 <init_test_callback+0x94>)
 800fd8c:	62bb      	str	r3, [r7, #40]	; 0x28
	test_callback.EventCallback_t = &test_cbk;
 800fd8e:	4b1a      	ldr	r3, [pc, #104]	; (800fdf8 <init_test_callback+0x98>)
 800fd90:	623b      	str	r3, [r7, #32]
	Drv_RegisterIRQ_callback(test_callback);
 800fd92:	466c      	mov	r4, sp
 800fd94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fd98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fd9e:	f107 0320 	add.w	r3, r7, #32
 800fda2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fda4:	f7ff fc38 	bl	800f618 <Drv_RegisterIRQ_callback>




	Cblk_parameter_t test_uart;
	TEST_CBK.usart.peri.uart.rcu_uart = RCU_USART1;
 800fda8:	4b11      	ldr	r3, [pc, #68]	; (800fdf0 <init_test_callback+0x90>)
 800fdaa:	4a14      	ldr	r2, [pc, #80]	; (800fdfc <init_test_callback+0x9c>)
 800fdac:	601a      	str	r2, [r3, #0]

	_Clear_DrvPar(&test_uart);
 800fdae:	463b      	mov	r3, r7
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7ff fb29 	bl	800f408 <_Clear_DrvPar>
	test_uart.type = DR_UART;
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	713b      	strb	r3, [r7, #4]
	test_uart.para = &TEST_CBK.usart.peri.uart.rcu_uart;
 800fdba:	4b0d      	ldr	r3, [pc, #52]	; (800fdf0 <init_test_callback+0x90>)
 800fdbc:	60bb      	str	r3, [r7, #8]
	test_uart.EventCallback_t = &test_uart_cbk;
 800fdbe:	4b10      	ldr	r3, [pc, #64]	; (800fe00 <init_test_callback+0xa0>)
 800fdc0:	603b      	str	r3, [r7, #0]
	Drv_RegisterIRQ_callback(test_uart);
 800fdc2:	466c      	mov	r4, sp
 800fdc4:	f107 0310 	add.w	r3, r7, #16
 800fdc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fdca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fdce:	463b      	mov	r3, r7
 800fdd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fdd2:	f7ff fc21 	bl	800f618 <Drv_RegisterIRQ_callback>

	TEST_CBK.init = &init_test_callback;
 800fdd6:	4b06      	ldr	r3, [pc, #24]	; (800fdf0 <init_test_callback+0x90>)
 800fdd8:	4a0a      	ldr	r2, [pc, #40]	; (800fe04 <init_test_callback+0xa4>)
 800fdda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	TEST_CBK.run = &run_test_callback;
 800fdde:	4b04      	ldr	r3, [pc, #16]	; (800fdf0 <init_test_callback+0x90>)
 800fde0:	4a09      	ldr	r2, [pc, #36]	; (800fe08 <init_test_callback+0xa8>)
 800fde2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 800fde6:	bf00      	nop
 800fde8:	3744      	adds	r7, #68	; 0x44
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd90      	pop	{r4, r7, pc}
 800fdee:	bf00      	nop
 800fdf0:	20000a08 	.word	0x20000a08
 800fdf4:	20000a90 	.word	0x20000a90
 800fdf8:	0800fc2d 	.word	0x0800fc2d
 800fdfc:	40013800 	.word	0x40013800
 800fe00:	0800fc95 	.word	0x0800fc95
 800fe04:	0800fd61 	.word	0x0800fd61
 800fe08:	0800fcdd 	.word	0x0800fcdd

0800fe0c <__errno>:
 800fe0c:	4b01      	ldr	r3, [pc, #4]	; (800fe14 <__errno+0x8>)
 800fe0e:	6818      	ldr	r0, [r3, #0]
 800fe10:	4770      	bx	lr
 800fe12:	bf00      	nop
 800fe14:	2000000c 	.word	0x2000000c

0800fe18 <__libc_init_array>:
 800fe18:	b570      	push	{r4, r5, r6, lr}
 800fe1a:	4d0d      	ldr	r5, [pc, #52]	; (800fe50 <__libc_init_array+0x38>)
 800fe1c:	4c0d      	ldr	r4, [pc, #52]	; (800fe54 <__libc_init_array+0x3c>)
 800fe1e:	1b64      	subs	r4, r4, r5
 800fe20:	10a4      	asrs	r4, r4, #2
 800fe22:	2600      	movs	r6, #0
 800fe24:	42a6      	cmp	r6, r4
 800fe26:	d109      	bne.n	800fe3c <__libc_init_array+0x24>
 800fe28:	4d0b      	ldr	r5, [pc, #44]	; (800fe58 <__libc_init_array+0x40>)
 800fe2a:	4c0c      	ldr	r4, [pc, #48]	; (800fe5c <__libc_init_array+0x44>)
 800fe2c:	f001 f806 	bl	8010e3c <_init>
 800fe30:	1b64      	subs	r4, r4, r5
 800fe32:	10a4      	asrs	r4, r4, #2
 800fe34:	2600      	movs	r6, #0
 800fe36:	42a6      	cmp	r6, r4
 800fe38:	d105      	bne.n	800fe46 <__libc_init_array+0x2e>
 800fe3a:	bd70      	pop	{r4, r5, r6, pc}
 800fe3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe40:	4798      	blx	r3
 800fe42:	3601      	adds	r6, #1
 800fe44:	e7ee      	b.n	800fe24 <__libc_init_array+0xc>
 800fe46:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe4a:	4798      	blx	r3
 800fe4c:	3601      	adds	r6, #1
 800fe4e:	e7f2      	b.n	800fe36 <__libc_init_array+0x1e>
 800fe50:	08011584 	.word	0x08011584
 800fe54:	08011584 	.word	0x08011584
 800fe58:	08011584 	.word	0x08011584
 800fe5c:	08011588 	.word	0x08011588

0800fe60 <memset>:
 800fe60:	4402      	add	r2, r0
 800fe62:	4603      	mov	r3, r0
 800fe64:	4293      	cmp	r3, r2
 800fe66:	d100      	bne.n	800fe6a <memset+0xa>
 800fe68:	4770      	bx	lr
 800fe6a:	f803 1b01 	strb.w	r1, [r3], #1
 800fe6e:	e7f9      	b.n	800fe64 <memset+0x4>

0800fe70 <iprintf>:
 800fe70:	b40f      	push	{r0, r1, r2, r3}
 800fe72:	4b0a      	ldr	r3, [pc, #40]	; (800fe9c <iprintf+0x2c>)
 800fe74:	b513      	push	{r0, r1, r4, lr}
 800fe76:	681c      	ldr	r4, [r3, #0]
 800fe78:	b124      	cbz	r4, 800fe84 <iprintf+0x14>
 800fe7a:	69a3      	ldr	r3, [r4, #24]
 800fe7c:	b913      	cbnz	r3, 800fe84 <iprintf+0x14>
 800fe7e:	4620      	mov	r0, r4
 800fe80:	f000 fa78 	bl	8010374 <__sinit>
 800fe84:	ab05      	add	r3, sp, #20
 800fe86:	9a04      	ldr	r2, [sp, #16]
 800fe88:	68a1      	ldr	r1, [r4, #8]
 800fe8a:	9301      	str	r3, [sp, #4]
 800fe8c:	4620      	mov	r0, r4
 800fe8e:	f000 fc49 	bl	8010724 <_vfiprintf_r>
 800fe92:	b002      	add	sp, #8
 800fe94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe98:	b004      	add	sp, #16
 800fe9a:	4770      	bx	lr
 800fe9c:	2000000c 	.word	0x2000000c

0800fea0 <_puts_r>:
 800fea0:	b570      	push	{r4, r5, r6, lr}
 800fea2:	460e      	mov	r6, r1
 800fea4:	4605      	mov	r5, r0
 800fea6:	b118      	cbz	r0, 800feb0 <_puts_r+0x10>
 800fea8:	6983      	ldr	r3, [r0, #24]
 800feaa:	b90b      	cbnz	r3, 800feb0 <_puts_r+0x10>
 800feac:	f000 fa62 	bl	8010374 <__sinit>
 800feb0:	69ab      	ldr	r3, [r5, #24]
 800feb2:	68ac      	ldr	r4, [r5, #8]
 800feb4:	b913      	cbnz	r3, 800febc <_puts_r+0x1c>
 800feb6:	4628      	mov	r0, r5
 800feb8:	f000 fa5c 	bl	8010374 <__sinit>
 800febc:	4b2c      	ldr	r3, [pc, #176]	; (800ff70 <_puts_r+0xd0>)
 800febe:	429c      	cmp	r4, r3
 800fec0:	d120      	bne.n	800ff04 <_puts_r+0x64>
 800fec2:	686c      	ldr	r4, [r5, #4]
 800fec4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fec6:	07db      	lsls	r3, r3, #31
 800fec8:	d405      	bmi.n	800fed6 <_puts_r+0x36>
 800feca:	89a3      	ldrh	r3, [r4, #12]
 800fecc:	0598      	lsls	r0, r3, #22
 800fece:	d402      	bmi.n	800fed6 <_puts_r+0x36>
 800fed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fed2:	f000 faed 	bl	80104b0 <__retarget_lock_acquire_recursive>
 800fed6:	89a3      	ldrh	r3, [r4, #12]
 800fed8:	0719      	lsls	r1, r3, #28
 800feda:	d51d      	bpl.n	800ff18 <_puts_r+0x78>
 800fedc:	6923      	ldr	r3, [r4, #16]
 800fede:	b1db      	cbz	r3, 800ff18 <_puts_r+0x78>
 800fee0:	3e01      	subs	r6, #1
 800fee2:	68a3      	ldr	r3, [r4, #8]
 800fee4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fee8:	3b01      	subs	r3, #1
 800feea:	60a3      	str	r3, [r4, #8]
 800feec:	bb39      	cbnz	r1, 800ff3e <_puts_r+0x9e>
 800feee:	2b00      	cmp	r3, #0
 800fef0:	da38      	bge.n	800ff64 <_puts_r+0xc4>
 800fef2:	4622      	mov	r2, r4
 800fef4:	210a      	movs	r1, #10
 800fef6:	4628      	mov	r0, r5
 800fef8:	f000 f862 	bl	800ffc0 <__swbuf_r>
 800fefc:	3001      	adds	r0, #1
 800fefe:	d011      	beq.n	800ff24 <_puts_r+0x84>
 800ff00:	250a      	movs	r5, #10
 800ff02:	e011      	b.n	800ff28 <_puts_r+0x88>
 800ff04:	4b1b      	ldr	r3, [pc, #108]	; (800ff74 <_puts_r+0xd4>)
 800ff06:	429c      	cmp	r4, r3
 800ff08:	d101      	bne.n	800ff0e <_puts_r+0x6e>
 800ff0a:	68ac      	ldr	r4, [r5, #8]
 800ff0c:	e7da      	b.n	800fec4 <_puts_r+0x24>
 800ff0e:	4b1a      	ldr	r3, [pc, #104]	; (800ff78 <_puts_r+0xd8>)
 800ff10:	429c      	cmp	r4, r3
 800ff12:	bf08      	it	eq
 800ff14:	68ec      	ldreq	r4, [r5, #12]
 800ff16:	e7d5      	b.n	800fec4 <_puts_r+0x24>
 800ff18:	4621      	mov	r1, r4
 800ff1a:	4628      	mov	r0, r5
 800ff1c:	f000 f8a2 	bl	8010064 <__swsetup_r>
 800ff20:	2800      	cmp	r0, #0
 800ff22:	d0dd      	beq.n	800fee0 <_puts_r+0x40>
 800ff24:	f04f 35ff 	mov.w	r5, #4294967295
 800ff28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff2a:	07da      	lsls	r2, r3, #31
 800ff2c:	d405      	bmi.n	800ff3a <_puts_r+0x9a>
 800ff2e:	89a3      	ldrh	r3, [r4, #12]
 800ff30:	059b      	lsls	r3, r3, #22
 800ff32:	d402      	bmi.n	800ff3a <_puts_r+0x9a>
 800ff34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff36:	f000 fabc 	bl	80104b2 <__retarget_lock_release_recursive>
 800ff3a:	4628      	mov	r0, r5
 800ff3c:	bd70      	pop	{r4, r5, r6, pc}
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	da04      	bge.n	800ff4c <_puts_r+0xac>
 800ff42:	69a2      	ldr	r2, [r4, #24]
 800ff44:	429a      	cmp	r2, r3
 800ff46:	dc06      	bgt.n	800ff56 <_puts_r+0xb6>
 800ff48:	290a      	cmp	r1, #10
 800ff4a:	d004      	beq.n	800ff56 <_puts_r+0xb6>
 800ff4c:	6823      	ldr	r3, [r4, #0]
 800ff4e:	1c5a      	adds	r2, r3, #1
 800ff50:	6022      	str	r2, [r4, #0]
 800ff52:	7019      	strb	r1, [r3, #0]
 800ff54:	e7c5      	b.n	800fee2 <_puts_r+0x42>
 800ff56:	4622      	mov	r2, r4
 800ff58:	4628      	mov	r0, r5
 800ff5a:	f000 f831 	bl	800ffc0 <__swbuf_r>
 800ff5e:	3001      	adds	r0, #1
 800ff60:	d1bf      	bne.n	800fee2 <_puts_r+0x42>
 800ff62:	e7df      	b.n	800ff24 <_puts_r+0x84>
 800ff64:	6823      	ldr	r3, [r4, #0]
 800ff66:	250a      	movs	r5, #10
 800ff68:	1c5a      	adds	r2, r3, #1
 800ff6a:	6022      	str	r2, [r4, #0]
 800ff6c:	701d      	strb	r5, [r3, #0]
 800ff6e:	e7db      	b.n	800ff28 <_puts_r+0x88>
 800ff70:	08011510 	.word	0x08011510
 800ff74:	08011530 	.word	0x08011530
 800ff78:	080114f0 	.word	0x080114f0

0800ff7c <puts>:
 800ff7c:	4b02      	ldr	r3, [pc, #8]	; (800ff88 <puts+0xc>)
 800ff7e:	4601      	mov	r1, r0
 800ff80:	6818      	ldr	r0, [r3, #0]
 800ff82:	f7ff bf8d 	b.w	800fea0 <_puts_r>
 800ff86:	bf00      	nop
 800ff88:	2000000c 	.word	0x2000000c

0800ff8c <strcpy>:
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff92:	f803 2b01 	strb.w	r2, [r3], #1
 800ff96:	2a00      	cmp	r2, #0
 800ff98:	d1f9      	bne.n	800ff8e <strcpy+0x2>
 800ff9a:	4770      	bx	lr

0800ff9c <strncmp>:
 800ff9c:	b510      	push	{r4, lr}
 800ff9e:	b16a      	cbz	r2, 800ffbc <strncmp+0x20>
 800ffa0:	3901      	subs	r1, #1
 800ffa2:	1884      	adds	r4, r0, r2
 800ffa4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ffa8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ffac:	4293      	cmp	r3, r2
 800ffae:	d103      	bne.n	800ffb8 <strncmp+0x1c>
 800ffb0:	42a0      	cmp	r0, r4
 800ffb2:	d001      	beq.n	800ffb8 <strncmp+0x1c>
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d1f5      	bne.n	800ffa4 <strncmp+0x8>
 800ffb8:	1a98      	subs	r0, r3, r2
 800ffba:	bd10      	pop	{r4, pc}
 800ffbc:	4610      	mov	r0, r2
 800ffbe:	e7fc      	b.n	800ffba <strncmp+0x1e>

0800ffc0 <__swbuf_r>:
 800ffc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffc2:	460e      	mov	r6, r1
 800ffc4:	4614      	mov	r4, r2
 800ffc6:	4605      	mov	r5, r0
 800ffc8:	b118      	cbz	r0, 800ffd2 <__swbuf_r+0x12>
 800ffca:	6983      	ldr	r3, [r0, #24]
 800ffcc:	b90b      	cbnz	r3, 800ffd2 <__swbuf_r+0x12>
 800ffce:	f000 f9d1 	bl	8010374 <__sinit>
 800ffd2:	4b21      	ldr	r3, [pc, #132]	; (8010058 <__swbuf_r+0x98>)
 800ffd4:	429c      	cmp	r4, r3
 800ffd6:	d12b      	bne.n	8010030 <__swbuf_r+0x70>
 800ffd8:	686c      	ldr	r4, [r5, #4]
 800ffda:	69a3      	ldr	r3, [r4, #24]
 800ffdc:	60a3      	str	r3, [r4, #8]
 800ffde:	89a3      	ldrh	r3, [r4, #12]
 800ffe0:	071a      	lsls	r2, r3, #28
 800ffe2:	d52f      	bpl.n	8010044 <__swbuf_r+0x84>
 800ffe4:	6923      	ldr	r3, [r4, #16]
 800ffe6:	b36b      	cbz	r3, 8010044 <__swbuf_r+0x84>
 800ffe8:	6923      	ldr	r3, [r4, #16]
 800ffea:	6820      	ldr	r0, [r4, #0]
 800ffec:	1ac0      	subs	r0, r0, r3
 800ffee:	6963      	ldr	r3, [r4, #20]
 800fff0:	b2f6      	uxtb	r6, r6
 800fff2:	4283      	cmp	r3, r0
 800fff4:	4637      	mov	r7, r6
 800fff6:	dc04      	bgt.n	8010002 <__swbuf_r+0x42>
 800fff8:	4621      	mov	r1, r4
 800fffa:	4628      	mov	r0, r5
 800fffc:	f000 f926 	bl	801024c <_fflush_r>
 8010000:	bb30      	cbnz	r0, 8010050 <__swbuf_r+0x90>
 8010002:	68a3      	ldr	r3, [r4, #8]
 8010004:	3b01      	subs	r3, #1
 8010006:	60a3      	str	r3, [r4, #8]
 8010008:	6823      	ldr	r3, [r4, #0]
 801000a:	1c5a      	adds	r2, r3, #1
 801000c:	6022      	str	r2, [r4, #0]
 801000e:	701e      	strb	r6, [r3, #0]
 8010010:	6963      	ldr	r3, [r4, #20]
 8010012:	3001      	adds	r0, #1
 8010014:	4283      	cmp	r3, r0
 8010016:	d004      	beq.n	8010022 <__swbuf_r+0x62>
 8010018:	89a3      	ldrh	r3, [r4, #12]
 801001a:	07db      	lsls	r3, r3, #31
 801001c:	d506      	bpl.n	801002c <__swbuf_r+0x6c>
 801001e:	2e0a      	cmp	r6, #10
 8010020:	d104      	bne.n	801002c <__swbuf_r+0x6c>
 8010022:	4621      	mov	r1, r4
 8010024:	4628      	mov	r0, r5
 8010026:	f000 f911 	bl	801024c <_fflush_r>
 801002a:	b988      	cbnz	r0, 8010050 <__swbuf_r+0x90>
 801002c:	4638      	mov	r0, r7
 801002e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010030:	4b0a      	ldr	r3, [pc, #40]	; (801005c <__swbuf_r+0x9c>)
 8010032:	429c      	cmp	r4, r3
 8010034:	d101      	bne.n	801003a <__swbuf_r+0x7a>
 8010036:	68ac      	ldr	r4, [r5, #8]
 8010038:	e7cf      	b.n	800ffda <__swbuf_r+0x1a>
 801003a:	4b09      	ldr	r3, [pc, #36]	; (8010060 <__swbuf_r+0xa0>)
 801003c:	429c      	cmp	r4, r3
 801003e:	bf08      	it	eq
 8010040:	68ec      	ldreq	r4, [r5, #12]
 8010042:	e7ca      	b.n	800ffda <__swbuf_r+0x1a>
 8010044:	4621      	mov	r1, r4
 8010046:	4628      	mov	r0, r5
 8010048:	f000 f80c 	bl	8010064 <__swsetup_r>
 801004c:	2800      	cmp	r0, #0
 801004e:	d0cb      	beq.n	800ffe8 <__swbuf_r+0x28>
 8010050:	f04f 37ff 	mov.w	r7, #4294967295
 8010054:	e7ea      	b.n	801002c <__swbuf_r+0x6c>
 8010056:	bf00      	nop
 8010058:	08011510 	.word	0x08011510
 801005c:	08011530 	.word	0x08011530
 8010060:	080114f0 	.word	0x080114f0

08010064 <__swsetup_r>:
 8010064:	4b32      	ldr	r3, [pc, #200]	; (8010130 <__swsetup_r+0xcc>)
 8010066:	b570      	push	{r4, r5, r6, lr}
 8010068:	681d      	ldr	r5, [r3, #0]
 801006a:	4606      	mov	r6, r0
 801006c:	460c      	mov	r4, r1
 801006e:	b125      	cbz	r5, 801007a <__swsetup_r+0x16>
 8010070:	69ab      	ldr	r3, [r5, #24]
 8010072:	b913      	cbnz	r3, 801007a <__swsetup_r+0x16>
 8010074:	4628      	mov	r0, r5
 8010076:	f000 f97d 	bl	8010374 <__sinit>
 801007a:	4b2e      	ldr	r3, [pc, #184]	; (8010134 <__swsetup_r+0xd0>)
 801007c:	429c      	cmp	r4, r3
 801007e:	d10f      	bne.n	80100a0 <__swsetup_r+0x3c>
 8010080:	686c      	ldr	r4, [r5, #4]
 8010082:	89a3      	ldrh	r3, [r4, #12]
 8010084:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010088:	0719      	lsls	r1, r3, #28
 801008a:	d42c      	bmi.n	80100e6 <__swsetup_r+0x82>
 801008c:	06dd      	lsls	r5, r3, #27
 801008e:	d411      	bmi.n	80100b4 <__swsetup_r+0x50>
 8010090:	2309      	movs	r3, #9
 8010092:	6033      	str	r3, [r6, #0]
 8010094:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010098:	81a3      	strh	r3, [r4, #12]
 801009a:	f04f 30ff 	mov.w	r0, #4294967295
 801009e:	e03e      	b.n	801011e <__swsetup_r+0xba>
 80100a0:	4b25      	ldr	r3, [pc, #148]	; (8010138 <__swsetup_r+0xd4>)
 80100a2:	429c      	cmp	r4, r3
 80100a4:	d101      	bne.n	80100aa <__swsetup_r+0x46>
 80100a6:	68ac      	ldr	r4, [r5, #8]
 80100a8:	e7eb      	b.n	8010082 <__swsetup_r+0x1e>
 80100aa:	4b24      	ldr	r3, [pc, #144]	; (801013c <__swsetup_r+0xd8>)
 80100ac:	429c      	cmp	r4, r3
 80100ae:	bf08      	it	eq
 80100b0:	68ec      	ldreq	r4, [r5, #12]
 80100b2:	e7e6      	b.n	8010082 <__swsetup_r+0x1e>
 80100b4:	0758      	lsls	r0, r3, #29
 80100b6:	d512      	bpl.n	80100de <__swsetup_r+0x7a>
 80100b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100ba:	b141      	cbz	r1, 80100ce <__swsetup_r+0x6a>
 80100bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100c0:	4299      	cmp	r1, r3
 80100c2:	d002      	beq.n	80100ca <__swsetup_r+0x66>
 80100c4:	4630      	mov	r0, r6
 80100c6:	f000 fa59 	bl	801057c <_free_r>
 80100ca:	2300      	movs	r3, #0
 80100cc:	6363      	str	r3, [r4, #52]	; 0x34
 80100ce:	89a3      	ldrh	r3, [r4, #12]
 80100d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80100d4:	81a3      	strh	r3, [r4, #12]
 80100d6:	2300      	movs	r3, #0
 80100d8:	6063      	str	r3, [r4, #4]
 80100da:	6923      	ldr	r3, [r4, #16]
 80100dc:	6023      	str	r3, [r4, #0]
 80100de:	89a3      	ldrh	r3, [r4, #12]
 80100e0:	f043 0308 	orr.w	r3, r3, #8
 80100e4:	81a3      	strh	r3, [r4, #12]
 80100e6:	6923      	ldr	r3, [r4, #16]
 80100e8:	b94b      	cbnz	r3, 80100fe <__swsetup_r+0x9a>
 80100ea:	89a3      	ldrh	r3, [r4, #12]
 80100ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80100f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100f4:	d003      	beq.n	80100fe <__swsetup_r+0x9a>
 80100f6:	4621      	mov	r1, r4
 80100f8:	4630      	mov	r0, r6
 80100fa:	f000 f9ff 	bl	80104fc <__smakebuf_r>
 80100fe:	89a0      	ldrh	r0, [r4, #12]
 8010100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010104:	f010 0301 	ands.w	r3, r0, #1
 8010108:	d00a      	beq.n	8010120 <__swsetup_r+0xbc>
 801010a:	2300      	movs	r3, #0
 801010c:	60a3      	str	r3, [r4, #8]
 801010e:	6963      	ldr	r3, [r4, #20]
 8010110:	425b      	negs	r3, r3
 8010112:	61a3      	str	r3, [r4, #24]
 8010114:	6923      	ldr	r3, [r4, #16]
 8010116:	b943      	cbnz	r3, 801012a <__swsetup_r+0xc6>
 8010118:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801011c:	d1ba      	bne.n	8010094 <__swsetup_r+0x30>
 801011e:	bd70      	pop	{r4, r5, r6, pc}
 8010120:	0781      	lsls	r1, r0, #30
 8010122:	bf58      	it	pl
 8010124:	6963      	ldrpl	r3, [r4, #20]
 8010126:	60a3      	str	r3, [r4, #8]
 8010128:	e7f4      	b.n	8010114 <__swsetup_r+0xb0>
 801012a:	2000      	movs	r0, #0
 801012c:	e7f7      	b.n	801011e <__swsetup_r+0xba>
 801012e:	bf00      	nop
 8010130:	2000000c 	.word	0x2000000c
 8010134:	08011510 	.word	0x08011510
 8010138:	08011530 	.word	0x08011530
 801013c:	080114f0 	.word	0x080114f0

08010140 <__sflush_r>:
 8010140:	898a      	ldrh	r2, [r1, #12]
 8010142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010146:	4605      	mov	r5, r0
 8010148:	0710      	lsls	r0, r2, #28
 801014a:	460c      	mov	r4, r1
 801014c:	d458      	bmi.n	8010200 <__sflush_r+0xc0>
 801014e:	684b      	ldr	r3, [r1, #4]
 8010150:	2b00      	cmp	r3, #0
 8010152:	dc05      	bgt.n	8010160 <__sflush_r+0x20>
 8010154:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010156:	2b00      	cmp	r3, #0
 8010158:	dc02      	bgt.n	8010160 <__sflush_r+0x20>
 801015a:	2000      	movs	r0, #0
 801015c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010162:	2e00      	cmp	r6, #0
 8010164:	d0f9      	beq.n	801015a <__sflush_r+0x1a>
 8010166:	2300      	movs	r3, #0
 8010168:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801016c:	682f      	ldr	r7, [r5, #0]
 801016e:	602b      	str	r3, [r5, #0]
 8010170:	d032      	beq.n	80101d8 <__sflush_r+0x98>
 8010172:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010174:	89a3      	ldrh	r3, [r4, #12]
 8010176:	075a      	lsls	r2, r3, #29
 8010178:	d505      	bpl.n	8010186 <__sflush_r+0x46>
 801017a:	6863      	ldr	r3, [r4, #4]
 801017c:	1ac0      	subs	r0, r0, r3
 801017e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010180:	b10b      	cbz	r3, 8010186 <__sflush_r+0x46>
 8010182:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010184:	1ac0      	subs	r0, r0, r3
 8010186:	2300      	movs	r3, #0
 8010188:	4602      	mov	r2, r0
 801018a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801018c:	6a21      	ldr	r1, [r4, #32]
 801018e:	4628      	mov	r0, r5
 8010190:	47b0      	blx	r6
 8010192:	1c43      	adds	r3, r0, #1
 8010194:	89a3      	ldrh	r3, [r4, #12]
 8010196:	d106      	bne.n	80101a6 <__sflush_r+0x66>
 8010198:	6829      	ldr	r1, [r5, #0]
 801019a:	291d      	cmp	r1, #29
 801019c:	d82c      	bhi.n	80101f8 <__sflush_r+0xb8>
 801019e:	4a2a      	ldr	r2, [pc, #168]	; (8010248 <__sflush_r+0x108>)
 80101a0:	40ca      	lsrs	r2, r1
 80101a2:	07d6      	lsls	r6, r2, #31
 80101a4:	d528      	bpl.n	80101f8 <__sflush_r+0xb8>
 80101a6:	2200      	movs	r2, #0
 80101a8:	6062      	str	r2, [r4, #4]
 80101aa:	04d9      	lsls	r1, r3, #19
 80101ac:	6922      	ldr	r2, [r4, #16]
 80101ae:	6022      	str	r2, [r4, #0]
 80101b0:	d504      	bpl.n	80101bc <__sflush_r+0x7c>
 80101b2:	1c42      	adds	r2, r0, #1
 80101b4:	d101      	bne.n	80101ba <__sflush_r+0x7a>
 80101b6:	682b      	ldr	r3, [r5, #0]
 80101b8:	b903      	cbnz	r3, 80101bc <__sflush_r+0x7c>
 80101ba:	6560      	str	r0, [r4, #84]	; 0x54
 80101bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101be:	602f      	str	r7, [r5, #0]
 80101c0:	2900      	cmp	r1, #0
 80101c2:	d0ca      	beq.n	801015a <__sflush_r+0x1a>
 80101c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101c8:	4299      	cmp	r1, r3
 80101ca:	d002      	beq.n	80101d2 <__sflush_r+0x92>
 80101cc:	4628      	mov	r0, r5
 80101ce:	f000 f9d5 	bl	801057c <_free_r>
 80101d2:	2000      	movs	r0, #0
 80101d4:	6360      	str	r0, [r4, #52]	; 0x34
 80101d6:	e7c1      	b.n	801015c <__sflush_r+0x1c>
 80101d8:	6a21      	ldr	r1, [r4, #32]
 80101da:	2301      	movs	r3, #1
 80101dc:	4628      	mov	r0, r5
 80101de:	47b0      	blx	r6
 80101e0:	1c41      	adds	r1, r0, #1
 80101e2:	d1c7      	bne.n	8010174 <__sflush_r+0x34>
 80101e4:	682b      	ldr	r3, [r5, #0]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d0c4      	beq.n	8010174 <__sflush_r+0x34>
 80101ea:	2b1d      	cmp	r3, #29
 80101ec:	d001      	beq.n	80101f2 <__sflush_r+0xb2>
 80101ee:	2b16      	cmp	r3, #22
 80101f0:	d101      	bne.n	80101f6 <__sflush_r+0xb6>
 80101f2:	602f      	str	r7, [r5, #0]
 80101f4:	e7b1      	b.n	801015a <__sflush_r+0x1a>
 80101f6:	89a3      	ldrh	r3, [r4, #12]
 80101f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101fc:	81a3      	strh	r3, [r4, #12]
 80101fe:	e7ad      	b.n	801015c <__sflush_r+0x1c>
 8010200:	690f      	ldr	r7, [r1, #16]
 8010202:	2f00      	cmp	r7, #0
 8010204:	d0a9      	beq.n	801015a <__sflush_r+0x1a>
 8010206:	0793      	lsls	r3, r2, #30
 8010208:	680e      	ldr	r6, [r1, #0]
 801020a:	bf08      	it	eq
 801020c:	694b      	ldreq	r3, [r1, #20]
 801020e:	600f      	str	r7, [r1, #0]
 8010210:	bf18      	it	ne
 8010212:	2300      	movne	r3, #0
 8010214:	eba6 0807 	sub.w	r8, r6, r7
 8010218:	608b      	str	r3, [r1, #8]
 801021a:	f1b8 0f00 	cmp.w	r8, #0
 801021e:	dd9c      	ble.n	801015a <__sflush_r+0x1a>
 8010220:	6a21      	ldr	r1, [r4, #32]
 8010222:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010224:	4643      	mov	r3, r8
 8010226:	463a      	mov	r2, r7
 8010228:	4628      	mov	r0, r5
 801022a:	47b0      	blx	r6
 801022c:	2800      	cmp	r0, #0
 801022e:	dc06      	bgt.n	801023e <__sflush_r+0xfe>
 8010230:	89a3      	ldrh	r3, [r4, #12]
 8010232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010236:	81a3      	strh	r3, [r4, #12]
 8010238:	f04f 30ff 	mov.w	r0, #4294967295
 801023c:	e78e      	b.n	801015c <__sflush_r+0x1c>
 801023e:	4407      	add	r7, r0
 8010240:	eba8 0800 	sub.w	r8, r8, r0
 8010244:	e7e9      	b.n	801021a <__sflush_r+0xda>
 8010246:	bf00      	nop
 8010248:	20400001 	.word	0x20400001

0801024c <_fflush_r>:
 801024c:	b538      	push	{r3, r4, r5, lr}
 801024e:	690b      	ldr	r3, [r1, #16]
 8010250:	4605      	mov	r5, r0
 8010252:	460c      	mov	r4, r1
 8010254:	b913      	cbnz	r3, 801025c <_fflush_r+0x10>
 8010256:	2500      	movs	r5, #0
 8010258:	4628      	mov	r0, r5
 801025a:	bd38      	pop	{r3, r4, r5, pc}
 801025c:	b118      	cbz	r0, 8010266 <_fflush_r+0x1a>
 801025e:	6983      	ldr	r3, [r0, #24]
 8010260:	b90b      	cbnz	r3, 8010266 <_fflush_r+0x1a>
 8010262:	f000 f887 	bl	8010374 <__sinit>
 8010266:	4b14      	ldr	r3, [pc, #80]	; (80102b8 <_fflush_r+0x6c>)
 8010268:	429c      	cmp	r4, r3
 801026a:	d11b      	bne.n	80102a4 <_fflush_r+0x58>
 801026c:	686c      	ldr	r4, [r5, #4]
 801026e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d0ef      	beq.n	8010256 <_fflush_r+0xa>
 8010276:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010278:	07d0      	lsls	r0, r2, #31
 801027a:	d404      	bmi.n	8010286 <_fflush_r+0x3a>
 801027c:	0599      	lsls	r1, r3, #22
 801027e:	d402      	bmi.n	8010286 <_fflush_r+0x3a>
 8010280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010282:	f000 f915 	bl	80104b0 <__retarget_lock_acquire_recursive>
 8010286:	4628      	mov	r0, r5
 8010288:	4621      	mov	r1, r4
 801028a:	f7ff ff59 	bl	8010140 <__sflush_r>
 801028e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010290:	07da      	lsls	r2, r3, #31
 8010292:	4605      	mov	r5, r0
 8010294:	d4e0      	bmi.n	8010258 <_fflush_r+0xc>
 8010296:	89a3      	ldrh	r3, [r4, #12]
 8010298:	059b      	lsls	r3, r3, #22
 801029a:	d4dd      	bmi.n	8010258 <_fflush_r+0xc>
 801029c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801029e:	f000 f908 	bl	80104b2 <__retarget_lock_release_recursive>
 80102a2:	e7d9      	b.n	8010258 <_fflush_r+0xc>
 80102a4:	4b05      	ldr	r3, [pc, #20]	; (80102bc <_fflush_r+0x70>)
 80102a6:	429c      	cmp	r4, r3
 80102a8:	d101      	bne.n	80102ae <_fflush_r+0x62>
 80102aa:	68ac      	ldr	r4, [r5, #8]
 80102ac:	e7df      	b.n	801026e <_fflush_r+0x22>
 80102ae:	4b04      	ldr	r3, [pc, #16]	; (80102c0 <_fflush_r+0x74>)
 80102b0:	429c      	cmp	r4, r3
 80102b2:	bf08      	it	eq
 80102b4:	68ec      	ldreq	r4, [r5, #12]
 80102b6:	e7da      	b.n	801026e <_fflush_r+0x22>
 80102b8:	08011510 	.word	0x08011510
 80102bc:	08011530 	.word	0x08011530
 80102c0:	080114f0 	.word	0x080114f0

080102c4 <std>:
 80102c4:	2300      	movs	r3, #0
 80102c6:	b510      	push	{r4, lr}
 80102c8:	4604      	mov	r4, r0
 80102ca:	e9c0 3300 	strd	r3, r3, [r0]
 80102ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80102d2:	6083      	str	r3, [r0, #8]
 80102d4:	8181      	strh	r1, [r0, #12]
 80102d6:	6643      	str	r3, [r0, #100]	; 0x64
 80102d8:	81c2      	strh	r2, [r0, #14]
 80102da:	6183      	str	r3, [r0, #24]
 80102dc:	4619      	mov	r1, r3
 80102de:	2208      	movs	r2, #8
 80102e0:	305c      	adds	r0, #92	; 0x5c
 80102e2:	f7ff fdbd 	bl	800fe60 <memset>
 80102e6:	4b05      	ldr	r3, [pc, #20]	; (80102fc <std+0x38>)
 80102e8:	6263      	str	r3, [r4, #36]	; 0x24
 80102ea:	4b05      	ldr	r3, [pc, #20]	; (8010300 <std+0x3c>)
 80102ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80102ee:	4b05      	ldr	r3, [pc, #20]	; (8010304 <std+0x40>)
 80102f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80102f2:	4b05      	ldr	r3, [pc, #20]	; (8010308 <std+0x44>)
 80102f4:	6224      	str	r4, [r4, #32]
 80102f6:	6323      	str	r3, [r4, #48]	; 0x30
 80102f8:	bd10      	pop	{r4, pc}
 80102fa:	bf00      	nop
 80102fc:	08010ccd 	.word	0x08010ccd
 8010300:	08010cef 	.word	0x08010cef
 8010304:	08010d27 	.word	0x08010d27
 8010308:	08010d4b 	.word	0x08010d4b

0801030c <_cleanup_r>:
 801030c:	4901      	ldr	r1, [pc, #4]	; (8010314 <_cleanup_r+0x8>)
 801030e:	f000 b8af 	b.w	8010470 <_fwalk_reent>
 8010312:	bf00      	nop
 8010314:	0801024d 	.word	0x0801024d

08010318 <__sfmoreglue>:
 8010318:	b570      	push	{r4, r5, r6, lr}
 801031a:	1e4a      	subs	r2, r1, #1
 801031c:	2568      	movs	r5, #104	; 0x68
 801031e:	4355      	muls	r5, r2
 8010320:	460e      	mov	r6, r1
 8010322:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010326:	f000 f979 	bl	801061c <_malloc_r>
 801032a:	4604      	mov	r4, r0
 801032c:	b140      	cbz	r0, 8010340 <__sfmoreglue+0x28>
 801032e:	2100      	movs	r1, #0
 8010330:	e9c0 1600 	strd	r1, r6, [r0]
 8010334:	300c      	adds	r0, #12
 8010336:	60a0      	str	r0, [r4, #8]
 8010338:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801033c:	f7ff fd90 	bl	800fe60 <memset>
 8010340:	4620      	mov	r0, r4
 8010342:	bd70      	pop	{r4, r5, r6, pc}

08010344 <__sfp_lock_acquire>:
 8010344:	4801      	ldr	r0, [pc, #4]	; (801034c <__sfp_lock_acquire+0x8>)
 8010346:	f000 b8b3 	b.w	80104b0 <__retarget_lock_acquire_recursive>
 801034a:	bf00      	nop
 801034c:	20000aa8 	.word	0x20000aa8

08010350 <__sfp_lock_release>:
 8010350:	4801      	ldr	r0, [pc, #4]	; (8010358 <__sfp_lock_release+0x8>)
 8010352:	f000 b8ae 	b.w	80104b2 <__retarget_lock_release_recursive>
 8010356:	bf00      	nop
 8010358:	20000aa8 	.word	0x20000aa8

0801035c <__sinit_lock_acquire>:
 801035c:	4801      	ldr	r0, [pc, #4]	; (8010364 <__sinit_lock_acquire+0x8>)
 801035e:	f000 b8a7 	b.w	80104b0 <__retarget_lock_acquire_recursive>
 8010362:	bf00      	nop
 8010364:	20000aa3 	.word	0x20000aa3

08010368 <__sinit_lock_release>:
 8010368:	4801      	ldr	r0, [pc, #4]	; (8010370 <__sinit_lock_release+0x8>)
 801036a:	f000 b8a2 	b.w	80104b2 <__retarget_lock_release_recursive>
 801036e:	bf00      	nop
 8010370:	20000aa3 	.word	0x20000aa3

08010374 <__sinit>:
 8010374:	b510      	push	{r4, lr}
 8010376:	4604      	mov	r4, r0
 8010378:	f7ff fff0 	bl	801035c <__sinit_lock_acquire>
 801037c:	69a3      	ldr	r3, [r4, #24]
 801037e:	b11b      	cbz	r3, 8010388 <__sinit+0x14>
 8010380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010384:	f7ff bff0 	b.w	8010368 <__sinit_lock_release>
 8010388:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801038c:	6523      	str	r3, [r4, #80]	; 0x50
 801038e:	4b13      	ldr	r3, [pc, #76]	; (80103dc <__sinit+0x68>)
 8010390:	4a13      	ldr	r2, [pc, #76]	; (80103e0 <__sinit+0x6c>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	62a2      	str	r2, [r4, #40]	; 0x28
 8010396:	42a3      	cmp	r3, r4
 8010398:	bf04      	itt	eq
 801039a:	2301      	moveq	r3, #1
 801039c:	61a3      	streq	r3, [r4, #24]
 801039e:	4620      	mov	r0, r4
 80103a0:	f000 f820 	bl	80103e4 <__sfp>
 80103a4:	6060      	str	r0, [r4, #4]
 80103a6:	4620      	mov	r0, r4
 80103a8:	f000 f81c 	bl	80103e4 <__sfp>
 80103ac:	60a0      	str	r0, [r4, #8]
 80103ae:	4620      	mov	r0, r4
 80103b0:	f000 f818 	bl	80103e4 <__sfp>
 80103b4:	2200      	movs	r2, #0
 80103b6:	60e0      	str	r0, [r4, #12]
 80103b8:	2104      	movs	r1, #4
 80103ba:	6860      	ldr	r0, [r4, #4]
 80103bc:	f7ff ff82 	bl	80102c4 <std>
 80103c0:	68a0      	ldr	r0, [r4, #8]
 80103c2:	2201      	movs	r2, #1
 80103c4:	2109      	movs	r1, #9
 80103c6:	f7ff ff7d 	bl	80102c4 <std>
 80103ca:	68e0      	ldr	r0, [r4, #12]
 80103cc:	2202      	movs	r2, #2
 80103ce:	2112      	movs	r1, #18
 80103d0:	f7ff ff78 	bl	80102c4 <std>
 80103d4:	2301      	movs	r3, #1
 80103d6:	61a3      	str	r3, [r4, #24]
 80103d8:	e7d2      	b.n	8010380 <__sinit+0xc>
 80103da:	bf00      	nop
 80103dc:	080114ec 	.word	0x080114ec
 80103e0:	0801030d 	.word	0x0801030d

080103e4 <__sfp>:
 80103e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103e6:	4607      	mov	r7, r0
 80103e8:	f7ff ffac 	bl	8010344 <__sfp_lock_acquire>
 80103ec:	4b1e      	ldr	r3, [pc, #120]	; (8010468 <__sfp+0x84>)
 80103ee:	681e      	ldr	r6, [r3, #0]
 80103f0:	69b3      	ldr	r3, [r6, #24]
 80103f2:	b913      	cbnz	r3, 80103fa <__sfp+0x16>
 80103f4:	4630      	mov	r0, r6
 80103f6:	f7ff ffbd 	bl	8010374 <__sinit>
 80103fa:	3648      	adds	r6, #72	; 0x48
 80103fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010400:	3b01      	subs	r3, #1
 8010402:	d503      	bpl.n	801040c <__sfp+0x28>
 8010404:	6833      	ldr	r3, [r6, #0]
 8010406:	b30b      	cbz	r3, 801044c <__sfp+0x68>
 8010408:	6836      	ldr	r6, [r6, #0]
 801040a:	e7f7      	b.n	80103fc <__sfp+0x18>
 801040c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010410:	b9d5      	cbnz	r5, 8010448 <__sfp+0x64>
 8010412:	4b16      	ldr	r3, [pc, #88]	; (801046c <__sfp+0x88>)
 8010414:	60e3      	str	r3, [r4, #12]
 8010416:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801041a:	6665      	str	r5, [r4, #100]	; 0x64
 801041c:	f000 f847 	bl	80104ae <__retarget_lock_init_recursive>
 8010420:	f7ff ff96 	bl	8010350 <__sfp_lock_release>
 8010424:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010428:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801042c:	6025      	str	r5, [r4, #0]
 801042e:	61a5      	str	r5, [r4, #24]
 8010430:	2208      	movs	r2, #8
 8010432:	4629      	mov	r1, r5
 8010434:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010438:	f7ff fd12 	bl	800fe60 <memset>
 801043c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010440:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010444:	4620      	mov	r0, r4
 8010446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010448:	3468      	adds	r4, #104	; 0x68
 801044a:	e7d9      	b.n	8010400 <__sfp+0x1c>
 801044c:	2104      	movs	r1, #4
 801044e:	4638      	mov	r0, r7
 8010450:	f7ff ff62 	bl	8010318 <__sfmoreglue>
 8010454:	4604      	mov	r4, r0
 8010456:	6030      	str	r0, [r6, #0]
 8010458:	2800      	cmp	r0, #0
 801045a:	d1d5      	bne.n	8010408 <__sfp+0x24>
 801045c:	f7ff ff78 	bl	8010350 <__sfp_lock_release>
 8010460:	230c      	movs	r3, #12
 8010462:	603b      	str	r3, [r7, #0]
 8010464:	e7ee      	b.n	8010444 <__sfp+0x60>
 8010466:	bf00      	nop
 8010468:	080114ec 	.word	0x080114ec
 801046c:	ffff0001 	.word	0xffff0001

08010470 <_fwalk_reent>:
 8010470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010474:	4606      	mov	r6, r0
 8010476:	4688      	mov	r8, r1
 8010478:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801047c:	2700      	movs	r7, #0
 801047e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010482:	f1b9 0901 	subs.w	r9, r9, #1
 8010486:	d505      	bpl.n	8010494 <_fwalk_reent+0x24>
 8010488:	6824      	ldr	r4, [r4, #0]
 801048a:	2c00      	cmp	r4, #0
 801048c:	d1f7      	bne.n	801047e <_fwalk_reent+0xe>
 801048e:	4638      	mov	r0, r7
 8010490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010494:	89ab      	ldrh	r3, [r5, #12]
 8010496:	2b01      	cmp	r3, #1
 8010498:	d907      	bls.n	80104aa <_fwalk_reent+0x3a>
 801049a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801049e:	3301      	adds	r3, #1
 80104a0:	d003      	beq.n	80104aa <_fwalk_reent+0x3a>
 80104a2:	4629      	mov	r1, r5
 80104a4:	4630      	mov	r0, r6
 80104a6:	47c0      	blx	r8
 80104a8:	4307      	orrs	r7, r0
 80104aa:	3568      	adds	r5, #104	; 0x68
 80104ac:	e7e9      	b.n	8010482 <_fwalk_reent+0x12>

080104ae <__retarget_lock_init_recursive>:
 80104ae:	4770      	bx	lr

080104b0 <__retarget_lock_acquire_recursive>:
 80104b0:	4770      	bx	lr

080104b2 <__retarget_lock_release_recursive>:
 80104b2:	4770      	bx	lr

080104b4 <__swhatbuf_r>:
 80104b4:	b570      	push	{r4, r5, r6, lr}
 80104b6:	460e      	mov	r6, r1
 80104b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104bc:	2900      	cmp	r1, #0
 80104be:	b096      	sub	sp, #88	; 0x58
 80104c0:	4614      	mov	r4, r2
 80104c2:	461d      	mov	r5, r3
 80104c4:	da07      	bge.n	80104d6 <__swhatbuf_r+0x22>
 80104c6:	2300      	movs	r3, #0
 80104c8:	602b      	str	r3, [r5, #0]
 80104ca:	89b3      	ldrh	r3, [r6, #12]
 80104cc:	061a      	lsls	r2, r3, #24
 80104ce:	d410      	bmi.n	80104f2 <__swhatbuf_r+0x3e>
 80104d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104d4:	e00e      	b.n	80104f4 <__swhatbuf_r+0x40>
 80104d6:	466a      	mov	r2, sp
 80104d8:	f000 fc5e 	bl	8010d98 <_fstat_r>
 80104dc:	2800      	cmp	r0, #0
 80104de:	dbf2      	blt.n	80104c6 <__swhatbuf_r+0x12>
 80104e0:	9a01      	ldr	r2, [sp, #4]
 80104e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80104e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80104ea:	425a      	negs	r2, r3
 80104ec:	415a      	adcs	r2, r3
 80104ee:	602a      	str	r2, [r5, #0]
 80104f0:	e7ee      	b.n	80104d0 <__swhatbuf_r+0x1c>
 80104f2:	2340      	movs	r3, #64	; 0x40
 80104f4:	2000      	movs	r0, #0
 80104f6:	6023      	str	r3, [r4, #0]
 80104f8:	b016      	add	sp, #88	; 0x58
 80104fa:	bd70      	pop	{r4, r5, r6, pc}

080104fc <__smakebuf_r>:
 80104fc:	898b      	ldrh	r3, [r1, #12]
 80104fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010500:	079d      	lsls	r5, r3, #30
 8010502:	4606      	mov	r6, r0
 8010504:	460c      	mov	r4, r1
 8010506:	d507      	bpl.n	8010518 <__smakebuf_r+0x1c>
 8010508:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801050c:	6023      	str	r3, [r4, #0]
 801050e:	6123      	str	r3, [r4, #16]
 8010510:	2301      	movs	r3, #1
 8010512:	6163      	str	r3, [r4, #20]
 8010514:	b002      	add	sp, #8
 8010516:	bd70      	pop	{r4, r5, r6, pc}
 8010518:	ab01      	add	r3, sp, #4
 801051a:	466a      	mov	r2, sp
 801051c:	f7ff ffca 	bl	80104b4 <__swhatbuf_r>
 8010520:	9900      	ldr	r1, [sp, #0]
 8010522:	4605      	mov	r5, r0
 8010524:	4630      	mov	r0, r6
 8010526:	f000 f879 	bl	801061c <_malloc_r>
 801052a:	b948      	cbnz	r0, 8010540 <__smakebuf_r+0x44>
 801052c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010530:	059a      	lsls	r2, r3, #22
 8010532:	d4ef      	bmi.n	8010514 <__smakebuf_r+0x18>
 8010534:	f023 0303 	bic.w	r3, r3, #3
 8010538:	f043 0302 	orr.w	r3, r3, #2
 801053c:	81a3      	strh	r3, [r4, #12]
 801053e:	e7e3      	b.n	8010508 <__smakebuf_r+0xc>
 8010540:	4b0d      	ldr	r3, [pc, #52]	; (8010578 <__smakebuf_r+0x7c>)
 8010542:	62b3      	str	r3, [r6, #40]	; 0x28
 8010544:	89a3      	ldrh	r3, [r4, #12]
 8010546:	6020      	str	r0, [r4, #0]
 8010548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801054c:	81a3      	strh	r3, [r4, #12]
 801054e:	9b00      	ldr	r3, [sp, #0]
 8010550:	6163      	str	r3, [r4, #20]
 8010552:	9b01      	ldr	r3, [sp, #4]
 8010554:	6120      	str	r0, [r4, #16]
 8010556:	b15b      	cbz	r3, 8010570 <__smakebuf_r+0x74>
 8010558:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801055c:	4630      	mov	r0, r6
 801055e:	f000 fc2d 	bl	8010dbc <_isatty_r>
 8010562:	b128      	cbz	r0, 8010570 <__smakebuf_r+0x74>
 8010564:	89a3      	ldrh	r3, [r4, #12]
 8010566:	f023 0303 	bic.w	r3, r3, #3
 801056a:	f043 0301 	orr.w	r3, r3, #1
 801056e:	81a3      	strh	r3, [r4, #12]
 8010570:	89a0      	ldrh	r0, [r4, #12]
 8010572:	4305      	orrs	r5, r0
 8010574:	81a5      	strh	r5, [r4, #12]
 8010576:	e7cd      	b.n	8010514 <__smakebuf_r+0x18>
 8010578:	0801030d 	.word	0x0801030d

0801057c <_free_r>:
 801057c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801057e:	2900      	cmp	r1, #0
 8010580:	d048      	beq.n	8010614 <_free_r+0x98>
 8010582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010586:	9001      	str	r0, [sp, #4]
 8010588:	2b00      	cmp	r3, #0
 801058a:	f1a1 0404 	sub.w	r4, r1, #4
 801058e:	bfb8      	it	lt
 8010590:	18e4      	addlt	r4, r4, r3
 8010592:	f000 fc35 	bl	8010e00 <__malloc_lock>
 8010596:	4a20      	ldr	r2, [pc, #128]	; (8010618 <_free_r+0x9c>)
 8010598:	9801      	ldr	r0, [sp, #4]
 801059a:	6813      	ldr	r3, [r2, #0]
 801059c:	4615      	mov	r5, r2
 801059e:	b933      	cbnz	r3, 80105ae <_free_r+0x32>
 80105a0:	6063      	str	r3, [r4, #4]
 80105a2:	6014      	str	r4, [r2, #0]
 80105a4:	b003      	add	sp, #12
 80105a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105aa:	f000 bc2f 	b.w	8010e0c <__malloc_unlock>
 80105ae:	42a3      	cmp	r3, r4
 80105b0:	d90b      	bls.n	80105ca <_free_r+0x4e>
 80105b2:	6821      	ldr	r1, [r4, #0]
 80105b4:	1862      	adds	r2, r4, r1
 80105b6:	4293      	cmp	r3, r2
 80105b8:	bf04      	itt	eq
 80105ba:	681a      	ldreq	r2, [r3, #0]
 80105bc:	685b      	ldreq	r3, [r3, #4]
 80105be:	6063      	str	r3, [r4, #4]
 80105c0:	bf04      	itt	eq
 80105c2:	1852      	addeq	r2, r2, r1
 80105c4:	6022      	streq	r2, [r4, #0]
 80105c6:	602c      	str	r4, [r5, #0]
 80105c8:	e7ec      	b.n	80105a4 <_free_r+0x28>
 80105ca:	461a      	mov	r2, r3
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	b10b      	cbz	r3, 80105d4 <_free_r+0x58>
 80105d0:	42a3      	cmp	r3, r4
 80105d2:	d9fa      	bls.n	80105ca <_free_r+0x4e>
 80105d4:	6811      	ldr	r1, [r2, #0]
 80105d6:	1855      	adds	r5, r2, r1
 80105d8:	42a5      	cmp	r5, r4
 80105da:	d10b      	bne.n	80105f4 <_free_r+0x78>
 80105dc:	6824      	ldr	r4, [r4, #0]
 80105de:	4421      	add	r1, r4
 80105e0:	1854      	adds	r4, r2, r1
 80105e2:	42a3      	cmp	r3, r4
 80105e4:	6011      	str	r1, [r2, #0]
 80105e6:	d1dd      	bne.n	80105a4 <_free_r+0x28>
 80105e8:	681c      	ldr	r4, [r3, #0]
 80105ea:	685b      	ldr	r3, [r3, #4]
 80105ec:	6053      	str	r3, [r2, #4]
 80105ee:	4421      	add	r1, r4
 80105f0:	6011      	str	r1, [r2, #0]
 80105f2:	e7d7      	b.n	80105a4 <_free_r+0x28>
 80105f4:	d902      	bls.n	80105fc <_free_r+0x80>
 80105f6:	230c      	movs	r3, #12
 80105f8:	6003      	str	r3, [r0, #0]
 80105fa:	e7d3      	b.n	80105a4 <_free_r+0x28>
 80105fc:	6825      	ldr	r5, [r4, #0]
 80105fe:	1961      	adds	r1, r4, r5
 8010600:	428b      	cmp	r3, r1
 8010602:	bf04      	itt	eq
 8010604:	6819      	ldreq	r1, [r3, #0]
 8010606:	685b      	ldreq	r3, [r3, #4]
 8010608:	6063      	str	r3, [r4, #4]
 801060a:	bf04      	itt	eq
 801060c:	1949      	addeq	r1, r1, r5
 801060e:	6021      	streq	r1, [r4, #0]
 8010610:	6054      	str	r4, [r2, #4]
 8010612:	e7c7      	b.n	80105a4 <_free_r+0x28>
 8010614:	b003      	add	sp, #12
 8010616:	bd30      	pop	{r4, r5, pc}
 8010618:	20000098 	.word	0x20000098

0801061c <_malloc_r>:
 801061c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801061e:	1ccd      	adds	r5, r1, #3
 8010620:	f025 0503 	bic.w	r5, r5, #3
 8010624:	3508      	adds	r5, #8
 8010626:	2d0c      	cmp	r5, #12
 8010628:	bf38      	it	cc
 801062a:	250c      	movcc	r5, #12
 801062c:	2d00      	cmp	r5, #0
 801062e:	4606      	mov	r6, r0
 8010630:	db01      	blt.n	8010636 <_malloc_r+0x1a>
 8010632:	42a9      	cmp	r1, r5
 8010634:	d903      	bls.n	801063e <_malloc_r+0x22>
 8010636:	230c      	movs	r3, #12
 8010638:	6033      	str	r3, [r6, #0]
 801063a:	2000      	movs	r0, #0
 801063c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801063e:	f000 fbdf 	bl	8010e00 <__malloc_lock>
 8010642:	4921      	ldr	r1, [pc, #132]	; (80106c8 <_malloc_r+0xac>)
 8010644:	680a      	ldr	r2, [r1, #0]
 8010646:	4614      	mov	r4, r2
 8010648:	b99c      	cbnz	r4, 8010672 <_malloc_r+0x56>
 801064a:	4f20      	ldr	r7, [pc, #128]	; (80106cc <_malloc_r+0xb0>)
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	b923      	cbnz	r3, 801065a <_malloc_r+0x3e>
 8010650:	4621      	mov	r1, r4
 8010652:	4630      	mov	r0, r6
 8010654:	f000 fb2a 	bl	8010cac <_sbrk_r>
 8010658:	6038      	str	r0, [r7, #0]
 801065a:	4629      	mov	r1, r5
 801065c:	4630      	mov	r0, r6
 801065e:	f000 fb25 	bl	8010cac <_sbrk_r>
 8010662:	1c43      	adds	r3, r0, #1
 8010664:	d123      	bne.n	80106ae <_malloc_r+0x92>
 8010666:	230c      	movs	r3, #12
 8010668:	6033      	str	r3, [r6, #0]
 801066a:	4630      	mov	r0, r6
 801066c:	f000 fbce 	bl	8010e0c <__malloc_unlock>
 8010670:	e7e3      	b.n	801063a <_malloc_r+0x1e>
 8010672:	6823      	ldr	r3, [r4, #0]
 8010674:	1b5b      	subs	r3, r3, r5
 8010676:	d417      	bmi.n	80106a8 <_malloc_r+0x8c>
 8010678:	2b0b      	cmp	r3, #11
 801067a:	d903      	bls.n	8010684 <_malloc_r+0x68>
 801067c:	6023      	str	r3, [r4, #0]
 801067e:	441c      	add	r4, r3
 8010680:	6025      	str	r5, [r4, #0]
 8010682:	e004      	b.n	801068e <_malloc_r+0x72>
 8010684:	6863      	ldr	r3, [r4, #4]
 8010686:	42a2      	cmp	r2, r4
 8010688:	bf0c      	ite	eq
 801068a:	600b      	streq	r3, [r1, #0]
 801068c:	6053      	strne	r3, [r2, #4]
 801068e:	4630      	mov	r0, r6
 8010690:	f000 fbbc 	bl	8010e0c <__malloc_unlock>
 8010694:	f104 000b 	add.w	r0, r4, #11
 8010698:	1d23      	adds	r3, r4, #4
 801069a:	f020 0007 	bic.w	r0, r0, #7
 801069e:	1ac2      	subs	r2, r0, r3
 80106a0:	d0cc      	beq.n	801063c <_malloc_r+0x20>
 80106a2:	1a1b      	subs	r3, r3, r0
 80106a4:	50a3      	str	r3, [r4, r2]
 80106a6:	e7c9      	b.n	801063c <_malloc_r+0x20>
 80106a8:	4622      	mov	r2, r4
 80106aa:	6864      	ldr	r4, [r4, #4]
 80106ac:	e7cc      	b.n	8010648 <_malloc_r+0x2c>
 80106ae:	1cc4      	adds	r4, r0, #3
 80106b0:	f024 0403 	bic.w	r4, r4, #3
 80106b4:	42a0      	cmp	r0, r4
 80106b6:	d0e3      	beq.n	8010680 <_malloc_r+0x64>
 80106b8:	1a21      	subs	r1, r4, r0
 80106ba:	4630      	mov	r0, r6
 80106bc:	f000 faf6 	bl	8010cac <_sbrk_r>
 80106c0:	3001      	adds	r0, #1
 80106c2:	d1dd      	bne.n	8010680 <_malloc_r+0x64>
 80106c4:	e7cf      	b.n	8010666 <_malloc_r+0x4a>
 80106c6:	bf00      	nop
 80106c8:	20000098 	.word	0x20000098
 80106cc:	2000009c 	.word	0x2000009c

080106d0 <__sfputc_r>:
 80106d0:	6893      	ldr	r3, [r2, #8]
 80106d2:	3b01      	subs	r3, #1
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	b410      	push	{r4}
 80106d8:	6093      	str	r3, [r2, #8]
 80106da:	da08      	bge.n	80106ee <__sfputc_r+0x1e>
 80106dc:	6994      	ldr	r4, [r2, #24]
 80106de:	42a3      	cmp	r3, r4
 80106e0:	db01      	blt.n	80106e6 <__sfputc_r+0x16>
 80106e2:	290a      	cmp	r1, #10
 80106e4:	d103      	bne.n	80106ee <__sfputc_r+0x1e>
 80106e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106ea:	f7ff bc69 	b.w	800ffc0 <__swbuf_r>
 80106ee:	6813      	ldr	r3, [r2, #0]
 80106f0:	1c58      	adds	r0, r3, #1
 80106f2:	6010      	str	r0, [r2, #0]
 80106f4:	7019      	strb	r1, [r3, #0]
 80106f6:	4608      	mov	r0, r1
 80106f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106fc:	4770      	bx	lr

080106fe <__sfputs_r>:
 80106fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010700:	4606      	mov	r6, r0
 8010702:	460f      	mov	r7, r1
 8010704:	4614      	mov	r4, r2
 8010706:	18d5      	adds	r5, r2, r3
 8010708:	42ac      	cmp	r4, r5
 801070a:	d101      	bne.n	8010710 <__sfputs_r+0x12>
 801070c:	2000      	movs	r0, #0
 801070e:	e007      	b.n	8010720 <__sfputs_r+0x22>
 8010710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010714:	463a      	mov	r2, r7
 8010716:	4630      	mov	r0, r6
 8010718:	f7ff ffda 	bl	80106d0 <__sfputc_r>
 801071c:	1c43      	adds	r3, r0, #1
 801071e:	d1f3      	bne.n	8010708 <__sfputs_r+0xa>
 8010720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010724 <_vfiprintf_r>:
 8010724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010728:	460d      	mov	r5, r1
 801072a:	b09d      	sub	sp, #116	; 0x74
 801072c:	4614      	mov	r4, r2
 801072e:	4698      	mov	r8, r3
 8010730:	4606      	mov	r6, r0
 8010732:	b118      	cbz	r0, 801073c <_vfiprintf_r+0x18>
 8010734:	6983      	ldr	r3, [r0, #24]
 8010736:	b90b      	cbnz	r3, 801073c <_vfiprintf_r+0x18>
 8010738:	f7ff fe1c 	bl	8010374 <__sinit>
 801073c:	4b89      	ldr	r3, [pc, #548]	; (8010964 <_vfiprintf_r+0x240>)
 801073e:	429d      	cmp	r5, r3
 8010740:	d11b      	bne.n	801077a <_vfiprintf_r+0x56>
 8010742:	6875      	ldr	r5, [r6, #4]
 8010744:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010746:	07d9      	lsls	r1, r3, #31
 8010748:	d405      	bmi.n	8010756 <_vfiprintf_r+0x32>
 801074a:	89ab      	ldrh	r3, [r5, #12]
 801074c:	059a      	lsls	r2, r3, #22
 801074e:	d402      	bmi.n	8010756 <_vfiprintf_r+0x32>
 8010750:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010752:	f7ff fead 	bl	80104b0 <__retarget_lock_acquire_recursive>
 8010756:	89ab      	ldrh	r3, [r5, #12]
 8010758:	071b      	lsls	r3, r3, #28
 801075a:	d501      	bpl.n	8010760 <_vfiprintf_r+0x3c>
 801075c:	692b      	ldr	r3, [r5, #16]
 801075e:	b9eb      	cbnz	r3, 801079c <_vfiprintf_r+0x78>
 8010760:	4629      	mov	r1, r5
 8010762:	4630      	mov	r0, r6
 8010764:	f7ff fc7e 	bl	8010064 <__swsetup_r>
 8010768:	b1c0      	cbz	r0, 801079c <_vfiprintf_r+0x78>
 801076a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801076c:	07dc      	lsls	r4, r3, #31
 801076e:	d50e      	bpl.n	801078e <_vfiprintf_r+0x6a>
 8010770:	f04f 30ff 	mov.w	r0, #4294967295
 8010774:	b01d      	add	sp, #116	; 0x74
 8010776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801077a:	4b7b      	ldr	r3, [pc, #492]	; (8010968 <_vfiprintf_r+0x244>)
 801077c:	429d      	cmp	r5, r3
 801077e:	d101      	bne.n	8010784 <_vfiprintf_r+0x60>
 8010780:	68b5      	ldr	r5, [r6, #8]
 8010782:	e7df      	b.n	8010744 <_vfiprintf_r+0x20>
 8010784:	4b79      	ldr	r3, [pc, #484]	; (801096c <_vfiprintf_r+0x248>)
 8010786:	429d      	cmp	r5, r3
 8010788:	bf08      	it	eq
 801078a:	68f5      	ldreq	r5, [r6, #12]
 801078c:	e7da      	b.n	8010744 <_vfiprintf_r+0x20>
 801078e:	89ab      	ldrh	r3, [r5, #12]
 8010790:	0598      	lsls	r0, r3, #22
 8010792:	d4ed      	bmi.n	8010770 <_vfiprintf_r+0x4c>
 8010794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010796:	f7ff fe8c 	bl	80104b2 <__retarget_lock_release_recursive>
 801079a:	e7e9      	b.n	8010770 <_vfiprintf_r+0x4c>
 801079c:	2300      	movs	r3, #0
 801079e:	9309      	str	r3, [sp, #36]	; 0x24
 80107a0:	2320      	movs	r3, #32
 80107a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80107a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80107aa:	2330      	movs	r3, #48	; 0x30
 80107ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010970 <_vfiprintf_r+0x24c>
 80107b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80107b4:	f04f 0901 	mov.w	r9, #1
 80107b8:	4623      	mov	r3, r4
 80107ba:	469a      	mov	sl, r3
 80107bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107c0:	b10a      	cbz	r2, 80107c6 <_vfiprintf_r+0xa2>
 80107c2:	2a25      	cmp	r2, #37	; 0x25
 80107c4:	d1f9      	bne.n	80107ba <_vfiprintf_r+0x96>
 80107c6:	ebba 0b04 	subs.w	fp, sl, r4
 80107ca:	d00b      	beq.n	80107e4 <_vfiprintf_r+0xc0>
 80107cc:	465b      	mov	r3, fp
 80107ce:	4622      	mov	r2, r4
 80107d0:	4629      	mov	r1, r5
 80107d2:	4630      	mov	r0, r6
 80107d4:	f7ff ff93 	bl	80106fe <__sfputs_r>
 80107d8:	3001      	adds	r0, #1
 80107da:	f000 80aa 	beq.w	8010932 <_vfiprintf_r+0x20e>
 80107de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107e0:	445a      	add	r2, fp
 80107e2:	9209      	str	r2, [sp, #36]	; 0x24
 80107e4:	f89a 3000 	ldrb.w	r3, [sl]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	f000 80a2 	beq.w	8010932 <_vfiprintf_r+0x20e>
 80107ee:	2300      	movs	r3, #0
 80107f0:	f04f 32ff 	mov.w	r2, #4294967295
 80107f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80107f8:	f10a 0a01 	add.w	sl, sl, #1
 80107fc:	9304      	str	r3, [sp, #16]
 80107fe:	9307      	str	r3, [sp, #28]
 8010800:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010804:	931a      	str	r3, [sp, #104]	; 0x68
 8010806:	4654      	mov	r4, sl
 8010808:	2205      	movs	r2, #5
 801080a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801080e:	4858      	ldr	r0, [pc, #352]	; (8010970 <_vfiprintf_r+0x24c>)
 8010810:	f7f9 fce6 	bl	800a1e0 <memchr>
 8010814:	9a04      	ldr	r2, [sp, #16]
 8010816:	b9d8      	cbnz	r0, 8010850 <_vfiprintf_r+0x12c>
 8010818:	06d1      	lsls	r1, r2, #27
 801081a:	bf44      	itt	mi
 801081c:	2320      	movmi	r3, #32
 801081e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010822:	0713      	lsls	r3, r2, #28
 8010824:	bf44      	itt	mi
 8010826:	232b      	movmi	r3, #43	; 0x2b
 8010828:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801082c:	f89a 3000 	ldrb.w	r3, [sl]
 8010830:	2b2a      	cmp	r3, #42	; 0x2a
 8010832:	d015      	beq.n	8010860 <_vfiprintf_r+0x13c>
 8010834:	9a07      	ldr	r2, [sp, #28]
 8010836:	4654      	mov	r4, sl
 8010838:	2000      	movs	r0, #0
 801083a:	f04f 0c0a 	mov.w	ip, #10
 801083e:	4621      	mov	r1, r4
 8010840:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010844:	3b30      	subs	r3, #48	; 0x30
 8010846:	2b09      	cmp	r3, #9
 8010848:	d94e      	bls.n	80108e8 <_vfiprintf_r+0x1c4>
 801084a:	b1b0      	cbz	r0, 801087a <_vfiprintf_r+0x156>
 801084c:	9207      	str	r2, [sp, #28]
 801084e:	e014      	b.n	801087a <_vfiprintf_r+0x156>
 8010850:	eba0 0308 	sub.w	r3, r0, r8
 8010854:	fa09 f303 	lsl.w	r3, r9, r3
 8010858:	4313      	orrs	r3, r2
 801085a:	9304      	str	r3, [sp, #16]
 801085c:	46a2      	mov	sl, r4
 801085e:	e7d2      	b.n	8010806 <_vfiprintf_r+0xe2>
 8010860:	9b03      	ldr	r3, [sp, #12]
 8010862:	1d19      	adds	r1, r3, #4
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	9103      	str	r1, [sp, #12]
 8010868:	2b00      	cmp	r3, #0
 801086a:	bfbb      	ittet	lt
 801086c:	425b      	neglt	r3, r3
 801086e:	f042 0202 	orrlt.w	r2, r2, #2
 8010872:	9307      	strge	r3, [sp, #28]
 8010874:	9307      	strlt	r3, [sp, #28]
 8010876:	bfb8      	it	lt
 8010878:	9204      	strlt	r2, [sp, #16]
 801087a:	7823      	ldrb	r3, [r4, #0]
 801087c:	2b2e      	cmp	r3, #46	; 0x2e
 801087e:	d10c      	bne.n	801089a <_vfiprintf_r+0x176>
 8010880:	7863      	ldrb	r3, [r4, #1]
 8010882:	2b2a      	cmp	r3, #42	; 0x2a
 8010884:	d135      	bne.n	80108f2 <_vfiprintf_r+0x1ce>
 8010886:	9b03      	ldr	r3, [sp, #12]
 8010888:	1d1a      	adds	r2, r3, #4
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	9203      	str	r2, [sp, #12]
 801088e:	2b00      	cmp	r3, #0
 8010890:	bfb8      	it	lt
 8010892:	f04f 33ff 	movlt.w	r3, #4294967295
 8010896:	3402      	adds	r4, #2
 8010898:	9305      	str	r3, [sp, #20]
 801089a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010980 <_vfiprintf_r+0x25c>
 801089e:	7821      	ldrb	r1, [r4, #0]
 80108a0:	2203      	movs	r2, #3
 80108a2:	4650      	mov	r0, sl
 80108a4:	f7f9 fc9c 	bl	800a1e0 <memchr>
 80108a8:	b140      	cbz	r0, 80108bc <_vfiprintf_r+0x198>
 80108aa:	2340      	movs	r3, #64	; 0x40
 80108ac:	eba0 000a 	sub.w	r0, r0, sl
 80108b0:	fa03 f000 	lsl.w	r0, r3, r0
 80108b4:	9b04      	ldr	r3, [sp, #16]
 80108b6:	4303      	orrs	r3, r0
 80108b8:	3401      	adds	r4, #1
 80108ba:	9304      	str	r3, [sp, #16]
 80108bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108c0:	482c      	ldr	r0, [pc, #176]	; (8010974 <_vfiprintf_r+0x250>)
 80108c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80108c6:	2206      	movs	r2, #6
 80108c8:	f7f9 fc8a 	bl	800a1e0 <memchr>
 80108cc:	2800      	cmp	r0, #0
 80108ce:	d03f      	beq.n	8010950 <_vfiprintf_r+0x22c>
 80108d0:	4b29      	ldr	r3, [pc, #164]	; (8010978 <_vfiprintf_r+0x254>)
 80108d2:	bb1b      	cbnz	r3, 801091c <_vfiprintf_r+0x1f8>
 80108d4:	9b03      	ldr	r3, [sp, #12]
 80108d6:	3307      	adds	r3, #7
 80108d8:	f023 0307 	bic.w	r3, r3, #7
 80108dc:	3308      	adds	r3, #8
 80108de:	9303      	str	r3, [sp, #12]
 80108e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108e2:	443b      	add	r3, r7
 80108e4:	9309      	str	r3, [sp, #36]	; 0x24
 80108e6:	e767      	b.n	80107b8 <_vfiprintf_r+0x94>
 80108e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80108ec:	460c      	mov	r4, r1
 80108ee:	2001      	movs	r0, #1
 80108f0:	e7a5      	b.n	801083e <_vfiprintf_r+0x11a>
 80108f2:	2300      	movs	r3, #0
 80108f4:	3401      	adds	r4, #1
 80108f6:	9305      	str	r3, [sp, #20]
 80108f8:	4619      	mov	r1, r3
 80108fa:	f04f 0c0a 	mov.w	ip, #10
 80108fe:	4620      	mov	r0, r4
 8010900:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010904:	3a30      	subs	r2, #48	; 0x30
 8010906:	2a09      	cmp	r2, #9
 8010908:	d903      	bls.n	8010912 <_vfiprintf_r+0x1ee>
 801090a:	2b00      	cmp	r3, #0
 801090c:	d0c5      	beq.n	801089a <_vfiprintf_r+0x176>
 801090e:	9105      	str	r1, [sp, #20]
 8010910:	e7c3      	b.n	801089a <_vfiprintf_r+0x176>
 8010912:	fb0c 2101 	mla	r1, ip, r1, r2
 8010916:	4604      	mov	r4, r0
 8010918:	2301      	movs	r3, #1
 801091a:	e7f0      	b.n	80108fe <_vfiprintf_r+0x1da>
 801091c:	ab03      	add	r3, sp, #12
 801091e:	9300      	str	r3, [sp, #0]
 8010920:	462a      	mov	r2, r5
 8010922:	4b16      	ldr	r3, [pc, #88]	; (801097c <_vfiprintf_r+0x258>)
 8010924:	a904      	add	r1, sp, #16
 8010926:	4630      	mov	r0, r6
 8010928:	f3af 8000 	nop.w
 801092c:	4607      	mov	r7, r0
 801092e:	1c78      	adds	r0, r7, #1
 8010930:	d1d6      	bne.n	80108e0 <_vfiprintf_r+0x1bc>
 8010932:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010934:	07d9      	lsls	r1, r3, #31
 8010936:	d405      	bmi.n	8010944 <_vfiprintf_r+0x220>
 8010938:	89ab      	ldrh	r3, [r5, #12]
 801093a:	059a      	lsls	r2, r3, #22
 801093c:	d402      	bmi.n	8010944 <_vfiprintf_r+0x220>
 801093e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010940:	f7ff fdb7 	bl	80104b2 <__retarget_lock_release_recursive>
 8010944:	89ab      	ldrh	r3, [r5, #12]
 8010946:	065b      	lsls	r3, r3, #25
 8010948:	f53f af12 	bmi.w	8010770 <_vfiprintf_r+0x4c>
 801094c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801094e:	e711      	b.n	8010774 <_vfiprintf_r+0x50>
 8010950:	ab03      	add	r3, sp, #12
 8010952:	9300      	str	r3, [sp, #0]
 8010954:	462a      	mov	r2, r5
 8010956:	4b09      	ldr	r3, [pc, #36]	; (801097c <_vfiprintf_r+0x258>)
 8010958:	a904      	add	r1, sp, #16
 801095a:	4630      	mov	r0, r6
 801095c:	f000 f880 	bl	8010a60 <_printf_i>
 8010960:	e7e4      	b.n	801092c <_vfiprintf_r+0x208>
 8010962:	bf00      	nop
 8010964:	08011510 	.word	0x08011510
 8010968:	08011530 	.word	0x08011530
 801096c:	080114f0 	.word	0x080114f0
 8010970:	08011550 	.word	0x08011550
 8010974:	0801155a 	.word	0x0801155a
 8010978:	00000000 	.word	0x00000000
 801097c:	080106ff 	.word	0x080106ff
 8010980:	08011556 	.word	0x08011556

08010984 <_printf_common>:
 8010984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010988:	4616      	mov	r6, r2
 801098a:	4699      	mov	r9, r3
 801098c:	688a      	ldr	r2, [r1, #8]
 801098e:	690b      	ldr	r3, [r1, #16]
 8010990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010994:	4293      	cmp	r3, r2
 8010996:	bfb8      	it	lt
 8010998:	4613      	movlt	r3, r2
 801099a:	6033      	str	r3, [r6, #0]
 801099c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80109a0:	4607      	mov	r7, r0
 80109a2:	460c      	mov	r4, r1
 80109a4:	b10a      	cbz	r2, 80109aa <_printf_common+0x26>
 80109a6:	3301      	adds	r3, #1
 80109a8:	6033      	str	r3, [r6, #0]
 80109aa:	6823      	ldr	r3, [r4, #0]
 80109ac:	0699      	lsls	r1, r3, #26
 80109ae:	bf42      	ittt	mi
 80109b0:	6833      	ldrmi	r3, [r6, #0]
 80109b2:	3302      	addmi	r3, #2
 80109b4:	6033      	strmi	r3, [r6, #0]
 80109b6:	6825      	ldr	r5, [r4, #0]
 80109b8:	f015 0506 	ands.w	r5, r5, #6
 80109bc:	d106      	bne.n	80109cc <_printf_common+0x48>
 80109be:	f104 0a19 	add.w	sl, r4, #25
 80109c2:	68e3      	ldr	r3, [r4, #12]
 80109c4:	6832      	ldr	r2, [r6, #0]
 80109c6:	1a9b      	subs	r3, r3, r2
 80109c8:	42ab      	cmp	r3, r5
 80109ca:	dc26      	bgt.n	8010a1a <_printf_common+0x96>
 80109cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80109d0:	1e13      	subs	r3, r2, #0
 80109d2:	6822      	ldr	r2, [r4, #0]
 80109d4:	bf18      	it	ne
 80109d6:	2301      	movne	r3, #1
 80109d8:	0692      	lsls	r2, r2, #26
 80109da:	d42b      	bmi.n	8010a34 <_printf_common+0xb0>
 80109dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80109e0:	4649      	mov	r1, r9
 80109e2:	4638      	mov	r0, r7
 80109e4:	47c0      	blx	r8
 80109e6:	3001      	adds	r0, #1
 80109e8:	d01e      	beq.n	8010a28 <_printf_common+0xa4>
 80109ea:	6823      	ldr	r3, [r4, #0]
 80109ec:	68e5      	ldr	r5, [r4, #12]
 80109ee:	6832      	ldr	r2, [r6, #0]
 80109f0:	f003 0306 	and.w	r3, r3, #6
 80109f4:	2b04      	cmp	r3, #4
 80109f6:	bf08      	it	eq
 80109f8:	1aad      	subeq	r5, r5, r2
 80109fa:	68a3      	ldr	r3, [r4, #8]
 80109fc:	6922      	ldr	r2, [r4, #16]
 80109fe:	bf0c      	ite	eq
 8010a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a04:	2500      	movne	r5, #0
 8010a06:	4293      	cmp	r3, r2
 8010a08:	bfc4      	itt	gt
 8010a0a:	1a9b      	subgt	r3, r3, r2
 8010a0c:	18ed      	addgt	r5, r5, r3
 8010a0e:	2600      	movs	r6, #0
 8010a10:	341a      	adds	r4, #26
 8010a12:	42b5      	cmp	r5, r6
 8010a14:	d11a      	bne.n	8010a4c <_printf_common+0xc8>
 8010a16:	2000      	movs	r0, #0
 8010a18:	e008      	b.n	8010a2c <_printf_common+0xa8>
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	4652      	mov	r2, sl
 8010a1e:	4649      	mov	r1, r9
 8010a20:	4638      	mov	r0, r7
 8010a22:	47c0      	blx	r8
 8010a24:	3001      	adds	r0, #1
 8010a26:	d103      	bne.n	8010a30 <_printf_common+0xac>
 8010a28:	f04f 30ff 	mov.w	r0, #4294967295
 8010a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a30:	3501      	adds	r5, #1
 8010a32:	e7c6      	b.n	80109c2 <_printf_common+0x3e>
 8010a34:	18e1      	adds	r1, r4, r3
 8010a36:	1c5a      	adds	r2, r3, #1
 8010a38:	2030      	movs	r0, #48	; 0x30
 8010a3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010a3e:	4422      	add	r2, r4
 8010a40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010a44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010a48:	3302      	adds	r3, #2
 8010a4a:	e7c7      	b.n	80109dc <_printf_common+0x58>
 8010a4c:	2301      	movs	r3, #1
 8010a4e:	4622      	mov	r2, r4
 8010a50:	4649      	mov	r1, r9
 8010a52:	4638      	mov	r0, r7
 8010a54:	47c0      	blx	r8
 8010a56:	3001      	adds	r0, #1
 8010a58:	d0e6      	beq.n	8010a28 <_printf_common+0xa4>
 8010a5a:	3601      	adds	r6, #1
 8010a5c:	e7d9      	b.n	8010a12 <_printf_common+0x8e>
	...

08010a60 <_printf_i>:
 8010a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a64:	460c      	mov	r4, r1
 8010a66:	4691      	mov	r9, r2
 8010a68:	7e27      	ldrb	r7, [r4, #24]
 8010a6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010a6c:	2f78      	cmp	r7, #120	; 0x78
 8010a6e:	4680      	mov	r8, r0
 8010a70:	469a      	mov	sl, r3
 8010a72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a76:	d807      	bhi.n	8010a88 <_printf_i+0x28>
 8010a78:	2f62      	cmp	r7, #98	; 0x62
 8010a7a:	d80a      	bhi.n	8010a92 <_printf_i+0x32>
 8010a7c:	2f00      	cmp	r7, #0
 8010a7e:	f000 80d8 	beq.w	8010c32 <_printf_i+0x1d2>
 8010a82:	2f58      	cmp	r7, #88	; 0x58
 8010a84:	f000 80a3 	beq.w	8010bce <_printf_i+0x16e>
 8010a88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010a8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010a90:	e03a      	b.n	8010b08 <_printf_i+0xa8>
 8010a92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010a96:	2b15      	cmp	r3, #21
 8010a98:	d8f6      	bhi.n	8010a88 <_printf_i+0x28>
 8010a9a:	a001      	add	r0, pc, #4	; (adr r0, 8010aa0 <_printf_i+0x40>)
 8010a9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010aa0:	08010af9 	.word	0x08010af9
 8010aa4:	08010b0d 	.word	0x08010b0d
 8010aa8:	08010a89 	.word	0x08010a89
 8010aac:	08010a89 	.word	0x08010a89
 8010ab0:	08010a89 	.word	0x08010a89
 8010ab4:	08010a89 	.word	0x08010a89
 8010ab8:	08010b0d 	.word	0x08010b0d
 8010abc:	08010a89 	.word	0x08010a89
 8010ac0:	08010a89 	.word	0x08010a89
 8010ac4:	08010a89 	.word	0x08010a89
 8010ac8:	08010a89 	.word	0x08010a89
 8010acc:	08010c19 	.word	0x08010c19
 8010ad0:	08010b3d 	.word	0x08010b3d
 8010ad4:	08010bfb 	.word	0x08010bfb
 8010ad8:	08010a89 	.word	0x08010a89
 8010adc:	08010a89 	.word	0x08010a89
 8010ae0:	08010c3b 	.word	0x08010c3b
 8010ae4:	08010a89 	.word	0x08010a89
 8010ae8:	08010b3d 	.word	0x08010b3d
 8010aec:	08010a89 	.word	0x08010a89
 8010af0:	08010a89 	.word	0x08010a89
 8010af4:	08010c03 	.word	0x08010c03
 8010af8:	680b      	ldr	r3, [r1, #0]
 8010afa:	1d1a      	adds	r2, r3, #4
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	600a      	str	r2, [r1, #0]
 8010b00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010b04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010b08:	2301      	movs	r3, #1
 8010b0a:	e0a3      	b.n	8010c54 <_printf_i+0x1f4>
 8010b0c:	6825      	ldr	r5, [r4, #0]
 8010b0e:	6808      	ldr	r0, [r1, #0]
 8010b10:	062e      	lsls	r6, r5, #24
 8010b12:	f100 0304 	add.w	r3, r0, #4
 8010b16:	d50a      	bpl.n	8010b2e <_printf_i+0xce>
 8010b18:	6805      	ldr	r5, [r0, #0]
 8010b1a:	600b      	str	r3, [r1, #0]
 8010b1c:	2d00      	cmp	r5, #0
 8010b1e:	da03      	bge.n	8010b28 <_printf_i+0xc8>
 8010b20:	232d      	movs	r3, #45	; 0x2d
 8010b22:	426d      	negs	r5, r5
 8010b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b28:	485e      	ldr	r0, [pc, #376]	; (8010ca4 <_printf_i+0x244>)
 8010b2a:	230a      	movs	r3, #10
 8010b2c:	e019      	b.n	8010b62 <_printf_i+0x102>
 8010b2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010b32:	6805      	ldr	r5, [r0, #0]
 8010b34:	600b      	str	r3, [r1, #0]
 8010b36:	bf18      	it	ne
 8010b38:	b22d      	sxthne	r5, r5
 8010b3a:	e7ef      	b.n	8010b1c <_printf_i+0xbc>
 8010b3c:	680b      	ldr	r3, [r1, #0]
 8010b3e:	6825      	ldr	r5, [r4, #0]
 8010b40:	1d18      	adds	r0, r3, #4
 8010b42:	6008      	str	r0, [r1, #0]
 8010b44:	0628      	lsls	r0, r5, #24
 8010b46:	d501      	bpl.n	8010b4c <_printf_i+0xec>
 8010b48:	681d      	ldr	r5, [r3, #0]
 8010b4a:	e002      	b.n	8010b52 <_printf_i+0xf2>
 8010b4c:	0669      	lsls	r1, r5, #25
 8010b4e:	d5fb      	bpl.n	8010b48 <_printf_i+0xe8>
 8010b50:	881d      	ldrh	r5, [r3, #0]
 8010b52:	4854      	ldr	r0, [pc, #336]	; (8010ca4 <_printf_i+0x244>)
 8010b54:	2f6f      	cmp	r7, #111	; 0x6f
 8010b56:	bf0c      	ite	eq
 8010b58:	2308      	moveq	r3, #8
 8010b5a:	230a      	movne	r3, #10
 8010b5c:	2100      	movs	r1, #0
 8010b5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010b62:	6866      	ldr	r6, [r4, #4]
 8010b64:	60a6      	str	r6, [r4, #8]
 8010b66:	2e00      	cmp	r6, #0
 8010b68:	bfa2      	ittt	ge
 8010b6a:	6821      	ldrge	r1, [r4, #0]
 8010b6c:	f021 0104 	bicge.w	r1, r1, #4
 8010b70:	6021      	strge	r1, [r4, #0]
 8010b72:	b90d      	cbnz	r5, 8010b78 <_printf_i+0x118>
 8010b74:	2e00      	cmp	r6, #0
 8010b76:	d04d      	beq.n	8010c14 <_printf_i+0x1b4>
 8010b78:	4616      	mov	r6, r2
 8010b7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8010b7e:	fb03 5711 	mls	r7, r3, r1, r5
 8010b82:	5dc7      	ldrb	r7, [r0, r7]
 8010b84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010b88:	462f      	mov	r7, r5
 8010b8a:	42bb      	cmp	r3, r7
 8010b8c:	460d      	mov	r5, r1
 8010b8e:	d9f4      	bls.n	8010b7a <_printf_i+0x11a>
 8010b90:	2b08      	cmp	r3, #8
 8010b92:	d10b      	bne.n	8010bac <_printf_i+0x14c>
 8010b94:	6823      	ldr	r3, [r4, #0]
 8010b96:	07df      	lsls	r7, r3, #31
 8010b98:	d508      	bpl.n	8010bac <_printf_i+0x14c>
 8010b9a:	6923      	ldr	r3, [r4, #16]
 8010b9c:	6861      	ldr	r1, [r4, #4]
 8010b9e:	4299      	cmp	r1, r3
 8010ba0:	bfde      	ittt	le
 8010ba2:	2330      	movle	r3, #48	; 0x30
 8010ba4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010ba8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010bac:	1b92      	subs	r2, r2, r6
 8010bae:	6122      	str	r2, [r4, #16]
 8010bb0:	f8cd a000 	str.w	sl, [sp]
 8010bb4:	464b      	mov	r3, r9
 8010bb6:	aa03      	add	r2, sp, #12
 8010bb8:	4621      	mov	r1, r4
 8010bba:	4640      	mov	r0, r8
 8010bbc:	f7ff fee2 	bl	8010984 <_printf_common>
 8010bc0:	3001      	adds	r0, #1
 8010bc2:	d14c      	bne.n	8010c5e <_printf_i+0x1fe>
 8010bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8010bc8:	b004      	add	sp, #16
 8010bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bce:	4835      	ldr	r0, [pc, #212]	; (8010ca4 <_printf_i+0x244>)
 8010bd0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010bd4:	6823      	ldr	r3, [r4, #0]
 8010bd6:	680e      	ldr	r6, [r1, #0]
 8010bd8:	061f      	lsls	r7, r3, #24
 8010bda:	f856 5b04 	ldr.w	r5, [r6], #4
 8010bde:	600e      	str	r6, [r1, #0]
 8010be0:	d514      	bpl.n	8010c0c <_printf_i+0x1ac>
 8010be2:	07d9      	lsls	r1, r3, #31
 8010be4:	bf44      	itt	mi
 8010be6:	f043 0320 	orrmi.w	r3, r3, #32
 8010bea:	6023      	strmi	r3, [r4, #0]
 8010bec:	b91d      	cbnz	r5, 8010bf6 <_printf_i+0x196>
 8010bee:	6823      	ldr	r3, [r4, #0]
 8010bf0:	f023 0320 	bic.w	r3, r3, #32
 8010bf4:	6023      	str	r3, [r4, #0]
 8010bf6:	2310      	movs	r3, #16
 8010bf8:	e7b0      	b.n	8010b5c <_printf_i+0xfc>
 8010bfa:	6823      	ldr	r3, [r4, #0]
 8010bfc:	f043 0320 	orr.w	r3, r3, #32
 8010c00:	6023      	str	r3, [r4, #0]
 8010c02:	2378      	movs	r3, #120	; 0x78
 8010c04:	4828      	ldr	r0, [pc, #160]	; (8010ca8 <_printf_i+0x248>)
 8010c06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010c0a:	e7e3      	b.n	8010bd4 <_printf_i+0x174>
 8010c0c:	065e      	lsls	r6, r3, #25
 8010c0e:	bf48      	it	mi
 8010c10:	b2ad      	uxthmi	r5, r5
 8010c12:	e7e6      	b.n	8010be2 <_printf_i+0x182>
 8010c14:	4616      	mov	r6, r2
 8010c16:	e7bb      	b.n	8010b90 <_printf_i+0x130>
 8010c18:	680b      	ldr	r3, [r1, #0]
 8010c1a:	6826      	ldr	r6, [r4, #0]
 8010c1c:	6960      	ldr	r0, [r4, #20]
 8010c1e:	1d1d      	adds	r5, r3, #4
 8010c20:	600d      	str	r5, [r1, #0]
 8010c22:	0635      	lsls	r5, r6, #24
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	d501      	bpl.n	8010c2c <_printf_i+0x1cc>
 8010c28:	6018      	str	r0, [r3, #0]
 8010c2a:	e002      	b.n	8010c32 <_printf_i+0x1d2>
 8010c2c:	0671      	lsls	r1, r6, #25
 8010c2e:	d5fb      	bpl.n	8010c28 <_printf_i+0x1c8>
 8010c30:	8018      	strh	r0, [r3, #0]
 8010c32:	2300      	movs	r3, #0
 8010c34:	6123      	str	r3, [r4, #16]
 8010c36:	4616      	mov	r6, r2
 8010c38:	e7ba      	b.n	8010bb0 <_printf_i+0x150>
 8010c3a:	680b      	ldr	r3, [r1, #0]
 8010c3c:	1d1a      	adds	r2, r3, #4
 8010c3e:	600a      	str	r2, [r1, #0]
 8010c40:	681e      	ldr	r6, [r3, #0]
 8010c42:	6862      	ldr	r2, [r4, #4]
 8010c44:	2100      	movs	r1, #0
 8010c46:	4630      	mov	r0, r6
 8010c48:	f7f9 faca 	bl	800a1e0 <memchr>
 8010c4c:	b108      	cbz	r0, 8010c52 <_printf_i+0x1f2>
 8010c4e:	1b80      	subs	r0, r0, r6
 8010c50:	6060      	str	r0, [r4, #4]
 8010c52:	6863      	ldr	r3, [r4, #4]
 8010c54:	6123      	str	r3, [r4, #16]
 8010c56:	2300      	movs	r3, #0
 8010c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c5c:	e7a8      	b.n	8010bb0 <_printf_i+0x150>
 8010c5e:	6923      	ldr	r3, [r4, #16]
 8010c60:	4632      	mov	r2, r6
 8010c62:	4649      	mov	r1, r9
 8010c64:	4640      	mov	r0, r8
 8010c66:	47d0      	blx	sl
 8010c68:	3001      	adds	r0, #1
 8010c6a:	d0ab      	beq.n	8010bc4 <_printf_i+0x164>
 8010c6c:	6823      	ldr	r3, [r4, #0]
 8010c6e:	079b      	lsls	r3, r3, #30
 8010c70:	d413      	bmi.n	8010c9a <_printf_i+0x23a>
 8010c72:	68e0      	ldr	r0, [r4, #12]
 8010c74:	9b03      	ldr	r3, [sp, #12]
 8010c76:	4298      	cmp	r0, r3
 8010c78:	bfb8      	it	lt
 8010c7a:	4618      	movlt	r0, r3
 8010c7c:	e7a4      	b.n	8010bc8 <_printf_i+0x168>
 8010c7e:	2301      	movs	r3, #1
 8010c80:	4632      	mov	r2, r6
 8010c82:	4649      	mov	r1, r9
 8010c84:	4640      	mov	r0, r8
 8010c86:	47d0      	blx	sl
 8010c88:	3001      	adds	r0, #1
 8010c8a:	d09b      	beq.n	8010bc4 <_printf_i+0x164>
 8010c8c:	3501      	adds	r5, #1
 8010c8e:	68e3      	ldr	r3, [r4, #12]
 8010c90:	9903      	ldr	r1, [sp, #12]
 8010c92:	1a5b      	subs	r3, r3, r1
 8010c94:	42ab      	cmp	r3, r5
 8010c96:	dcf2      	bgt.n	8010c7e <_printf_i+0x21e>
 8010c98:	e7eb      	b.n	8010c72 <_printf_i+0x212>
 8010c9a:	2500      	movs	r5, #0
 8010c9c:	f104 0619 	add.w	r6, r4, #25
 8010ca0:	e7f5      	b.n	8010c8e <_printf_i+0x22e>
 8010ca2:	bf00      	nop
 8010ca4:	08011561 	.word	0x08011561
 8010ca8:	08011572 	.word	0x08011572

08010cac <_sbrk_r>:
 8010cac:	b538      	push	{r3, r4, r5, lr}
 8010cae:	4d06      	ldr	r5, [pc, #24]	; (8010cc8 <_sbrk_r+0x1c>)
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	4604      	mov	r4, r0
 8010cb4:	4608      	mov	r0, r1
 8010cb6:	602b      	str	r3, [r5, #0]
 8010cb8:	f7fa f900 	bl	800aebc <_sbrk>
 8010cbc:	1c43      	adds	r3, r0, #1
 8010cbe:	d102      	bne.n	8010cc6 <_sbrk_r+0x1a>
 8010cc0:	682b      	ldr	r3, [r5, #0]
 8010cc2:	b103      	cbz	r3, 8010cc6 <_sbrk_r+0x1a>
 8010cc4:	6023      	str	r3, [r4, #0]
 8010cc6:	bd38      	pop	{r3, r4, r5, pc}
 8010cc8:	20000aac 	.word	0x20000aac

08010ccc <__sread>:
 8010ccc:	b510      	push	{r4, lr}
 8010cce:	460c      	mov	r4, r1
 8010cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cd4:	f000 f8a0 	bl	8010e18 <_read_r>
 8010cd8:	2800      	cmp	r0, #0
 8010cda:	bfab      	itete	ge
 8010cdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010cde:	89a3      	ldrhlt	r3, [r4, #12]
 8010ce0:	181b      	addge	r3, r3, r0
 8010ce2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010ce6:	bfac      	ite	ge
 8010ce8:	6563      	strge	r3, [r4, #84]	; 0x54
 8010cea:	81a3      	strhlt	r3, [r4, #12]
 8010cec:	bd10      	pop	{r4, pc}

08010cee <__swrite>:
 8010cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cf2:	461f      	mov	r7, r3
 8010cf4:	898b      	ldrh	r3, [r1, #12]
 8010cf6:	05db      	lsls	r3, r3, #23
 8010cf8:	4605      	mov	r5, r0
 8010cfa:	460c      	mov	r4, r1
 8010cfc:	4616      	mov	r6, r2
 8010cfe:	d505      	bpl.n	8010d0c <__swrite+0x1e>
 8010d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d04:	2302      	movs	r3, #2
 8010d06:	2200      	movs	r2, #0
 8010d08:	f000 f868 	bl	8010ddc <_lseek_r>
 8010d0c:	89a3      	ldrh	r3, [r4, #12]
 8010d0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010d16:	81a3      	strh	r3, [r4, #12]
 8010d18:	4632      	mov	r2, r6
 8010d1a:	463b      	mov	r3, r7
 8010d1c:	4628      	mov	r0, r5
 8010d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d22:	f000 b817 	b.w	8010d54 <_write_r>

08010d26 <__sseek>:
 8010d26:	b510      	push	{r4, lr}
 8010d28:	460c      	mov	r4, r1
 8010d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d2e:	f000 f855 	bl	8010ddc <_lseek_r>
 8010d32:	1c43      	adds	r3, r0, #1
 8010d34:	89a3      	ldrh	r3, [r4, #12]
 8010d36:	bf15      	itete	ne
 8010d38:	6560      	strne	r0, [r4, #84]	; 0x54
 8010d3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010d3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010d42:	81a3      	strheq	r3, [r4, #12]
 8010d44:	bf18      	it	ne
 8010d46:	81a3      	strhne	r3, [r4, #12]
 8010d48:	bd10      	pop	{r4, pc}

08010d4a <__sclose>:
 8010d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d4e:	f000 b813 	b.w	8010d78 <_close_r>
	...

08010d54 <_write_r>:
 8010d54:	b538      	push	{r3, r4, r5, lr}
 8010d56:	4d07      	ldr	r5, [pc, #28]	; (8010d74 <_write_r+0x20>)
 8010d58:	4604      	mov	r4, r0
 8010d5a:	4608      	mov	r0, r1
 8010d5c:	4611      	mov	r1, r2
 8010d5e:	2200      	movs	r2, #0
 8010d60:	602a      	str	r2, [r5, #0]
 8010d62:	461a      	mov	r2, r3
 8010d64:	f7fa f859 	bl	800ae1a <_write>
 8010d68:	1c43      	adds	r3, r0, #1
 8010d6a:	d102      	bne.n	8010d72 <_write_r+0x1e>
 8010d6c:	682b      	ldr	r3, [r5, #0]
 8010d6e:	b103      	cbz	r3, 8010d72 <_write_r+0x1e>
 8010d70:	6023      	str	r3, [r4, #0]
 8010d72:	bd38      	pop	{r3, r4, r5, pc}
 8010d74:	20000aac 	.word	0x20000aac

08010d78 <_close_r>:
 8010d78:	b538      	push	{r3, r4, r5, lr}
 8010d7a:	4d06      	ldr	r5, [pc, #24]	; (8010d94 <_close_r+0x1c>)
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	4604      	mov	r4, r0
 8010d80:	4608      	mov	r0, r1
 8010d82:	602b      	str	r3, [r5, #0]
 8010d84:	f7fa f865 	bl	800ae52 <_close>
 8010d88:	1c43      	adds	r3, r0, #1
 8010d8a:	d102      	bne.n	8010d92 <_close_r+0x1a>
 8010d8c:	682b      	ldr	r3, [r5, #0]
 8010d8e:	b103      	cbz	r3, 8010d92 <_close_r+0x1a>
 8010d90:	6023      	str	r3, [r4, #0]
 8010d92:	bd38      	pop	{r3, r4, r5, pc}
 8010d94:	20000aac 	.word	0x20000aac

08010d98 <_fstat_r>:
 8010d98:	b538      	push	{r3, r4, r5, lr}
 8010d9a:	4d07      	ldr	r5, [pc, #28]	; (8010db8 <_fstat_r+0x20>)
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	4604      	mov	r4, r0
 8010da0:	4608      	mov	r0, r1
 8010da2:	4611      	mov	r1, r2
 8010da4:	602b      	str	r3, [r5, #0]
 8010da6:	f7fa f860 	bl	800ae6a <_fstat>
 8010daa:	1c43      	adds	r3, r0, #1
 8010dac:	d102      	bne.n	8010db4 <_fstat_r+0x1c>
 8010dae:	682b      	ldr	r3, [r5, #0]
 8010db0:	b103      	cbz	r3, 8010db4 <_fstat_r+0x1c>
 8010db2:	6023      	str	r3, [r4, #0]
 8010db4:	bd38      	pop	{r3, r4, r5, pc}
 8010db6:	bf00      	nop
 8010db8:	20000aac 	.word	0x20000aac

08010dbc <_isatty_r>:
 8010dbc:	b538      	push	{r3, r4, r5, lr}
 8010dbe:	4d06      	ldr	r5, [pc, #24]	; (8010dd8 <_isatty_r+0x1c>)
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	4604      	mov	r4, r0
 8010dc4:	4608      	mov	r0, r1
 8010dc6:	602b      	str	r3, [r5, #0]
 8010dc8:	f7fa f85f 	bl	800ae8a <_isatty>
 8010dcc:	1c43      	adds	r3, r0, #1
 8010dce:	d102      	bne.n	8010dd6 <_isatty_r+0x1a>
 8010dd0:	682b      	ldr	r3, [r5, #0]
 8010dd2:	b103      	cbz	r3, 8010dd6 <_isatty_r+0x1a>
 8010dd4:	6023      	str	r3, [r4, #0]
 8010dd6:	bd38      	pop	{r3, r4, r5, pc}
 8010dd8:	20000aac 	.word	0x20000aac

08010ddc <_lseek_r>:
 8010ddc:	b538      	push	{r3, r4, r5, lr}
 8010dde:	4d07      	ldr	r5, [pc, #28]	; (8010dfc <_lseek_r+0x20>)
 8010de0:	4604      	mov	r4, r0
 8010de2:	4608      	mov	r0, r1
 8010de4:	4611      	mov	r1, r2
 8010de6:	2200      	movs	r2, #0
 8010de8:	602a      	str	r2, [r5, #0]
 8010dea:	461a      	mov	r2, r3
 8010dec:	f7fa f858 	bl	800aea0 <_lseek>
 8010df0:	1c43      	adds	r3, r0, #1
 8010df2:	d102      	bne.n	8010dfa <_lseek_r+0x1e>
 8010df4:	682b      	ldr	r3, [r5, #0]
 8010df6:	b103      	cbz	r3, 8010dfa <_lseek_r+0x1e>
 8010df8:	6023      	str	r3, [r4, #0]
 8010dfa:	bd38      	pop	{r3, r4, r5, pc}
 8010dfc:	20000aac 	.word	0x20000aac

08010e00 <__malloc_lock>:
 8010e00:	4801      	ldr	r0, [pc, #4]	; (8010e08 <__malloc_lock+0x8>)
 8010e02:	f7ff bb55 	b.w	80104b0 <__retarget_lock_acquire_recursive>
 8010e06:	bf00      	nop
 8010e08:	20000aa4 	.word	0x20000aa4

08010e0c <__malloc_unlock>:
 8010e0c:	4801      	ldr	r0, [pc, #4]	; (8010e14 <__malloc_unlock+0x8>)
 8010e0e:	f7ff bb50 	b.w	80104b2 <__retarget_lock_release_recursive>
 8010e12:	bf00      	nop
 8010e14:	20000aa4 	.word	0x20000aa4

08010e18 <_read_r>:
 8010e18:	b538      	push	{r3, r4, r5, lr}
 8010e1a:	4d07      	ldr	r5, [pc, #28]	; (8010e38 <_read_r+0x20>)
 8010e1c:	4604      	mov	r4, r0
 8010e1e:	4608      	mov	r0, r1
 8010e20:	4611      	mov	r1, r2
 8010e22:	2200      	movs	r2, #0
 8010e24:	602a      	str	r2, [r5, #0]
 8010e26:	461a      	mov	r2, r3
 8010e28:	f7f9 ffda 	bl	800ade0 <_read>
 8010e2c:	1c43      	adds	r3, r0, #1
 8010e2e:	d102      	bne.n	8010e36 <_read_r+0x1e>
 8010e30:	682b      	ldr	r3, [r5, #0]
 8010e32:	b103      	cbz	r3, 8010e36 <_read_r+0x1e>
 8010e34:	6023      	str	r3, [r4, #0]
 8010e36:	bd38      	pop	{r3, r4, r5, pc}
 8010e38:	20000aac 	.word	0x20000aac

08010e3c <_init>:
 8010e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e3e:	bf00      	nop
 8010e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e42:	bc08      	pop	{r3}
 8010e44:	469e      	mov	lr, r3
 8010e46:	4770      	bx	lr

08010e48 <_fini>:
 8010e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e4a:	bf00      	nop
 8010e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e4e:	bc08      	pop	{r3}
 8010e50:	469e      	mov	lr, r3
 8010e52:	4770      	bx	lr
