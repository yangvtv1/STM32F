
DEV_KIT_STM32F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  2 .text         00005788  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000144  08005918  08005918  00015918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08005a5c  08005a5c  00020070  2**0
                  CONTENTS
  5 .ARM          00000000  08005a5c  08005a5c  00020070  2**0
                  CONTENTS
  6 .preinit_array 00000000  08005a5c  08005a5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08005a5c  08005a5c  00015a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08005a60  08005a60  00015a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000070  20000000  08005a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000b40  20000070  08005ad4  00020070  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000bb0  08005ad4  00020bb0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000186f9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e4a  00000000  00000000  00038799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  0003b5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb0  00000000  00000000  0003c5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002148d  00000000  00000000  0003d450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c69  00000000  00000000  0005e8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c560d  00000000  00000000  00073546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00138b53  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048d8  00000000  00000000  00138ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005900 	.word	0x08005900

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005900 	.word	0x08005900

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DRV_TIM_PERIOD_ELAPSED_CALLBACK(TIM_HandleTypeDef *htim)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000280:	d102      	bne.n	8000288 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		DRV_TIMER_FNC(0);
 8000282:	2000      	movs	r0, #0
 8000284:	f004 fa0a 	bl	800469c <DRV_TIMER_FNC>
	}
}
 8000288:	bf00      	nop
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f000 fdae 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f81a 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f000 fa04 	bl	80006a8 <MX_GPIO_Init>
  MX_RTC_Init();
 80002a0:	f000 f886 	bl	80003b0 <MX_RTC_Init>
  MX_TIM2_Init();
 80002a4:	f000 f8aa 	bl	80003fc <MX_TIM2_Init>
  MX_UART4_Init();
 80002a8:	f000 f90e 	bl	80004c8 <MX_UART4_Init>
  MX_UART5_Init();
 80002ac:	f000 f93c 	bl	8000528 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80002b0:	f000 f96a 	bl	8000588 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80002b4:	f000 f998 	bl	80005e8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80002b8:	f000 f9c6 	bl	8000648 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80002bc:	4803      	ldr	r0, [pc, #12]	; (80002cc <main+0x3c>)
 80002be:	f002 fd65 	bl	8002d8c <HAL_TIM_Base_Start_IT>
  init_test_callback();
 80002c2:	f004 fb49 	bl	8004958 <init_test_callback>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	DRV_RUN();
 80002c6:	f004 fa7f 	bl	80047c8 <DRV_RUN>
 80002ca:	e7fc      	b.n	80002c6 <main+0x36>
 80002cc:	20000394 	.word	0x20000394

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b09e      	sub	sp, #120	; 0x78
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002da:	2228      	movs	r2, #40	; 0x28
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f004 fbb0 	bl	8004a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f4:	463b      	mov	r3, r7
 80002f6:	223c      	movs	r2, #60	; 0x3c
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f004 fba2 	bl	8004a44 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000300:	230b      	movs	r3, #11
 8000302:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000304:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000308:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030e:	2301      	movs	r3, #1
 8000310:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000312:	2310      	movs	r3, #16
 8000314:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000316:	2301      	movs	r3, #1
 8000318:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031a:	2302      	movs	r3, #2
 800031c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800031e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000322:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000324:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000328:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800032e:	4618      	mov	r0, r3
 8000330:	f001 f8e0 	bl	80014f4 <HAL_RCC_OscConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800033a:	f000 fa51 	bl	80007e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033e:	230f      	movs	r3, #15
 8000340:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000342:	2302      	movs	r3, #2
 8000344:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800034e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000354:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000358:	2102      	movs	r1, #2
 800035a:	4618      	mov	r0, r3
 800035c:	f001 ffd2 	bl	8002304 <HAL_RCC_ClockConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000366:	f000 fa3b 	bl	80007e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 800036a:	4b10      	ldr	r3, [pc, #64]	; (80003ac <SystemClock_Config+0xdc>)
 800036c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800036e:	2300      	movs	r3, #0
 8000370:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000376:	2300      	movs	r3, #0
 8000378:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000382:	2300      	movs	r3, #0
 8000384:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000386:	f44f 7300 	mov.w	r3, #512	; 0x200
 800038a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800038c:	2300      	movs	r3, #0
 800038e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000390:	463b      	mov	r3, r7
 8000392:	4618      	mov	r0, r3
 8000394:	f002 f9ec 	bl	8002770 <HAL_RCCEx_PeriphCLKConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800039e:	f000 fa1f 	bl	80007e0 <Error_Handler>
  }
}
 80003a2:	bf00      	nop
 80003a4:	3778      	adds	r7, #120	; 0x78
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	0003003f 	.word	0x0003003f

080003b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MX_RTC_Init+0x44>)
 80003b6:	4a10      	ldr	r2, [pc, #64]	; (80003f8 <MX_RTC_Init+0x48>)
 80003b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <MX_RTC_Init+0x44>)
 80003bc:	2200      	movs	r2, #0
 80003be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <MX_RTC_Init+0x44>)
 80003c2:	227f      	movs	r2, #127	; 0x7f
 80003c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <MX_RTC_Init+0x44>)
 80003c8:	22ff      	movs	r2, #255	; 0xff
 80003ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MX_RTC_Init+0x44>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <MX_RTC_Init+0x44>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <MX_RTC_Init+0x44>)
 80003da:	2200      	movs	r2, #0
 80003dc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003de:	4805      	ldr	r0, [pc, #20]	; (80003f4 <MX_RTC_Init+0x44>)
 80003e0:	f002 fb76 	bl	8002ad0 <HAL_RTC_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80003ea:	f000 f9f9 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000288 	.word	0x20000288
 80003f8:	40002800 	.word	0x40002800

080003fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b088      	sub	sp, #32
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000402:	f107 0310 	add.w	r3, r7, #16
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800041a:	4b26      	ldr	r3, [pc, #152]	; (80004b4 <MX_TIM2_Init+0xb8>)
 800041c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000420:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8000422:	4b24      	ldr	r3, [pc, #144]	; (80004b4 <MX_TIM2_Init+0xb8>)
 8000424:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000428:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800042a:	4b22      	ldr	r3, [pc, #136]	; (80004b4 <MX_TIM2_Init+0xb8>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9000-1;
 8000430:	4b20      	ldr	r3, [pc, #128]	; (80004b4 <MX_TIM2_Init+0xb8>)
 8000432:	f242 3227 	movw	r2, #8999	; 0x2327
 8000436:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000438:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <MX_TIM2_Init+0xb8>)
 800043a:	2200      	movs	r2, #0
 800043c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800043e:	4b1d      	ldr	r3, [pc, #116]	; (80004b4 <MX_TIM2_Init+0xb8>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000444:	481b      	ldr	r0, [pc, #108]	; (80004b4 <MX_TIM2_Init+0xb8>)
 8000446:	f002 fc49 	bl	8002cdc <HAL_TIM_Base_Init>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000450:	f000 f9c6 	bl	80007e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000458:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800045a:	f107 0310 	add.w	r3, r7, #16
 800045e:	4619      	mov	r1, r3
 8000460:	4814      	ldr	r0, [pc, #80]	; (80004b4 <MX_TIM2_Init+0xb8>)
 8000462:	f002 fe1c 	bl	800309e <HAL_TIM_ConfigClockSource>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800046c:	f000 f9b8 	bl	80007e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000470:	2300      	movs	r3, #0
 8000472:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000474:	2300      	movs	r3, #0
 8000476:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	4619      	mov	r1, r3
 800047c:	480d      	ldr	r0, [pc, #52]	; (80004b4 <MX_TIM2_Init+0xb8>)
 800047e:	f003 f829 	bl	80034d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000488:	f000 f9aa 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	LOGA(INF_FILE, "REGISTER\r\n");
 800048c:	480a      	ldr	r0, [pc, #40]	; (80004b8 <MX_TIM2_Init+0xbc>)
 800048e:	f004 fae1 	bl	8004a54 <iprintf>
 8000492:	bf00      	nop
 8000494:	f240 1273 	movw	r2, #371	; 0x173
 8000498:	4908      	ldr	r1, [pc, #32]	; (80004bc <MX_TIM2_Init+0xc0>)
 800049a:	4809      	ldr	r0, [pc, #36]	; (80004c0 <MX_TIM2_Init+0xc4>)
 800049c:	f004 fada 	bl	8004a54 <iprintf>
 80004a0:	4808      	ldr	r0, [pc, #32]	; (80004c4 <MX_TIM2_Init+0xc8>)
 80004a2:	f004 fad7 	bl	8004a54 <iprintf>
	Drv_RegisterTIMER();
 80004a6:	f004 f8e2 	bl	800466e <Drv_RegisterTIMER>
  /* USER CODE END TIM2_Init 2 */

}
 80004aa:	bf00      	nop
 80004ac:	3720      	adds	r7, #32
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000394 	.word	0x20000394
 80004b8:	08005918 	.word	0x08005918
 80004bc:	08005970 	.word	0x08005970
 80004c0:	08005920 	.word	0x08005920
 80004c4:	08005938 	.word	0x08005938

080004c8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80004cc:	4b14      	ldr	r3, [pc, #80]	; (8000520 <MX_UART4_Init+0x58>)
 80004ce:	4a15      	ldr	r2, [pc, #84]	; (8000524 <MX_UART4_Init+0x5c>)
 80004d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80004d2:	4b13      	ldr	r3, [pc, #76]	; (8000520 <MX_UART4_Init+0x58>)
 80004d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80004da:	4b11      	ldr	r3, [pc, #68]	; (8000520 <MX_UART4_Init+0x58>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <MX_UART4_Init+0x58>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <MX_UART4_Init+0x58>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <MX_UART4_Init+0x58>)
 80004ee:	220c      	movs	r2, #12
 80004f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <MX_UART4_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <MX_UART4_Init+0x58>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <MX_UART4_Init+0x58>)
 8000500:	2200      	movs	r2, #0
 8000502:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <MX_UART4_Init+0x58>)
 8000506:	2200      	movs	r2, #0
 8000508:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <MX_UART4_Init+0x58>)
 800050c:	f003 f880 	bl	8003610 <HAL_UART_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000516:	f000 f963 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200002a8 	.word	0x200002a8
 8000524:	40004c00 	.word	0x40004c00

08000528 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <MX_UART5_Init+0x58>)
 800052e:	4a15      	ldr	r2, [pc, #84]	; (8000584 <MX_UART5_Init+0x5c>)
 8000530:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000532:	4b13      	ldr	r3, [pc, #76]	; (8000580 <MX_UART5_Init+0x58>)
 8000534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000538:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <MX_UART5_Init+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <MX_UART5_Init+0x58>)
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <MX_UART5_Init+0x58>)
 8000548:	2200      	movs	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <MX_UART5_Init+0x58>)
 800054e:	220c      	movs	r2, #12
 8000550:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <MX_UART5_Init+0x58>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000558:	4b09      	ldr	r3, [pc, #36]	; (8000580 <MX_UART5_Init+0x58>)
 800055a:	2200      	movs	r2, #0
 800055c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <MX_UART5_Init+0x58>)
 8000560:	2200      	movs	r2, #0
 8000562:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <MX_UART5_Init+0x58>)
 8000566:	2200      	movs	r2, #0
 8000568:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800056a:	4805      	ldr	r0, [pc, #20]	; (8000580 <MX_UART5_Init+0x58>)
 800056c:	f003 f850 	bl	8003610 <HAL_UART_Init>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000576:	f000 f933 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000178 	.word	0x20000178
 8000584:	40005000 	.word	0x40005000

08000588 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <MX_USART1_UART_Init+0x58>)
 800058e:	4a15      	ldr	r2, [pc, #84]	; (80005e4 <MX_USART1_UART_Init+0x5c>)
 8000590:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <MX_USART1_UART_Init+0x58>)
 8000594:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000598:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <MX_USART1_UART_Init+0x58>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <MX_USART1_UART_Init+0x58>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <MX_USART1_UART_Init+0x58>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MX_USART1_UART_Init+0x58>)
 80005ae:	220c      	movs	r2, #12
 80005b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <MX_USART1_UART_Init+0x58>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <MX_USART1_UART_Init+0x58>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <MX_USART1_UART_Init+0x58>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <MX_USART1_UART_Init+0x58>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <MX_USART1_UART_Init+0x58>)
 80005cc:	f003 f820 	bl	8003610 <HAL_UART_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005d6:	f000 f903 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000200 	.word	0x20000200
 80005e4:	40013800 	.word	0x40013800

080005e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005ec:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_USART2_UART_Init+0x58>)
 80005ee:	4a15      	ldr	r2, [pc, #84]	; (8000644 <MX_USART2_UART_Init+0x5c>)
 80005f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <MX_USART2_UART_Init+0x58>)
 80005f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_USART2_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_USART2_UART_Init+0x58>)
 800060e:	220c      	movs	r2, #12
 8000610:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_USART2_UART_Init+0x58>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000620:	2200      	movs	r2, #0
 8000622:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_USART2_UART_Init+0x58>)
 800062c:	f002 fff0 	bl	8003610 <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000636:	f000 f8d3 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200003e0 	.word	0x200003e0
 8000644:	40004400 	.word	0x40004400

08000648 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_USART3_UART_Init+0x58>)
 800064e:	4a15      	ldr	r2, [pc, #84]	; (80006a4 <MX_USART3_UART_Init+0x5c>)
 8000650:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_USART3_UART_Init+0x58>)
 8000654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000658:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_USART3_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_USART3_UART_Init+0x58>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_USART3_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_USART3_UART_Init+0x58>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_USART3_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_USART3_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MX_USART3_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_USART3_UART_Init+0x58>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_USART3_UART_Init+0x58>)
 800068c:	f002 ffc0 	bl	8003610 <HAL_UART_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000696:	f000 f8a3 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	2000009c 	.word	0x2000009c
 80006a4:	40004800 	.word	0x40004800

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	; 0x30
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006be:	4b3d      	ldr	r3, [pc, #244]	; (80007b4 <MX_GPIO_Init+0x10c>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	4a3c      	ldr	r2, [pc, #240]	; (80007b4 <MX_GPIO_Init+0x10c>)
 80006c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006c8:	6153      	str	r3, [r2, #20]
 80006ca:	4b3a      	ldr	r3, [pc, #232]	; (80007b4 <MX_GPIO_Init+0x10c>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006d2:	61bb      	str	r3, [r7, #24]
 80006d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	4b37      	ldr	r3, [pc, #220]	; (80007b4 <MX_GPIO_Init+0x10c>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a36      	ldr	r2, [pc, #216]	; (80007b4 <MX_GPIO_Init+0x10c>)
 80006dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006e0:	6153      	str	r3, [r2, #20]
 80006e2:	4b34      	ldr	r3, [pc, #208]	; (80007b4 <MX_GPIO_Init+0x10c>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ee:	4b31      	ldr	r3, [pc, #196]	; (80007b4 <MX_GPIO_Init+0x10c>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	4a30      	ldr	r2, [pc, #192]	; (80007b4 <MX_GPIO_Init+0x10c>)
 80006f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006f8:	6153      	str	r3, [r2, #20]
 80006fa:	4b2e      	ldr	r3, [pc, #184]	; (80007b4 <MX_GPIO_Init+0x10c>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b2b      	ldr	r3, [pc, #172]	; (80007b4 <MX_GPIO_Init+0x10c>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	4a2a      	ldr	r2, [pc, #168]	; (80007b4 <MX_GPIO_Init+0x10c>)
 800070c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000710:	6153      	str	r3, [r2, #20]
 8000712:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <MX_GPIO_Init+0x10c>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <MX_GPIO_Init+0x10c>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a24      	ldr	r2, [pc, #144]	; (80007b4 <MX_GPIO_Init+0x10c>)
 8000724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000728:	6153      	str	r3, [r2, #20]
 800072a:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <MX_GPIO_Init+0x10c>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000736:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <MX_GPIO_Init+0x10c>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a1e      	ldr	r2, [pc, #120]	; (80007b4 <MX_GPIO_Init+0x10c>)
 800073c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000740:	6153      	str	r3, [r2, #20]
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_GPIO_Init+0x10c>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800074e:	2200      	movs	r2, #0
 8000750:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000754:	4818      	ldr	r0, [pc, #96]	; (80007b8 <MX_GPIO_Init+0x110>)
 8000756:	f000 feb5 	bl	80014c4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800075a:	2337      	movs	r3, #55	; 0x37
 800075c:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800075e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	4812      	ldr	r0, [pc, #72]	; (80007b8 <MX_GPIO_Init+0x110>)
 8000770:	f000 fd2e 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000774:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000778:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4619      	mov	r1, r3
 800078c:	480a      	ldr	r0, [pc, #40]	; (80007b8 <MX_GPIO_Init+0x110>)
 800078e:	f000 fd1f 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000792:	2301      	movs	r3, #1
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a8:	f000 fd12 	bl	80011d0 <HAL_GPIO_Init>

}
 80007ac:	bf00      	nop
 80007ae:	3730      	adds	r7, #48	; 0x30
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40021000 	.word	0x40021000
 80007b8:	48001000 	.word	0x48001000

080007bc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80007c4:	1d39      	adds	r1, r7, #4
 80007c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ca:	2201      	movs	r2, #1
 80007cc:	4803      	ldr	r0, [pc, #12]	; (80007dc <__io_putchar+0x20>)
 80007ce:	f002 ff6d 	bl	80036ac <HAL_UART_Transmit>

  return ch;
 80007d2:	687b      	ldr	r3, [r7, #4]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000200 	.word	0x20000200

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <Error_Handler+0x8>
	...

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_MspInit+0x44>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <HAL_MspInit+0x44>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6193      	str	r3, [r2, #24]
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_MspInit+0x44>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_MspInit+0x44>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <HAL_MspInit+0x44>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	61d3      	str	r3, [r2, #28]
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_MspInit+0x44>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000822:	2007      	movs	r0, #7
 8000824:	f000 fc1c 	bl	8001060 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <HAL_RTC_MspInit+0x44>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d111      	bne.n	800086a <HAL_RTC_MspInit+0x36>
 8000846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800084a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	fa93 f3a3 	rbit	r3, r3
 8000852:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000854:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000856:	fab3 f383 	clz	r3, r3
 800085a:	b2db      	uxtb	r3, r3
 800085c:	461a      	mov	r2, r3
 800085e:	4b07      	ldr	r3, [pc, #28]	; (800087c <HAL_RTC_MspInit+0x48>)
 8000860:	4413      	add	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	461a      	mov	r2, r3
 8000866:	2301      	movs	r3, #1
 8000868:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800086a:	bf00      	nop
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40002800 	.word	0x40002800
 800087c:	10908100 	.word	0x10908100

08000880 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000890:	d113      	bne.n	80008ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <HAL_TIM_Base_MspInit+0x44>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <HAL_TIM_Base_MspInit+0x44>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	61d3      	str	r3, [r2, #28]
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_TIM_Base_MspInit+0x44>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	201c      	movs	r0, #28
 80008b0:	f000 fbe1 	bl	8001076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008b4:	201c      	movs	r0, #28
 80008b6:	f000 fbfa 	bl	80010ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000

080008c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b092      	sub	sp, #72	; 0x48
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a97      	ldr	r2, [pc, #604]	; (8000b44 <HAL_UART_MspInit+0x27c>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d131      	bne.n	800094e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80008ea:	4b97      	ldr	r3, [pc, #604]	; (8000b48 <HAL_UART_MspInit+0x280>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	4a96      	ldr	r2, [pc, #600]	; (8000b48 <HAL_UART_MspInit+0x280>)
 80008f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008f4:	61d3      	str	r3, [r2, #28]
 80008f6:	4b94      	ldr	r3, [pc, #592]	; (8000b48 <HAL_UART_MspInit+0x280>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008fe:	633b      	str	r3, [r7, #48]	; 0x30
 8000900:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	4b91      	ldr	r3, [pc, #580]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	4a90      	ldr	r2, [pc, #576]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000908:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800090c:	6153      	str	r3, [r2, #20]
 800090e:	4b8e      	ldr	r3, [pc, #568]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800091a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800091e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000928:	2303      	movs	r3, #3
 800092a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800092c:	2305      	movs	r3, #5
 800092e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000930:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000934:	4619      	mov	r1, r3
 8000936:	4885      	ldr	r0, [pc, #532]	; (8000b4c <HAL_UART_MspInit+0x284>)
 8000938:	f000 fc4a 	bl	80011d0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2034      	movs	r0, #52	; 0x34
 8000942:	f000 fb98 	bl	8001076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000946:	2034      	movs	r0, #52	; 0x34
 8000948:	f000 fbb1 	bl	80010ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800094c:	e0f5      	b.n	8000b3a <HAL_UART_MspInit+0x272>
  else if(huart->Instance==UART5)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a7f      	ldr	r2, [pc, #508]	; (8000b50 <HAL_UART_MspInit+0x288>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d14d      	bne.n	80009f4 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000958:	4b7b      	ldr	r3, [pc, #492]	; (8000b48 <HAL_UART_MspInit+0x280>)
 800095a:	69db      	ldr	r3, [r3, #28]
 800095c:	4a7a      	ldr	r2, [pc, #488]	; (8000b48 <HAL_UART_MspInit+0x280>)
 800095e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000962:	61d3      	str	r3, [r2, #28]
 8000964:	4b78      	ldr	r3, [pc, #480]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000966:	69db      	ldr	r3, [r3, #28]
 8000968:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
 800096e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000970:	4b75      	ldr	r3, [pc, #468]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	4a74      	ldr	r2, [pc, #464]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000976:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800097a:	6153      	str	r3, [r2, #20]
 800097c:	4b72      	ldr	r3, [pc, #456]	; (8000b48 <HAL_UART_MspInit+0x280>)
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
 8000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000988:	4b6f      	ldr	r3, [pc, #444]	; (8000b48 <HAL_UART_MspInit+0x280>)
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	4a6e      	ldr	r2, [pc, #440]	; (8000b48 <HAL_UART_MspInit+0x280>)
 800098e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000992:	6153      	str	r3, [r2, #20]
 8000994:	4b6c      	ldr	r3, [pc, #432]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800099c:	623b      	str	r3, [r7, #32]
 800099e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ae:	2303      	movs	r3, #3
 80009b0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80009b2:	2305      	movs	r3, #5
 80009b4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009ba:	4619      	mov	r1, r3
 80009bc:	4863      	ldr	r0, [pc, #396]	; (8000b4c <HAL_UART_MspInit+0x284>)
 80009be:	f000 fc07 	bl	80011d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009c2:	2304      	movs	r3, #4
 80009c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80009d2:	2305      	movs	r3, #5
 80009d4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009da:	4619      	mov	r1, r3
 80009dc:	485d      	ldr	r0, [pc, #372]	; (8000b54 <HAL_UART_MspInit+0x28c>)
 80009de:	f000 fbf7 	bl	80011d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	2035      	movs	r0, #53	; 0x35
 80009e8:	f000 fb45 	bl	8001076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80009ec:	2035      	movs	r0, #53	; 0x35
 80009ee:	f000 fb5e 	bl	80010ae <HAL_NVIC_EnableIRQ>
}
 80009f2:	e0a2      	b.n	8000b3a <HAL_UART_MspInit+0x272>
  else if(huart->Instance==USART1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a57      	ldr	r2, [pc, #348]	; (8000b58 <HAL_UART_MspInit+0x290>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d130      	bne.n	8000a60 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART1_CLK_ENABLE();
 80009fe:	4b52      	ldr	r3, [pc, #328]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	4a51      	ldr	r2, [pc, #324]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a08:	6193      	str	r3, [r2, #24]
 8000a0a:	4b4f      	ldr	r3, [pc, #316]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a12:	61fb      	str	r3, [r7, #28]
 8000a14:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	4b4c      	ldr	r3, [pc, #304]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	4a4b      	ldr	r2, [pc, #300]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000a1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a20:	6153      	str	r3, [r2, #20]
 8000a22:	4b49      	ldr	r3, [pc, #292]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a2a:	61bb      	str	r3, [r7, #24]
 8000a2c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a2e:	2330      	movs	r3, #48	; 0x30
 8000a30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a3e:	2307      	movs	r3, #7
 8000a40:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a46:	4619      	mov	r1, r3
 8000a48:	4840      	ldr	r0, [pc, #256]	; (8000b4c <HAL_UART_MspInit+0x284>)
 8000a4a:	f000 fbc1 	bl	80011d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	2025      	movs	r0, #37	; 0x25
 8000a54:	f000 fb0f 	bl	8001076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a58:	2025      	movs	r0, #37	; 0x25
 8000a5a:	f000 fb28 	bl	80010ae <HAL_NVIC_EnableIRQ>
}
 8000a5e:	e06c      	b.n	8000b3a <HAL_UART_MspInit+0x272>
  else if(huart->Instance==USART2)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a3d      	ldr	r2, [pc, #244]	; (8000b5c <HAL_UART_MspInit+0x294>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d131      	bne.n	8000ace <HAL_UART_MspInit+0x206>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6a:	4b37      	ldr	r3, [pc, #220]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	4a36      	ldr	r2, [pc, #216]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a74:	61d3      	str	r3, [r2, #28]
 8000a76:	4b34      	ldr	r3, [pc, #208]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b31      	ldr	r3, [pc, #196]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	4a30      	ldr	r2, [pc, #192]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	6153      	str	r3, [r2, #20]
 8000a8e:	4b2e      	ldr	r3, [pc, #184]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aaa:	2307      	movs	r3, #7
 8000aac:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab8:	f000 fb8a 	bl	80011d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2026      	movs	r0, #38	; 0x26
 8000ac2:	f000 fad8 	bl	8001076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ac6:	2026      	movs	r0, #38	; 0x26
 8000ac8:	f000 faf1 	bl	80010ae <HAL_NVIC_EnableIRQ>
}
 8000acc:	e035      	b.n	8000b3a <HAL_UART_MspInit+0x272>
  else if(huart->Instance==USART3)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a23      	ldr	r2, [pc, #140]	; (8000b60 <HAL_UART_MspInit+0x298>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d130      	bne.n	8000b3a <HAL_UART_MspInit+0x272>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000ada:	69db      	ldr	r3, [r3, #28]
 8000adc:	4a1a      	ldr	r2, [pc, #104]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000ade:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ae2:	61d3      	str	r3, [r2, #28]
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000ae6:	69db      	ldr	r3, [r3, #28]
 8000ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000af6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000afa:	6153      	str	r3, [r2, #20]
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_UART_MspInit+0x280>)
 8000afe:	695b      	ldr	r3, [r3, #20]
 8000b00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b08:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b22:	4619      	mov	r1, r3
 8000b24:	480f      	ldr	r0, [pc, #60]	; (8000b64 <HAL_UART_MspInit+0x29c>)
 8000b26:	f000 fb53 	bl	80011d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2027      	movs	r0, #39	; 0x27
 8000b30:	f000 faa1 	bl	8001076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b34:	2027      	movs	r0, #39	; 0x27
 8000b36:	f000 faba 	bl	80010ae <HAL_NVIC_EnableIRQ>
}
 8000b3a:	bf00      	nop
 8000b3c:	3748      	adds	r7, #72	; 0x48
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40004c00 	.word	0x40004c00
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	48000800 	.word	0x48000800
 8000b50:	40005000 	.word	0x40005000
 8000b54:	48000c00 	.word	0x48000c00
 8000b58:	40013800 	.word	0x40013800
 8000b5c:	40004400 	.word	0x40004400
 8000b60:	40004800 	.word	0x40004800
 8000b64:	48000400 	.word	0x48000400

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler+0x4>

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb4:	f000 f964 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <TIM2_IRQHandler+0x10>)
 8000bc2:	f002 f94d 	bl	8002e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000394 	.word	0x20000394

08000bd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <USART1_IRQHandler+0x10>)
 8000bd6:	f002 fdf3 	bl	80037c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000200 	.word	0x20000200

08000be4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <USART2_IRQHandler+0x10>)
 8000bea:	f002 fde9 	bl	80037c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200003e0 	.word	0x200003e0

08000bf8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <USART3_IRQHandler+0x10>)
 8000bfe:	f002 fddf 	bl	80037c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	2000009c 	.word	0x2000009c

08000c0c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <UART4_IRQHandler+0x10>)
 8000c12:	f002 fdd5 	bl	80037c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200002a8 	.word	0x200002a8

08000c20 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <UART5_IRQHandler+0x10>)
 8000c26:	f002 fdcb 	bl	80037c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000178 	.word	0x20000178

08000c34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	e00a      	b.n	8000c5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c46:	f3af 8000 	nop.w
 8000c4a:	4601      	mov	r1, r0
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	60ba      	str	r2, [r7, #8]
 8000c52:	b2ca      	uxtb	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dbf0      	blt.n	8000c46 <_read+0x12>
	}

return len;
 8000c64:	687b      	ldr	r3, [r7, #4]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	e009      	b.n	8000c94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	1c5a      	adds	r2, r3, #1
 8000c84:	60ba      	str	r2, [r7, #8]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fd97 	bl	80007bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3301      	adds	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	dbf1      	blt.n	8000c80 <_write+0x12>
	}
	return len;
 8000c9c:	687b      	ldr	r3, [r7, #4]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_close>:

int _close(int file)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
	return -1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cce:	605a      	str	r2, [r3, #4]
	return 0;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <_isatty>:

int _isatty(int file)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ce6:	2301      	movs	r3, #1
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
	return 0;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d18:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <_sbrk+0x5c>)
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <_sbrk+0x60>)
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <_sbrk+0x64>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <_sbrk+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d207      	bcs.n	8000d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d40:	f003 fe56 	bl	80049f0 <__errno>
 8000d44:	4603      	mov	r3, r0
 8000d46:	220c      	movs	r2, #12
 8000d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	e009      	b.n	8000d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <_sbrk+0x64>)
 8000d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	2000a000 	.word	0x2000a000
 8000d70:	00000400 	.word	0x00000400
 8000d74:	2000008c 	.word	0x2000008c
 8000d78:	20000bb0 	.word	0x20000bb0

08000d7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <SystemInit+0x20>)
 8000d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <SystemInit+0x20>)
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da4:	f7ff ffea 	bl	8000d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	; (8000de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <LoopForever+0xe>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	; (8000dec <LoopForever+0x16>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dce:	f003 fe15 	bl	80049fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dd2:	f7ff fa5d 	bl	8000290 <main>

08000dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd6:	e7fe      	b.n	8000dd6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dd8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000de4:	08005a64 	.word	0x08005a64
  ldr r2, =_sbss
 8000de8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dec:	20000bb0 	.word	0x20000bb0

08000df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC1_2_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_Init+0x28>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_Init+0x28>)
 8000dfe:	f043 0310 	orr.w	r3, r3, #16
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f92b 	bl	8001060 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 f808 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fcec 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40022000 	.word	0x40022000

08000e20 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x54>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x58>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f943 	bl	80010ca <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00e      	b.n	8000e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d80a      	bhi.n	8000e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f000 f90b 	bl	8001076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e60:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_InitTick+0x5c>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e000      	b.n	8000e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000754 	.word	0x20000754

08000ea8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;  
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000754 	.word	0x20000754

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db0b      	blt.n	8000f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	f003 021f 	and.w	r2, r3, #31
 8000f3c:	4907      	ldr	r1, [pc, #28]	; (8000f5c <__NVIC_EnableIRQ+0x38>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	095b      	lsrs	r3, r3, #5
 8000f44:	2001      	movs	r0, #1
 8000f46:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	; (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	; (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	; 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800102c:	d301      	bcc.n	8001032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102e:	2301      	movs	r3, #1
 8001030:	e00f      	b.n	8001052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <SysTick_Config+0x40>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103a:	210f      	movs	r1, #15
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f7ff ff8e 	bl	8000f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <SysTick_Config+0x40>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <SysTick_Config+0x40>)
 800104c:	2207      	movs	r2, #7
 800104e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	e000e010 	.word	0xe000e010

08001060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff29 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001088:	f7ff ff3e 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 800108c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	6978      	ldr	r0, [r7, #20]
 8001094:	f7ff ff8e 	bl	8000fb4 <NVIC_EncodePriority>
 8001098:	4602      	mov	r2, r0
 800109a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff5d 	bl	8000f60 <__NVIC_SetPriority>
}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff31 	bl	8000f24 <__NVIC_EnableIRQ>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ffa2 	bl	800101c <SysTick_Config>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d008      	beq.n	8001106 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2204      	movs	r2, #4
 80010f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e020      	b.n	8001148 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 020e 	bic.w	r2, r2, #14
 8001114:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0201 	bic.w	r2, r2, #1
 8001124:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800112e:	2101      	movs	r1, #1
 8001130:	fa01 f202 	lsl.w	r2, r1, r2
 8001134:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001166:	2b02      	cmp	r3, #2
 8001168:	d005      	beq.n	8001176 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2204      	movs	r2, #4
 800116e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e027      	b.n	80011c6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 020e 	bic.w	r2, r2, #14
 8001184:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 0201 	bic.w	r2, r2, #1
 8001194:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800119e:	2101      	movs	r1, #1
 80011a0:	fa01 f202 	lsl.w	r2, r1, r2
 80011a4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	4798      	blx	r3
    } 
  }
  return status;
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b087      	sub	sp, #28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011de:	e154      	b.n	800148a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2101      	movs	r1, #1
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	4013      	ands	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 8146 	beq.w	8001484 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b01      	cmp	r3, #1
 8001202:	d005      	beq.n	8001210 <HAL_GPIO_Init+0x40>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d130      	bne.n	8001272 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001246:	2201      	movs	r2, #1
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	091b      	lsrs	r3, r3, #4
 800125c:	f003 0201 	and.w	r2, r3, #1
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	2b03      	cmp	r3, #3
 800127c:	d017      	beq.n	80012ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	2203      	movs	r2, #3
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d123      	bne.n	8001302 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	08da      	lsrs	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3208      	adds	r2, #8
 80012c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	220f      	movs	r2, #15
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	691a      	ldr	r2, [r3, #16]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	08da      	lsrs	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3208      	adds	r2, #8
 80012fc:	6939      	ldr	r1, [r7, #16]
 80012fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	2203      	movs	r2, #3
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0203 	and.w	r2, r3, #3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 80a0 	beq.w	8001484 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001344:	4b58      	ldr	r3, [pc, #352]	; (80014a8 <HAL_GPIO_Init+0x2d8>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a57      	ldr	r2, [pc, #348]	; (80014a8 <HAL_GPIO_Init+0x2d8>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b55      	ldr	r3, [pc, #340]	; (80014a8 <HAL_GPIO_Init+0x2d8>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800135c:	4a53      	ldr	r2, [pc, #332]	; (80014ac <HAL_GPIO_Init+0x2dc>)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3302      	adds	r3, #2
 8001364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	220f      	movs	r2, #15
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001386:	d019      	beq.n	80013bc <HAL_GPIO_Init+0x1ec>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a49      	ldr	r2, [pc, #292]	; (80014b0 <HAL_GPIO_Init+0x2e0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d013      	beq.n	80013b8 <HAL_GPIO_Init+0x1e8>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a48      	ldr	r2, [pc, #288]	; (80014b4 <HAL_GPIO_Init+0x2e4>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d00d      	beq.n	80013b4 <HAL_GPIO_Init+0x1e4>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a47      	ldr	r2, [pc, #284]	; (80014b8 <HAL_GPIO_Init+0x2e8>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d007      	beq.n	80013b0 <HAL_GPIO_Init+0x1e0>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a46      	ldr	r2, [pc, #280]	; (80014bc <HAL_GPIO_Init+0x2ec>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d101      	bne.n	80013ac <HAL_GPIO_Init+0x1dc>
 80013a8:	2304      	movs	r3, #4
 80013aa:	e008      	b.n	80013be <HAL_GPIO_Init+0x1ee>
 80013ac:	2305      	movs	r3, #5
 80013ae:	e006      	b.n	80013be <HAL_GPIO_Init+0x1ee>
 80013b0:	2303      	movs	r3, #3
 80013b2:	e004      	b.n	80013be <HAL_GPIO_Init+0x1ee>
 80013b4:	2302      	movs	r3, #2
 80013b6:	e002      	b.n	80013be <HAL_GPIO_Init+0x1ee>
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <HAL_GPIO_Init+0x1ee>
 80013bc:	2300      	movs	r3, #0
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	f002 0203 	and.w	r2, r2, #3
 80013c4:	0092      	lsls	r2, r2, #2
 80013c6:	4093      	lsls	r3, r2
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013ce:	4937      	ldr	r1, [pc, #220]	; (80014ac <HAL_GPIO_Init+0x2dc>)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	089b      	lsrs	r3, r3, #2
 80013d4:	3302      	adds	r3, #2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013dc:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <HAL_GPIO_Init+0x2f0>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001400:	4a2f      	ldr	r2, [pc, #188]	; (80014c0 <HAL_GPIO_Init+0x2f0>)
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001406:	4b2e      	ldr	r3, [pc, #184]	; (80014c0 <HAL_GPIO_Init+0x2f0>)
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800142a:	4a25      	ldr	r2, [pc, #148]	; (80014c0 <HAL_GPIO_Init+0x2f0>)
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001430:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <HAL_GPIO_Init+0x2f0>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001454:	4a1a      	ldr	r2, [pc, #104]	; (80014c0 <HAL_GPIO_Init+0x2f0>)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <HAL_GPIO_Init+0x2f0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	43db      	mvns	r3, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800147e:	4a10      	ldr	r2, [pc, #64]	; (80014c0 <HAL_GPIO_Init+0x2f0>)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	3301      	adds	r3, #1
 8001488:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	fa22 f303 	lsr.w	r3, r2, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	f47f aea3 	bne.w	80011e0 <HAL_GPIO_Init+0x10>
  }
}
 800149a:	bf00      	nop
 800149c:	bf00      	nop
 800149e:	371c      	adds	r7, #28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40010000 	.word	0x40010000
 80014b0:	48000400 	.word	0x48000400
 80014b4:	48000800 	.word	0x48000800
 80014b8:	48000c00 	.word	0x48000c00
 80014bc:	48001000 	.word	0x48001000
 80014c0:	40010400 	.word	0x40010400

080014c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	807b      	strh	r3, [r7, #2]
 80014d0:	4613      	mov	r3, r2
 80014d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d4:	787b      	ldrb	r3, [r7, #1]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014e0:	e002      	b.n	80014e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014e2:	887a      	ldrh	r2, [r7, #2]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	f000 bef4 	b.w	80022f6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 816a 	beq.w	80017f2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800151e:	4bb3      	ldr	r3, [pc, #716]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b04      	cmp	r3, #4
 8001528:	d00c      	beq.n	8001544 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800152a:	4bb0      	ldr	r3, [pc, #704]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b08      	cmp	r3, #8
 8001534:	d159      	bne.n	80015ea <HAL_RCC_OscConfig+0xf6>
 8001536:	4bad      	ldr	r3, [pc, #692]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001542:	d152      	bne.n	80015ea <HAL_RCC_OscConfig+0xf6>
 8001544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001548:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001550:	fa93 f3a3 	rbit	r3, r3
 8001554:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8001558:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155c:	fab3 f383 	clz	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b01      	cmp	r3, #1
 800156e:	d102      	bne.n	8001576 <HAL_RCC_OscConfig+0x82>
 8001570:	4b9e      	ldr	r3, [pc, #632]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	e015      	b.n	80015a2 <HAL_RCC_OscConfig+0xae>
 8001576:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800157a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001582:	fa93 f3a3 	rbit	r3, r3
 8001586:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800158a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800158e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001592:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001596:	fa93 f3a3 	rbit	r3, r3
 800159a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800159e:	4b93      	ldr	r3, [pc, #588]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015a6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80015aa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80015ae:	fa92 f2a2 	rbit	r2, r2
 80015b2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80015b6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80015ba:	fab2 f282 	clz	r2, r2
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	f042 0220 	orr.w	r2, r2, #32
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	f002 021f 	and.w	r2, r2, #31
 80015ca:	2101      	movs	r1, #1
 80015cc:	fa01 f202 	lsl.w	r2, r1, r2
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 810c 	beq.w	80017f0 <HAL_RCC_OscConfig+0x2fc>
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f040 8106 	bne.w	80017f0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	f000 be86 	b.w	80022f6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f4:	d106      	bne.n	8001604 <HAL_RCC_OscConfig+0x110>
 80015f6:	4b7d      	ldr	r3, [pc, #500]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a7c      	ldr	r2, [pc, #496]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e030      	b.n	8001666 <HAL_RCC_OscConfig+0x172>
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x134>
 800160e:	4b77      	ldr	r3, [pc, #476]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a76      	ldr	r2, [pc, #472]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 8001614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	4b74      	ldr	r3, [pc, #464]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a73      	ldr	r2, [pc, #460]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 8001620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e01e      	b.n	8001666 <HAL_RCC_OscConfig+0x172>
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001632:	d10c      	bne.n	800164e <HAL_RCC_OscConfig+0x15a>
 8001634:	4b6d      	ldr	r3, [pc, #436]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a6c      	ldr	r2, [pc, #432]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 800163a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b6a      	ldr	r3, [pc, #424]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a69      	ldr	r2, [pc, #420]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 8001646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	e00b      	b.n	8001666 <HAL_RCC_OscConfig+0x172>
 800164e:	4b67      	ldr	r3, [pc, #412]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a66      	ldr	r2, [pc, #408]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 8001654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	4b64      	ldr	r3, [pc, #400]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a63      	ldr	r2, [pc, #396]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 8001660:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001664:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001666:	4b61      	ldr	r3, [pc, #388]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166a:	f023 020f 	bic.w	r2, r3, #15
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	495d      	ldr	r1, [pc, #372]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 8001676:	4313      	orrs	r3, r2
 8001678:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d059      	beq.n	8001738 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fc10 	bl	8000ea8 <HAL_GetTick>
 8001688:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168c:	e00a      	b.n	80016a4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800168e:	f7ff fc0b 	bl	8000ea8 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	; 0x64
 800169c:	d902      	bls.n	80016a4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	f000 be29 	b.w	80022f6 <HAL_RCC_OscConfig+0xe02>
 80016a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016a8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80016b0:	fa93 f3a3 	rbit	r3, r3
 80016b4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80016b8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016bc:	fab3 f383 	clz	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d102      	bne.n	80016d6 <HAL_RCC_OscConfig+0x1e2>
 80016d0:	4b46      	ldr	r3, [pc, #280]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	e015      	b.n	8001702 <HAL_RCC_OscConfig+0x20e>
 80016d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016da:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016de:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80016e2:	fa93 f3a3 	rbit	r3, r3
 80016e6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80016ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ee:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80016f2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80016f6:	fa93 f3a3 	rbit	r3, r3
 80016fa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80016fe:	4b3b      	ldr	r3, [pc, #236]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001706:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800170a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800170e:	fa92 f2a2 	rbit	r2, r2
 8001712:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001716:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800171a:	fab2 f282 	clz	r2, r2
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	f042 0220 	orr.w	r2, r2, #32
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	f002 021f 	and.w	r2, r2, #31
 800172a:	2101      	movs	r1, #1
 800172c:	fa01 f202 	lsl.w	r2, r1, r2
 8001730:	4013      	ands	r3, r2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0ab      	beq.n	800168e <HAL_RCC_OscConfig+0x19a>
 8001736:	e05c      	b.n	80017f2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff fbb6 	bl	8000ea8 <HAL_GetTick>
 800173c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001740:	e00a      	b.n	8001758 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001742:	f7ff fbb1 	bl	8000ea8 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b64      	cmp	r3, #100	; 0x64
 8001750:	d902      	bls.n	8001758 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	f000 bdcf 	b.w	80022f6 <HAL_RCC_OscConfig+0xe02>
 8001758:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800175c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001760:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001764:	fa93 f3a3 	rbit	r3, r3
 8001768:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800176c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001770:	fab3 f383 	clz	r3, r3
 8001774:	b2db      	uxtb	r3, r3
 8001776:	095b      	lsrs	r3, r3, #5
 8001778:	b2db      	uxtb	r3, r3
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b01      	cmp	r3, #1
 8001782:	d102      	bne.n	800178a <HAL_RCC_OscConfig+0x296>
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	e015      	b.n	80017b6 <HAL_RCC_OscConfig+0x2c2>
 800178a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800178e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800179e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017a2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80017a6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <HAL_RCC_OscConfig+0x2f8>)
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017ba:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80017be:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80017c2:	fa92 f2a2 	rbit	r2, r2
 80017c6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80017ca:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80017ce:	fab2 f282 	clz	r2, r2
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	f042 0220 	orr.w	r2, r2, #32
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	f002 021f 	and.w	r2, r2, #31
 80017de:	2101      	movs	r1, #1
 80017e0:	fa01 f202 	lsl.w	r2, r1, r2
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1ab      	bne.n	8001742 <HAL_RCC_OscConfig+0x24e>
 80017ea:	e002      	b.n	80017f2 <HAL_RCC_OscConfig+0x2fe>
 80017ec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 816f 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001802:	4bd0      	ldr	r3, [pc, #832]	; (8001b44 <HAL_RCC_OscConfig+0x650>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00b      	beq.n	8001826 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800180e:	4bcd      	ldr	r3, [pc, #820]	; (8001b44 <HAL_RCC_OscConfig+0x650>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b08      	cmp	r3, #8
 8001818:	d16c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x400>
 800181a:	4bca      	ldr	r3, [pc, #808]	; (8001b44 <HAL_RCC_OscConfig+0x650>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d166      	bne.n	80018f4 <HAL_RCC_OscConfig+0x400>
 8001826:	2302      	movs	r3, #2
 8001828:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001830:	fa93 f3a3 	rbit	r3, r3
 8001834:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001838:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183c:	fab3 f383 	clz	r3, r3
 8001840:	b2db      	uxtb	r3, r3
 8001842:	095b      	lsrs	r3, r3, #5
 8001844:	b2db      	uxtb	r3, r3
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b01      	cmp	r3, #1
 800184e:	d102      	bne.n	8001856 <HAL_RCC_OscConfig+0x362>
 8001850:	4bbc      	ldr	r3, [pc, #752]	; (8001b44 <HAL_RCC_OscConfig+0x650>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	e013      	b.n	800187e <HAL_RCC_OscConfig+0x38a>
 8001856:	2302      	movs	r3, #2
 8001858:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001860:	fa93 f3a3 	rbit	r3, r3
 8001864:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001868:	2302      	movs	r3, #2
 800186a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800186e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001872:	fa93 f3a3 	rbit	r3, r3
 8001876:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800187a:	4bb2      	ldr	r3, [pc, #712]	; (8001b44 <HAL_RCC_OscConfig+0x650>)
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	2202      	movs	r2, #2
 8001880:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001884:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001888:	fa92 f2a2 	rbit	r2, r2
 800188c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001890:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001894:	fab2 f282 	clz	r2, r2
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	f042 0220 	orr.w	r2, r2, #32
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	f002 021f 	and.w	r2, r2, #31
 80018a4:	2101      	movs	r1, #1
 80018a6:	fa01 f202 	lsl.w	r2, r1, r2
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d007      	beq.n	80018c0 <HAL_RCC_OscConfig+0x3cc>
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d002      	beq.n	80018c0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	f000 bd1b 	b.w	80022f6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c0:	4ba0      	ldr	r3, [pc, #640]	; (8001b44 <HAL_RCC_OscConfig+0x650>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	21f8      	movs	r1, #248	; 0xf8
 80018d0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80018d8:	fa91 f1a1 	rbit	r1, r1
 80018dc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80018e0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80018e4:	fab1 f181 	clz	r1, r1
 80018e8:	b2c9      	uxtb	r1, r1
 80018ea:	408b      	lsls	r3, r1
 80018ec:	4995      	ldr	r1, [pc, #596]	; (8001b44 <HAL_RCC_OscConfig+0x650>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f2:	e0f5      	b.n	8001ae0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8085 	beq.w	8001a0a <HAL_RCC_OscConfig+0x516>
 8001900:	2301      	movs	r3, #1
 8001902:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001912:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001920:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	461a      	mov	r2, r3
 8001928:	2301      	movs	r3, #1
 800192a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff fabc 	bl	8000ea8 <HAL_GetTick>
 8001930:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001934:	e00a      	b.n	800194c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001936:	f7ff fab7 	bl	8000ea8 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d902      	bls.n	800194c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	f000 bcd5 	b.w	80022f6 <HAL_RCC_OscConfig+0xe02>
 800194c:	2302      	movs	r3, #2
 800194e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001956:	fa93 f3a3 	rbit	r3, r3
 800195a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800195e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001962:	fab3 f383 	clz	r3, r3
 8001966:	b2db      	uxtb	r3, r3
 8001968:	095b      	lsrs	r3, r3, #5
 800196a:	b2db      	uxtb	r3, r3
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b01      	cmp	r3, #1
 8001974:	d102      	bne.n	800197c <HAL_RCC_OscConfig+0x488>
 8001976:	4b73      	ldr	r3, [pc, #460]	; (8001b44 <HAL_RCC_OscConfig+0x650>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	e013      	b.n	80019a4 <HAL_RCC_OscConfig+0x4b0>
 800197c:	2302      	movs	r3, #2
 800197e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001986:	fa93 f3a3 	rbit	r3, r3
 800198a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800198e:	2302      	movs	r3, #2
 8001990:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001994:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001998:	fa93 f3a3 	rbit	r3, r3
 800199c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80019a0:	4b68      	ldr	r3, [pc, #416]	; (8001b44 <HAL_RCC_OscConfig+0x650>)
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	2202      	movs	r2, #2
 80019a6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80019aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80019ae:	fa92 f2a2 	rbit	r2, r2
 80019b2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80019b6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80019ba:	fab2 f282 	clz	r2, r2
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	f042 0220 	orr.w	r2, r2, #32
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	f002 021f 	and.w	r2, r2, #31
 80019ca:	2101      	movs	r1, #1
 80019cc:	fa01 f202 	lsl.w	r2, r1, r2
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0af      	beq.n	8001936 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d6:	4b5b      	ldr	r3, [pc, #364]	; (8001b44 <HAL_RCC_OscConfig+0x650>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	21f8      	movs	r1, #248	; 0xf8
 80019e6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ea:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80019ee:	fa91 f1a1 	rbit	r1, r1
 80019f2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80019f6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80019fa:	fab1 f181 	clz	r1, r1
 80019fe:	b2c9      	uxtb	r1, r1
 8001a00:	408b      	lsls	r3, r1
 8001a02:	4950      	ldr	r1, [pc, #320]	; (8001b44 <HAL_RCC_OscConfig+0x650>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
 8001a08:	e06a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x5ec>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001a14:	fa93 f3a3 	rbit	r3, r3
 8001a18:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001a1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a20:	fab3 f383 	clz	r3, r3
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	461a      	mov	r2, r3
 8001a32:	2300      	movs	r3, #0
 8001a34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7ff fa37 	bl	8000ea8 <HAL_GetTick>
 8001a3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a40:	f7ff fa32 	bl	8000ea8 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d902      	bls.n	8001a56 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	f000 bc50 	b.w	80022f6 <HAL_RCC_OscConfig+0xe02>
 8001a56:	2302      	movs	r3, #2
 8001a58:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a60:	fa93 f3a3 	rbit	r3, r3
 8001a64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d102      	bne.n	8001a86 <HAL_RCC_OscConfig+0x592>
 8001a80:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <HAL_RCC_OscConfig+0x650>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	e013      	b.n	8001aae <HAL_RCC_OscConfig+0x5ba>
 8001a86:	2302      	movs	r3, #2
 8001a88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a98:	2302      	movs	r3, #2
 8001a9a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001aaa:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <HAL_RCC_OscConfig+0x650>)
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001ab4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ab8:	fa92 f2a2 	rbit	r2, r2
 8001abc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001ac0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001ac4:	fab2 f282 	clz	r2, r2
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	f042 0220 	orr.w	r2, r2, #32
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	f002 021f 	and.w	r2, r2, #31
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1af      	bne.n	8001a40 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 80da 	beq.w	8001ca4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d069      	beq.n	8001bce <HAL_RCC_OscConfig+0x6da>
 8001afa:	2301      	movs	r3, #1
 8001afc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b10:	fab3 f383 	clz	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	461a      	mov	r2, r3
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RCC_OscConfig+0x654>)
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	461a      	mov	r2, r3
 8001b20:	2301      	movs	r3, #1
 8001b22:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b24:	f7ff f9c0 	bl	8000ea8 <HAL_GetTick>
 8001b28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2c:	e00e      	b.n	8001b4c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b2e:	f7ff f9bb 	bl	8000ea8 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d906      	bls.n	8001b4c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e3d9      	b.n	80022f6 <HAL_RCC_OscConfig+0xe02>
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
 8001b48:	10908120 	.word	0x10908120
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b56:	fa93 f3a3 	rbit	r3, r3
 8001b5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b5e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001b62:	2202      	movs	r2, #2
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	fa93 f2a3 	rbit	r2, r3
 8001b70:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	fa93 f2a3 	rbit	r2, r3
 8001b88:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b8c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8e:	4ba5      	ldr	r3, [pc, #660]	; (8001e24 <HAL_RCC_OscConfig+0x930>)
 8001b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b92:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b96:	2102      	movs	r1, #2
 8001b98:	6019      	str	r1, [r3, #0]
 8001b9a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	fa93 f1a3 	rbit	r1, r3
 8001ba4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ba8:	6019      	str	r1, [r3, #0]
  return result;
 8001baa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	fab3 f383 	clz	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0b0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x63a>
 8001bcc:	e06a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x7b0>
 8001bce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	fa93 f2a3 	rbit	r2, r3
 8001be0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001be4:	601a      	str	r2, [r3, #0]
  return result;
 8001be6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001bea:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bec:	fab3 f383 	clz	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b8c      	ldr	r3, [pc, #560]	; (8001e28 <HAL_RCC_OscConfig+0x934>)
 8001bf6:	4413      	add	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c00:	f7ff f952 	bl	8000ea8 <HAL_GetTick>
 8001c04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c08:	e009      	b.n	8001c1e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c0a:	f7ff f94d 	bl	8000ea8 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e36b      	b.n	80022f6 <HAL_RCC_OscConfig+0xe02>
 8001c1e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001c22:	2202      	movs	r2, #2
 8001c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	fa93 f2a3 	rbit	r2, r3
 8001c30:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	fa93 f2a3 	rbit	r2, r3
 8001c48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c52:	2202      	movs	r2, #2
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	fa93 f2a3 	rbit	r2, r3
 8001c60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c64:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c66:	4b6f      	ldr	r3, [pc, #444]	; (8001e24 <HAL_RCC_OscConfig+0x930>)
 8001c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c6a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c6e:	2102      	movs	r1, #2
 8001c70:	6019      	str	r1, [r3, #0]
 8001c72:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	fa93 f1a3 	rbit	r1, r3
 8001c7c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c80:	6019      	str	r1, [r3, #0]
  return result;
 8001c82:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	fab3 f383 	clz	r3, r3
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	2101      	movs	r1, #1
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1b2      	bne.n	8001c0a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 8158 	beq.w	8001f64 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cba:	4b5a      	ldr	r3, [pc, #360]	; (8001e24 <HAL_RCC_OscConfig+0x930>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d112      	bne.n	8001cec <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	4b57      	ldr	r3, [pc, #348]	; (8001e24 <HAL_RCC_OscConfig+0x930>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	4a56      	ldr	r2, [pc, #344]	; (8001e24 <HAL_RCC_OscConfig+0x930>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	61d3      	str	r3, [r2, #28]
 8001cd2:	4b54      	ldr	r3, [pc, #336]	; (8001e24 <HAL_RCC_OscConfig+0x930>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001cda:	f107 0308 	add.w	r3, r7, #8
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	f107 0308 	add.w	r3, r7, #8
 8001ce4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cec:	4b4f      	ldr	r3, [pc, #316]	; (8001e2c <HAL_RCC_OscConfig+0x938>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d11a      	bne.n	8001d2e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf8:	4b4c      	ldr	r3, [pc, #304]	; (8001e2c <HAL_RCC_OscConfig+0x938>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a4b      	ldr	r2, [pc, #300]	; (8001e2c <HAL_RCC_OscConfig+0x938>)
 8001cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d02:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d04:	f7ff f8d0 	bl	8000ea8 <HAL_GetTick>
 8001d08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0c:	e009      	b.n	8001d22 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0e:	f7ff f8cb 	bl	8000ea8 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e2e9      	b.n	80022f6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d22:	4b42      	ldr	r3, [pc, #264]	; (8001e2c <HAL_RCC_OscConfig+0x938>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0ef      	beq.n	8001d0e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d106      	bne.n	8001d46 <HAL_RCC_OscConfig+0x852>
 8001d38:	4b3a      	ldr	r3, [pc, #232]	; (8001e24 <HAL_RCC_OscConfig+0x930>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	4a39      	ldr	r2, [pc, #228]	; (8001e24 <HAL_RCC_OscConfig+0x930>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6213      	str	r3, [r2, #32]
 8001d44:	e02f      	b.n	8001da6 <HAL_RCC_OscConfig+0x8b2>
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10c      	bne.n	8001d6a <HAL_RCC_OscConfig+0x876>
 8001d50:	4b34      	ldr	r3, [pc, #208]	; (8001e24 <HAL_RCC_OscConfig+0x930>)
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	4a33      	ldr	r2, [pc, #204]	; (8001e24 <HAL_RCC_OscConfig+0x930>)
 8001d56:	f023 0301 	bic.w	r3, r3, #1
 8001d5a:	6213      	str	r3, [r2, #32]
 8001d5c:	4b31      	ldr	r3, [pc, #196]	; (8001e24 <HAL_RCC_OscConfig+0x930>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4a30      	ldr	r2, [pc, #192]	; (8001e24 <HAL_RCC_OscConfig+0x930>)
 8001d62:	f023 0304 	bic.w	r3, r3, #4
 8001d66:	6213      	str	r3, [r2, #32]
 8001d68:	e01d      	b.n	8001da6 <HAL_RCC_OscConfig+0x8b2>
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b05      	cmp	r3, #5
 8001d72:	d10c      	bne.n	8001d8e <HAL_RCC_OscConfig+0x89a>
 8001d74:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <HAL_RCC_OscConfig+0x930>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4a2a      	ldr	r2, [pc, #168]	; (8001e24 <HAL_RCC_OscConfig+0x930>)
 8001d7a:	f043 0304 	orr.w	r3, r3, #4
 8001d7e:	6213      	str	r3, [r2, #32]
 8001d80:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <HAL_RCC_OscConfig+0x930>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4a27      	ldr	r2, [pc, #156]	; (8001e24 <HAL_RCC_OscConfig+0x930>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6213      	str	r3, [r2, #32]
 8001d8c:	e00b      	b.n	8001da6 <HAL_RCC_OscConfig+0x8b2>
 8001d8e:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <HAL_RCC_OscConfig+0x930>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	4a24      	ldr	r2, [pc, #144]	; (8001e24 <HAL_RCC_OscConfig+0x930>)
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	6213      	str	r3, [r2, #32]
 8001d9a:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <HAL_RCC_OscConfig+0x930>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4a21      	ldr	r2, [pc, #132]	; (8001e24 <HAL_RCC_OscConfig+0x930>)
 8001da0:	f023 0304 	bic.w	r3, r3, #4
 8001da4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d06b      	beq.n	8001e88 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db0:	f7ff f87a 	bl	8000ea8 <HAL_GetTick>
 8001db4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db8:	e00b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dba:	f7ff f875 	bl	8000ea8 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e291      	b.n	80022f6 <HAL_RCC_OscConfig+0xe02>
 8001dd2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	fa93 f2a3 	rbit	r2, r3
 8001de4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001dee:	2202      	movs	r2, #2
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	fa93 f2a3 	rbit	r2, r3
 8001dfc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e00:	601a      	str	r2, [r3, #0]
  return result;
 8001e02:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e06:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e08:	fab3 f383 	clz	r3, r3
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	f043 0302 	orr.w	r3, r3, #2
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d109      	bne.n	8001e30 <HAL_RCC_OscConfig+0x93c>
 8001e1c:	4b01      	ldr	r3, [pc, #4]	; (8001e24 <HAL_RCC_OscConfig+0x930>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	e014      	b.n	8001e4c <HAL_RCC_OscConfig+0x958>
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	10908120 	.word	0x10908120
 8001e2c:	40007000 	.word	0x40007000
 8001e30:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001e34:	2202      	movs	r2, #2
 8001e36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e38:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	fa93 f2a3 	rbit	r2, r3
 8001e42:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	4bbb      	ldr	r3, [pc, #748]	; (8002138 <HAL_RCC_OscConfig+0xc44>)
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001e50:	2102      	movs	r1, #2
 8001e52:	6011      	str	r1, [r2, #0]
 8001e54:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	fa92 f1a2 	rbit	r1, r2
 8001e5e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001e62:	6011      	str	r1, [r2, #0]
  return result;
 8001e64:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	fab2 f282 	clz	r2, r2
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	f002 021f 	and.w	r2, r2, #31
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d099      	beq.n	8001dba <HAL_RCC_OscConfig+0x8c6>
 8001e86:	e063      	b.n	8001f50 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e88:	f7ff f80e 	bl	8000ea8 <HAL_GetTick>
 8001e8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e90:	e00b      	b.n	8001eaa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e92:	f7ff f809 	bl	8000ea8 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e225      	b.n	80022f6 <HAL_RCC_OscConfig+0xe02>
 8001eaa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001eae:	2202      	movs	r2, #2
 8001eb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	fa93 f2a3 	rbit	r2, r3
 8001ebc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	fa93 f2a3 	rbit	r2, r3
 8001ed4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ed8:	601a      	str	r2, [r3, #0]
  return result;
 8001eda:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ede:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee0:	fab3 f383 	clz	r3, r3
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	f043 0302 	orr.w	r3, r3, #2
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d102      	bne.n	8001efa <HAL_RCC_OscConfig+0xa06>
 8001ef4:	4b90      	ldr	r3, [pc, #576]	; (8002138 <HAL_RCC_OscConfig+0xc44>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	e00d      	b.n	8001f16 <HAL_RCC_OscConfig+0xa22>
 8001efa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001efe:	2202      	movs	r2, #2
 8001f00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f02:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	fa93 f2a3 	rbit	r2, r3
 8001f0c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	4b89      	ldr	r3, [pc, #548]	; (8002138 <HAL_RCC_OscConfig+0xc44>)
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f1a:	2102      	movs	r1, #2
 8001f1c:	6011      	str	r1, [r2, #0]
 8001f1e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	fa92 f1a2 	rbit	r1, r2
 8001f28:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001f2c:	6011      	str	r1, [r2, #0]
  return result;
 8001f2e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	fab2 f282 	clz	r2, r2
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	f002 021f 	and.w	r2, r2, #31
 8001f44:	2101      	movs	r1, #1
 8001f46:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1a0      	bne.n	8001e92 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f50:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d105      	bne.n	8001f64 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f58:	4b77      	ldr	r3, [pc, #476]	; (8002138 <HAL_RCC_OscConfig+0xc44>)
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	4a76      	ldr	r2, [pc, #472]	; (8002138 <HAL_RCC_OscConfig+0xc44>)
 8001f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f62:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 81c2 	beq.w	80022f4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f70:	4b71      	ldr	r3, [pc, #452]	; (8002138 <HAL_RCC_OscConfig+0xc44>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 030c 	and.w	r3, r3, #12
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	f000 819c 	beq.w	80022b6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	f040 8114 	bne.w	80021b2 <HAL_RCC_OscConfig+0xcbe>
 8001f8a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	fa93 f2a3 	rbit	r2, r3
 8001f9e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001fa2:	601a      	str	r2, [r3, #0]
  return result;
 8001fa4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001fa8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	461a      	mov	r2, r3
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7fe ff72 	bl	8000ea8 <HAL_GetTick>
 8001fc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc8:	e009      	b.n	8001fde <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fca:	f7fe ff6d 	bl	8000ea8 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e18b      	b.n	80022f6 <HAL_RCC_OscConfig+0xe02>
 8001fde:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001fe2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fe6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	fa93 f2a3 	rbit	r2, r3
 8001ff2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ff6:	601a      	str	r2, [r3, #0]
  return result;
 8001ff8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ffc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	095b      	lsrs	r3, r3, #5
 8002006:	b2db      	uxtb	r3, r3
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d102      	bne.n	8002018 <HAL_RCC_OscConfig+0xb24>
 8002012:	4b49      	ldr	r3, [pc, #292]	; (8002138 <HAL_RCC_OscConfig+0xc44>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	e01b      	b.n	8002050 <HAL_RCC_OscConfig+0xb5c>
 8002018:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800201c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	fa93 f2a3 	rbit	r2, r3
 800202c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002036:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	fa93 f2a3 	rbit	r2, r3
 8002046:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	4b3a      	ldr	r3, [pc, #232]	; (8002138 <HAL_RCC_OscConfig+0xc44>)
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002054:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002058:	6011      	str	r1, [r2, #0]
 800205a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	fa92 f1a2 	rbit	r1, r2
 8002064:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002068:	6011      	str	r1, [r2, #0]
  return result;
 800206a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	fab2 f282 	clz	r2, r2
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	f042 0220 	orr.w	r2, r2, #32
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	f002 021f 	and.w	r2, r2, #31
 8002080:	2101      	movs	r1, #1
 8002082:	fa01 f202 	lsl.w	r2, r1, r2
 8002086:	4013      	ands	r3, r2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d19e      	bne.n	8001fca <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800208c:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <HAL_RCC_OscConfig+0xc44>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800209a:	1d3b      	adds	r3, r7, #4
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	430b      	orrs	r3, r1
 80020a2:	4925      	ldr	r1, [pc, #148]	; (8002138 <HAL_RCC_OscConfig+0xc44>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	604b      	str	r3, [r1, #4]
 80020a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	fa93 f2a3 	rbit	r2, r3
 80020bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020c0:	601a      	str	r2, [r3, #0]
  return result;
 80020c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020c6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	461a      	mov	r2, r3
 80020da:	2301      	movs	r3, #1
 80020dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020de:	f7fe fee3 	bl	8000ea8 <HAL_GetTick>
 80020e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e6:	e009      	b.n	80020fc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e8:	f7fe fede 	bl	8000ea8 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e0fc      	b.n	80022f6 <HAL_RCC_OscConfig+0xe02>
 80020fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002100:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002104:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	fa93 f2a3 	rbit	r2, r3
 8002110:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002114:	601a      	str	r2, [r3, #0]
  return result;
 8002116:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800211a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800211c:	fab3 f383 	clz	r3, r3
 8002120:	b2db      	uxtb	r3, r3
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d105      	bne.n	800213c <HAL_RCC_OscConfig+0xc48>
 8002130:	4b01      	ldr	r3, [pc, #4]	; (8002138 <HAL_RCC_OscConfig+0xc44>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	e01e      	b.n	8002174 <HAL_RCC_OscConfig+0xc80>
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002140:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002144:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	fa93 f2a3 	rbit	r2, r3
 8002150:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800215a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	fa93 f2a3 	rbit	r2, r3
 800216a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	4b63      	ldr	r3, [pc, #396]	; (8002300 <HAL_RCC_OscConfig+0xe0c>)
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002178:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800217c:	6011      	str	r1, [r2, #0]
 800217e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	fa92 f1a2 	rbit	r1, r2
 8002188:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800218c:	6011      	str	r1, [r2, #0]
  return result;
 800218e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	fab2 f282 	clz	r2, r2
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	f042 0220 	orr.w	r2, r2, #32
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	f002 021f 	and.w	r2, r2, #31
 80021a4:	2101      	movs	r1, #1
 80021a6:	fa01 f202 	lsl.w	r2, r1, r2
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d09b      	beq.n	80020e8 <HAL_RCC_OscConfig+0xbf4>
 80021b0:	e0a0      	b.n	80022f4 <HAL_RCC_OscConfig+0xe00>
 80021b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	fa93 f2a3 	rbit	r2, r3
 80021c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ca:	601a      	str	r2, [r3, #0]
  return result;
 80021cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	461a      	mov	r2, r3
 80021e4:	2300      	movs	r3, #0
 80021e6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7fe fe5e 	bl	8000ea8 <HAL_GetTick>
 80021ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f0:	e009      	b.n	8002206 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f2:	f7fe fe59 	bl	8000ea8 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e077      	b.n	80022f6 <HAL_RCC_OscConfig+0xe02>
 8002206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800220a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800220e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	fa93 f2a3 	rbit	r2, r3
 800221a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221e:	601a      	str	r2, [r3, #0]
  return result;
 8002220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002224:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	095b      	lsrs	r3, r3, #5
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d102      	bne.n	8002240 <HAL_RCC_OscConfig+0xd4c>
 800223a:	4b31      	ldr	r3, [pc, #196]	; (8002300 <HAL_RCC_OscConfig+0xe0c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	e01b      	b.n	8002278 <HAL_RCC_OscConfig+0xd84>
 8002240:	f107 0320 	add.w	r3, r7, #32
 8002244:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002248:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f107 0320 	add.w	r3, r7, #32
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	fa93 f2a3 	rbit	r2, r3
 8002254:	f107 031c 	add.w	r3, r7, #28
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	f107 0318 	add.w	r3, r7, #24
 800225e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	f107 0318 	add.w	r3, r7, #24
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	fa93 f2a3 	rbit	r2, r3
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	4b22      	ldr	r3, [pc, #136]	; (8002300 <HAL_RCC_OscConfig+0xe0c>)
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	f107 0210 	add.w	r2, r7, #16
 800227c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002280:	6011      	str	r1, [r2, #0]
 8002282:	f107 0210 	add.w	r2, r7, #16
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	fa92 f1a2 	rbit	r1, r2
 800228c:	f107 020c 	add.w	r2, r7, #12
 8002290:	6011      	str	r1, [r2, #0]
  return result;
 8002292:	f107 020c 	add.w	r2, r7, #12
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	fab2 f282 	clz	r2, r2
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	f042 0220 	orr.w	r2, r2, #32
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	f002 021f 	and.w	r2, r2, #31
 80022a8:	2101      	movs	r1, #1
 80022aa:	fa01 f202 	lsl.w	r2, r1, r2
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d19e      	bne.n	80021f2 <HAL_RCC_OscConfig+0xcfe>
 80022b4:	e01e      	b.n	80022f4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b6:	1d3b      	adds	r3, r7, #4
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e018      	b.n	80022f6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c4:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <HAL_RCC_OscConfig+0xe0c>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80022cc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80022d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022d4:	1d3b      	adds	r3, r7, #4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d108      	bne.n	80022f0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80022de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80022e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40021000 	.word	0x40021000

08002304 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b09e      	sub	sp, #120	; 0x78
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e162      	b.n	80025e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800231c:	4b90      	ldr	r3, [pc, #576]	; (8002560 <HAL_RCC_ClockConfig+0x25c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d910      	bls.n	800234c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232a:	4b8d      	ldr	r3, [pc, #564]	; (8002560 <HAL_RCC_ClockConfig+0x25c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 0207 	bic.w	r2, r3, #7
 8002332:	498b      	ldr	r1, [pc, #556]	; (8002560 <HAL_RCC_ClockConfig+0x25c>)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800233a:	4b89      	ldr	r3, [pc, #548]	; (8002560 <HAL_RCC_ClockConfig+0x25c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d001      	beq.n	800234c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e14a      	b.n	80025e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002358:	4b82      	ldr	r3, [pc, #520]	; (8002564 <HAL_RCC_ClockConfig+0x260>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	497f      	ldr	r1, [pc, #508]	; (8002564 <HAL_RCC_ClockConfig+0x260>)
 8002366:	4313      	orrs	r3, r2
 8002368:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 80dc 	beq.w	8002530 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d13c      	bne.n	80023fa <HAL_RCC_ClockConfig+0xf6>
 8002380:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002384:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002388:	fa93 f3a3 	rbit	r3, r3
 800238c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800238e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002390:	fab3 f383 	clz	r3, r3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	b2db      	uxtb	r3, r3
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d102      	bne.n	80023aa <HAL_RCC_ClockConfig+0xa6>
 80023a4:	4b6f      	ldr	r3, [pc, #444]	; (8002564 <HAL_RCC_ClockConfig+0x260>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	e00f      	b.n	80023ca <HAL_RCC_ClockConfig+0xc6>
 80023aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	667b      	str	r3, [r7, #100]	; 0x64
 80023b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023bc:	663b      	str	r3, [r7, #96]	; 0x60
 80023be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023c0:	fa93 f3a3 	rbit	r3, r3
 80023c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023c6:	4b67      	ldr	r3, [pc, #412]	; (8002564 <HAL_RCC_ClockConfig+0x260>)
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80023d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023d2:	fa92 f2a2 	rbit	r2, r2
 80023d6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80023d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023da:	fab2 f282 	clz	r2, r2
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	f042 0220 	orr.w	r2, r2, #32
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	f002 021f 	and.w	r2, r2, #31
 80023ea:	2101      	movs	r1, #1
 80023ec:	fa01 f202 	lsl.w	r2, r1, r2
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d17b      	bne.n	80024ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e0f3      	b.n	80025e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d13c      	bne.n	800247c <HAL_RCC_ClockConfig+0x178>
 8002402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002406:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d102      	bne.n	800242c <HAL_RCC_ClockConfig+0x128>
 8002426:	4b4f      	ldr	r3, [pc, #316]	; (8002564 <HAL_RCC_ClockConfig+0x260>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	e00f      	b.n	800244c <HAL_RCC_ClockConfig+0x148>
 800242c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002430:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	647b      	str	r3, [r7, #68]	; 0x44
 800243a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800243e:	643b      	str	r3, [r7, #64]	; 0x40
 8002440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002442:	fa93 f3a3 	rbit	r3, r3
 8002446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002448:	4b46      	ldr	r3, [pc, #280]	; (8002564 <HAL_RCC_ClockConfig+0x260>)
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002450:	63ba      	str	r2, [r7, #56]	; 0x38
 8002452:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002454:	fa92 f2a2 	rbit	r2, r2
 8002458:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800245a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800245c:	fab2 f282 	clz	r2, r2
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	f042 0220 	orr.w	r2, r2, #32
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	f002 021f 	and.w	r2, r2, #31
 800246c:	2101      	movs	r1, #1
 800246e:	fa01 f202 	lsl.w	r2, r1, r2
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d13a      	bne.n	80024ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0b2      	b.n	80025e2 <HAL_RCC_ClockConfig+0x2de>
 800247c:	2302      	movs	r3, #2
 800247e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d102      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x1a0>
 800249e:	4b31      	ldr	r3, [pc, #196]	; (8002564 <HAL_RCC_ClockConfig+0x260>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	e00d      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1bc>
 80024a4:	2302      	movs	r3, #2
 80024a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
 80024b0:	2302      	movs	r3, #2
 80024b2:	623b      	str	r3, [r7, #32]
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	fa93 f3a3 	rbit	r3, r3
 80024ba:	61fb      	str	r3, [r7, #28]
 80024bc:	4b29      	ldr	r3, [pc, #164]	; (8002564 <HAL_RCC_ClockConfig+0x260>)
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	2202      	movs	r2, #2
 80024c2:	61ba      	str	r2, [r7, #24]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	fa92 f2a2 	rbit	r2, r2
 80024ca:	617a      	str	r2, [r7, #20]
  return result;
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	fab2 f282 	clz	r2, r2
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	f042 0220 	orr.w	r2, r2, #32
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	f002 021f 	and.w	r2, r2, #31
 80024de:	2101      	movs	r1, #1
 80024e0:	fa01 f202 	lsl.w	r2, r1, r2
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e079      	b.n	80025e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ee:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <HAL_RCC_ClockConfig+0x260>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f023 0203 	bic.w	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	491a      	ldr	r1, [pc, #104]	; (8002564 <HAL_RCC_ClockConfig+0x260>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002500:	f7fe fcd2 	bl	8000ea8 <HAL_GetTick>
 8002504:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	e00a      	b.n	800251e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002508:	f7fe fcce 	bl	8000ea8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	; 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e061      	b.n	80025e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_RCC_ClockConfig+0x260>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 020c 	and.w	r2, r3, #12
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	429a      	cmp	r2, r3
 800252e:	d1eb      	bne.n	8002508 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_RCC_ClockConfig+0x25c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d214      	bcs.n	8002568 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b08      	ldr	r3, [pc, #32]	; (8002560 <HAL_RCC_ClockConfig+0x25c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 0207 	bic.w	r2, r3, #7
 8002546:	4906      	ldr	r1, [pc, #24]	; (8002560 <HAL_RCC_ClockConfig+0x25c>)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b04      	ldr	r3, [pc, #16]	; (8002560 <HAL_RCC_ClockConfig+0x25c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d005      	beq.n	8002568 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e040      	b.n	80025e2 <HAL_RCC_ClockConfig+0x2de>
 8002560:	40022000 	.word	0x40022000
 8002564:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_RCC_ClockConfig+0x2e8>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	491a      	ldr	r1, [pc, #104]	; (80025ec <HAL_RCC_ClockConfig+0x2e8>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002592:	4b16      	ldr	r3, [pc, #88]	; (80025ec <HAL_RCC_ClockConfig+0x2e8>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4912      	ldr	r1, [pc, #72]	; (80025ec <HAL_RCC_ClockConfig+0x2e8>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025a6:	f000 f829 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 80025aa:	4601      	mov	r1, r0
 80025ac:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <HAL_RCC_ClockConfig+0x2e8>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025b4:	22f0      	movs	r2, #240	; 0xf0
 80025b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	fa92 f2a2 	rbit	r2, r2
 80025be:	60fa      	str	r2, [r7, #12]
  return result;
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	fab2 f282 	clz	r2, r2
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	40d3      	lsrs	r3, r2
 80025ca:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <HAL_RCC_ClockConfig+0x2ec>)
 80025cc:	5cd3      	ldrb	r3, [r2, r3]
 80025ce:	fa21 f303 	lsr.w	r3, r1, r3
 80025d2:	4a08      	ldr	r2, [pc, #32]	; (80025f4 <HAL_RCC_ClockConfig+0x2f0>)
 80025d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_RCC_ClockConfig+0x2f4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe fc20 	bl	8000e20 <HAL_InitTick>
  
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3778      	adds	r7, #120	; 0x78
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	08005980 	.word	0x08005980
 80025f4:	20000000 	.word	0x20000000
 80025f8:	20000004 	.word	0x20000004

080025fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b08b      	sub	sp, #44	; 0x2c
 8002600:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
 8002606:	2300      	movs	r3, #0
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002616:	4b29      	ldr	r3, [pc, #164]	; (80026bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b04      	cmp	r3, #4
 8002624:	d002      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x30>
 8002626:	2b08      	cmp	r3, #8
 8002628:	d003      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x36>
 800262a:	e03c      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800262c:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800262e:	623b      	str	r3, [r7, #32]
      break;
 8002630:	e03c      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002638:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800263c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	fa92 f2a2 	rbit	r2, r2
 8002644:	607a      	str	r2, [r7, #4]
  return result;
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	fab2 f282 	clz	r2, r2
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	40d3      	lsrs	r3, r2
 8002650:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002652:	5cd3      	ldrb	r3, [r2, r3]
 8002654:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002656:	4b19      	ldr	r3, [pc, #100]	; (80026bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	220f      	movs	r2, #15
 8002660:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	fa92 f2a2 	rbit	r2, r2
 8002668:	60fa      	str	r2, [r7, #12]
  return result;
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	fab2 f282 	clz	r2, r2
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	40d3      	lsrs	r3, r2
 8002674:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002676:	5cd3      	ldrb	r3, [r2, r3]
 8002678:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002684:	4a0e      	ldr	r2, [pc, #56]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	fbb2 f2f3 	udiv	r2, r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	fb02 f303 	mul.w	r3, r2, r3
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
 8002694:	e004      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	4a0c      	ldr	r2, [pc, #48]	; (80026cc <HAL_RCC_GetSysClockFreq+0xd0>)
 800269a:	fb02 f303 	mul.w	r3, r2, r3
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	623b      	str	r3, [r7, #32]
      break;
 80026a4:	e002      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026a8:	623b      	str	r3, [r7, #32]
      break;
 80026aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ac:	6a3b      	ldr	r3, [r7, #32]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	372c      	adds	r7, #44	; 0x2c
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	007a1200 	.word	0x007a1200
 80026c4:	08005998 	.word	0x08005998
 80026c8:	080059a8 	.word	0x080059a8
 80026cc:	003d0900 	.word	0x003d0900

080026d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000000 	.word	0x20000000

080026e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80026ee:	f7ff ffef 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 80026f2:	4601      	mov	r1, r0
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026fc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002700:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	fa92 f2a2 	rbit	r2, r2
 8002708:	603a      	str	r2, [r7, #0]
  return result;
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	fab2 f282 	clz	r2, r2
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	40d3      	lsrs	r3, r2
 8002714:	4a04      	ldr	r2, [pc, #16]	; (8002728 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002716:	5cd3      	ldrb	r3, [r2, r3]
 8002718:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40021000 	.word	0x40021000
 8002728:	08005990 	.word	0x08005990

0800272c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002732:	f7ff ffcd 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 8002736:	4601      	mov	r1, r0
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002740:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002744:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	fa92 f2a2 	rbit	r2, r2
 800274c:	603a      	str	r2, [r7, #0]
  return result;
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	fab2 f282 	clz	r2, r2
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	40d3      	lsrs	r3, r2
 8002758:	4a04      	ldr	r2, [pc, #16]	; (800276c <HAL_RCC_GetPCLK2Freq+0x40>)
 800275a:	5cd3      	ldrb	r3, [r2, r3]
 800275c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000
 800276c:	08005990 	.word	0x08005990

08002770 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b092      	sub	sp, #72	; 0x48
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002780:	2300      	movs	r3, #0
 8002782:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 80d4 	beq.w	800293c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002794:	4b4e      	ldr	r3, [pc, #312]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10e      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a0:	4b4b      	ldr	r3, [pc, #300]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	4a4a      	ldr	r2, [pc, #296]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027aa:	61d3      	str	r3, [r2, #28]
 80027ac:	4b48      	ldr	r3, [pc, #288]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b8:	2301      	movs	r3, #1
 80027ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027be:	4b45      	ldr	r3, [pc, #276]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d118      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ca:	4b42      	ldr	r3, [pc, #264]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a41      	ldr	r2, [pc, #260]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d6:	f7fe fb67 	bl	8000ea8 <HAL_GetTick>
 80027da:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027dc:	e008      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027de:	f7fe fb63 	bl	8000ea8 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b64      	cmp	r3, #100	; 0x64
 80027ea:	d901      	bls.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e169      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f0:	4b38      	ldr	r3, [pc, #224]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027fc:	4b34      	ldr	r3, [pc, #208]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002804:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 8084 	beq.w	8002916 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002816:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002818:	429a      	cmp	r2, r3
 800281a:	d07c      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800281c:	4b2c      	ldr	r3, [pc, #176]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002826:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800282a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002836:	fab3 f383 	clz	r3, r3
 800283a:	b2db      	uxtb	r3, r3
 800283c:	461a      	mov	r2, r3
 800283e:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	461a      	mov	r2, r3
 8002846:	2301      	movs	r3, #1
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800284e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	461a      	mov	r2, r3
 800286a:	2300      	movs	r3, #0
 800286c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800286e:	4a18      	ldr	r2, [pc, #96]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002872:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d04b      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7fe fb13 	bl	8000ea8 <HAL_GetTick>
 8002882:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002884:	e00a      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7fe fb0f 	bl	8000ea8 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	; 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e113      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800289c:	2302      	movs	r3, #2
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
 80028a8:	2302      	movs	r3, #2
 80028aa:	623b      	str	r3, [r7, #32]
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	fa93 f3a3 	rbit	r3, r3
 80028b2:	61fb      	str	r3, [r7, #28]
  return result;
 80028b4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d108      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80028ca:	4b01      	ldr	r3, [pc, #4]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	e00d      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40007000 	.word	0x40007000
 80028d8:	10908100 	.word	0x10908100
 80028dc:	2302      	movs	r3, #2
 80028de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	4b78      	ldr	r3, [pc, #480]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	2202      	movs	r2, #2
 80028ee:	613a      	str	r2, [r7, #16]
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	fa92 f2a2 	rbit	r2, r2
 80028f6:	60fa      	str	r2, [r7, #12]
  return result;
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	fab2 f282 	clz	r2, r2
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	f002 021f 	and.w	r2, r2, #31
 800290a:	2101      	movs	r1, #1
 800290c:	fa01 f202 	lsl.w	r2, r1, r2
 8002910:	4013      	ands	r3, r2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0b7      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002916:	4b6d      	ldr	r3, [pc, #436]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	496a      	ldr	r1, [pc, #424]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002924:	4313      	orrs	r3, r2
 8002926:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002928:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800292c:	2b01      	cmp	r3, #1
 800292e:	d105      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002930:	4b66      	ldr	r3, [pc, #408]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	4a65      	ldr	r2, [pc, #404]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800293a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002948:	4b60      	ldr	r3, [pc, #384]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	f023 0203 	bic.w	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	495d      	ldr	r1, [pc, #372]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002956:	4313      	orrs	r3, r2
 8002958:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d008      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002966:	4b59      	ldr	r3, [pc, #356]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	4956      	ldr	r1, [pc, #344]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002974:	4313      	orrs	r3, r2
 8002976:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002984:	4b51      	ldr	r3, [pc, #324]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002988:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	494e      	ldr	r1, [pc, #312]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002992:	4313      	orrs	r3, r2
 8002994:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d008      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029a2:	4b4a      	ldr	r3, [pc, #296]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f023 0210 	bic.w	r2, r3, #16
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4947      	ldr	r1, [pc, #284]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80029c0:	4b42      	ldr	r3, [pc, #264]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029cc:	493f      	ldr	r1, [pc, #252]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d008      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029de:	4b3b      	ldr	r3, [pc, #236]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f023 0220 	bic.w	r2, r3, #32
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	4938      	ldr	r1, [pc, #224]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029fc:	4b33      	ldr	r3, [pc, #204]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	4930      	ldr	r1, [pc, #192]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a1a:	4b2c      	ldr	r3, [pc, #176]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	4929      	ldr	r1, [pc, #164]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a38:	4b24      	ldr	r3, [pc, #144]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	4921      	ldr	r1, [pc, #132]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d008      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a56:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	491a      	ldr	r1, [pc, #104]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002a74:	4b15      	ldr	r3, [pc, #84]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	4912      	ldr	r1, [pc, #72]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d008      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a92:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	490b      	ldr	r1, [pc, #44]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002ab0:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002abc:	4903      	ldr	r1, [pc, #12]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3748      	adds	r7, #72	; 0x48
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40021000 	.word	0x40021000

08002ad0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e073      	b.n	8002bce <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	7f5b      	ldrb	r3, [r3, #29]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d105      	bne.n	8002afc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fd fe9c 	bl	8000834 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b10      	cmp	r3, #16
 8002b0e:	d055      	beq.n	8002bbc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	22ca      	movs	r2, #202	; 0xca
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2253      	movs	r2, #83	; 0x53
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f87f 	bl	8002c24 <RTC_EnterInitMode>
 8002b26:	4603      	mov	r3, r0
 8002b28:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d12c      	bne.n	8002b8a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b42:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6899      	ldr	r1, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	68d2      	ldr	r2, [r2, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6919      	ldr	r1, [r3, #16]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	041a      	lsls	r2, r3, #16
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f886 	bl	8002c92 <RTC_ExitInitMode>
 8002b86:	4603      	mov	r3, r0
 8002b88:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d110      	bne.n	8002bb2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	22ff      	movs	r2, #255	; 0xff
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24
 8002bba:	e001      	b.n	8002bc0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d102      	bne.n	8002bcc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0d      	ldr	r2, [pc, #52]	; (8002c20 <HAL_RTC_WaitForSynchro+0x48>)
 8002bea:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bec:	f7fe f95c 	bl	8000ea8 <HAL_GetTick>
 8002bf0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002bf2:	e009      	b.n	8002c08 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002bf4:	f7fe f958 	bl	8000ea8 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c02:	d901      	bls.n	8002c08 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e007      	b.n	8002c18 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0ee      	beq.n	8002bf4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	0001ff5f 	.word	0x0001ff5f

08002c24 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d122      	bne.n	8002c88 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c50:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c52:	f7fe f929 	bl	8000ea8 <HAL_GetTick>
 8002c56:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002c58:	e00c      	b.n	8002c74 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c5a:	f7fe f925 	bl	8000ea8 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c68:	d904      	bls.n	8002c74 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d102      	bne.n	8002c88 <RTC_EnterInitMode+0x64>
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d1e8      	bne.n	8002c5a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cac:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10a      	bne.n	8002cd2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7ff ff8b 	bl	8002bd8 <HAL_RTC_WaitForSynchro>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d004      	beq.n	8002cd2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2204      	movs	r2, #4
 8002ccc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e049      	b.n	8002d82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fd fdbc 	bl	8000880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3304      	adds	r3, #4
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	f000 fab0 	bl	8003280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d001      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e04a      	b.n	8002e3a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a21      	ldr	r2, [pc, #132]	; (8002e48 <HAL_TIM_Base_Start_IT+0xbc>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d018      	beq.n	8002df8 <HAL_TIM_Base_Start_IT+0x6c>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dce:	d013      	beq.n	8002df8 <HAL_TIM_Base_Start_IT+0x6c>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a1d      	ldr	r2, [pc, #116]	; (8002e4c <HAL_TIM_Base_Start_IT+0xc0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00e      	beq.n	8002df8 <HAL_TIM_Base_Start_IT+0x6c>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a1c      	ldr	r2, [pc, #112]	; (8002e50 <HAL_TIM_Base_Start_IT+0xc4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d009      	beq.n	8002df8 <HAL_TIM_Base_Start_IT+0x6c>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1a      	ldr	r2, [pc, #104]	; (8002e54 <HAL_TIM_Base_Start_IT+0xc8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d004      	beq.n	8002df8 <HAL_TIM_Base_Start_IT+0x6c>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a19      	ldr	r2, [pc, #100]	; (8002e58 <HAL_TIM_Base_Start_IT+0xcc>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d115      	bne.n	8002e24 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <HAL_TIM_Base_Start_IT+0xd0>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2b06      	cmp	r3, #6
 8002e08:	d015      	beq.n	8002e36 <HAL_TIM_Base_Start_IT+0xaa>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e10:	d011      	beq.n	8002e36 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0201 	orr.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e22:	e008      	b.n	8002e36 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	e000      	b.n	8002e38 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40012c00 	.word	0x40012c00
 8002e4c:	40000400 	.word	0x40000400
 8002e50:	40000800 	.word	0x40000800
 8002e54:	40013400 	.word	0x40013400
 8002e58:	40014000 	.word	0x40014000
 8002e5c:	00010007 	.word	0x00010007

08002e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d122      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d11b      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0202 	mvn.w	r2, #2
 8002e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f9ce 	bl	8003244 <HAL_TIM_IC_CaptureCallback>
 8002ea8:	e005      	b.n	8002eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f9c0 	bl	8003230 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f9d1 	bl	8003258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d122      	bne.n	8002f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d11b      	bne.n	8002f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0204 	mvn.w	r2, #4
 8002ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f9a4 	bl	8003244 <HAL_TIM_IC_CaptureCallback>
 8002efc:	e005      	b.n	8002f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f996 	bl	8003230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f9a7 	bl	8003258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d122      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d11b      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0208 	mvn.w	r2, #8
 8002f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2204      	movs	r2, #4
 8002f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f97a 	bl	8003244 <HAL_TIM_IC_CaptureCallback>
 8002f50:	e005      	b.n	8002f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f96c 	bl	8003230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f97d 	bl	8003258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b10      	cmp	r3, #16
 8002f70:	d122      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b10      	cmp	r3, #16
 8002f7e:	d11b      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0210 	mvn.w	r2, #16
 8002f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2208      	movs	r2, #8
 8002f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f950 	bl	8003244 <HAL_TIM_IC_CaptureCallback>
 8002fa4:	e005      	b.n	8002fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f942 	bl	8003230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f953 	bl	8003258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d10e      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d107      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0201 	mvn.w	r2, #1
 8002fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fd f946 	bl	8000270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fee:	2b80      	cmp	r3, #128	; 0x80
 8002ff0:	d10e      	bne.n	8003010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffc:	2b80      	cmp	r3, #128	; 0x80
 8002ffe:	d107      	bne.n	8003010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 faec 	bl	80035e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800301e:	d10e      	bne.n	800303e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302a:	2b80      	cmp	r3, #128	; 0x80
 800302c:	d107      	bne.n	800303e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 fadf 	bl	80035fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003048:	2b40      	cmp	r3, #64	; 0x40
 800304a:	d10e      	bne.n	800306a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003056:	2b40      	cmp	r3, #64	; 0x40
 8003058:	d107      	bne.n	800306a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f901 	bl	800326c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b20      	cmp	r3, #32
 8003076:	d10e      	bne.n	8003096 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b20      	cmp	r3, #32
 8003084:	d107      	bne.n	8003096 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f06f 0220 	mvn.w	r2, #32
 800308e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 fa9f 	bl	80035d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_TIM_ConfigClockSource+0x1c>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e0b6      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x18a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2202      	movs	r2, #2
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030e4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f6:	d03e      	beq.n	8003176 <HAL_TIM_ConfigClockSource+0xd8>
 80030f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030fc:	f200 8087 	bhi.w	800320e <HAL_TIM_ConfigClockSource+0x170>
 8003100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003104:	f000 8086 	beq.w	8003214 <HAL_TIM_ConfigClockSource+0x176>
 8003108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310c:	d87f      	bhi.n	800320e <HAL_TIM_ConfigClockSource+0x170>
 800310e:	2b70      	cmp	r3, #112	; 0x70
 8003110:	d01a      	beq.n	8003148 <HAL_TIM_ConfigClockSource+0xaa>
 8003112:	2b70      	cmp	r3, #112	; 0x70
 8003114:	d87b      	bhi.n	800320e <HAL_TIM_ConfigClockSource+0x170>
 8003116:	2b60      	cmp	r3, #96	; 0x60
 8003118:	d050      	beq.n	80031bc <HAL_TIM_ConfigClockSource+0x11e>
 800311a:	2b60      	cmp	r3, #96	; 0x60
 800311c:	d877      	bhi.n	800320e <HAL_TIM_ConfigClockSource+0x170>
 800311e:	2b50      	cmp	r3, #80	; 0x50
 8003120:	d03c      	beq.n	800319c <HAL_TIM_ConfigClockSource+0xfe>
 8003122:	2b50      	cmp	r3, #80	; 0x50
 8003124:	d873      	bhi.n	800320e <HAL_TIM_ConfigClockSource+0x170>
 8003126:	2b40      	cmp	r3, #64	; 0x40
 8003128:	d058      	beq.n	80031dc <HAL_TIM_ConfigClockSource+0x13e>
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	d86f      	bhi.n	800320e <HAL_TIM_ConfigClockSource+0x170>
 800312e:	2b30      	cmp	r3, #48	; 0x30
 8003130:	d064      	beq.n	80031fc <HAL_TIM_ConfigClockSource+0x15e>
 8003132:	2b30      	cmp	r3, #48	; 0x30
 8003134:	d86b      	bhi.n	800320e <HAL_TIM_ConfigClockSource+0x170>
 8003136:	2b20      	cmp	r3, #32
 8003138:	d060      	beq.n	80031fc <HAL_TIM_ConfigClockSource+0x15e>
 800313a:	2b20      	cmp	r3, #32
 800313c:	d867      	bhi.n	800320e <HAL_TIM_ConfigClockSource+0x170>
 800313e:	2b00      	cmp	r3, #0
 8003140:	d05c      	beq.n	80031fc <HAL_TIM_ConfigClockSource+0x15e>
 8003142:	2b10      	cmp	r3, #16
 8003144:	d05a      	beq.n	80031fc <HAL_TIM_ConfigClockSource+0x15e>
 8003146:	e062      	b.n	800320e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	6899      	ldr	r1, [r3, #8]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f000 f99c 	bl	8003494 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800316a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	609a      	str	r2, [r3, #8]
      break;
 8003174:	e04f      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6899      	ldr	r1, [r3, #8]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f000 f985 	bl	8003494 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003198:	609a      	str	r2, [r3, #8]
      break;
 800319a:	e03c      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	6859      	ldr	r1, [r3, #4]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	461a      	mov	r2, r3
 80031aa:	f000 f8f9 	bl	80033a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2150      	movs	r1, #80	; 0x50
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 f952 	bl	800345e <TIM_ITRx_SetConfig>
      break;
 80031ba:	e02c      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	6859      	ldr	r1, [r3, #4]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	461a      	mov	r2, r3
 80031ca:	f000 f918 	bl	80033fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2160      	movs	r1, #96	; 0x60
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 f942 	bl	800345e <TIM_ITRx_SetConfig>
      break;
 80031da:	e01c      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	461a      	mov	r2, r3
 80031ea:	f000 f8d9 	bl	80033a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2140      	movs	r1, #64	; 0x40
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 f932 	bl	800345e <TIM_ITRx_SetConfig>
      break;
 80031fa:	e00c      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4619      	mov	r1, r3
 8003206:	4610      	mov	r0, r2
 8003208:	f000 f929 	bl	800345e <TIM_ITRx_SetConfig>
      break;
 800320c:	e003      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	73fb      	strb	r3, [r7, #15]
      break;
 8003212:	e000      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003214:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003226:	7bfb      	ldrb	r3, [r7, #15]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a3c      	ldr	r2, [pc, #240]	; (8003384 <TIM_Base_SetConfig+0x104>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00f      	beq.n	80032b8 <TIM_Base_SetConfig+0x38>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329e:	d00b      	beq.n	80032b8 <TIM_Base_SetConfig+0x38>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a39      	ldr	r2, [pc, #228]	; (8003388 <TIM_Base_SetConfig+0x108>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d007      	beq.n	80032b8 <TIM_Base_SetConfig+0x38>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a38      	ldr	r2, [pc, #224]	; (800338c <TIM_Base_SetConfig+0x10c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d003      	beq.n	80032b8 <TIM_Base_SetConfig+0x38>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a37      	ldr	r2, [pc, #220]	; (8003390 <TIM_Base_SetConfig+0x110>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d108      	bne.n	80032ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a2d      	ldr	r2, [pc, #180]	; (8003384 <TIM_Base_SetConfig+0x104>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01b      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d8:	d017      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a2a      	ldr	r2, [pc, #168]	; (8003388 <TIM_Base_SetConfig+0x108>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a29      	ldr	r2, [pc, #164]	; (800338c <TIM_Base_SetConfig+0x10c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00f      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a28      	ldr	r2, [pc, #160]	; (8003390 <TIM_Base_SetConfig+0x110>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00b      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a27      	ldr	r2, [pc, #156]	; (8003394 <TIM_Base_SetConfig+0x114>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a26      	ldr	r2, [pc, #152]	; (8003398 <TIM_Base_SetConfig+0x118>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d003      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a25      	ldr	r2, [pc, #148]	; (800339c <TIM_Base_SetConfig+0x11c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d108      	bne.n	800331c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a10      	ldr	r2, [pc, #64]	; (8003384 <TIM_Base_SetConfig+0x104>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00f      	beq.n	8003368 <TIM_Base_SetConfig+0xe8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a11      	ldr	r2, [pc, #68]	; (8003390 <TIM_Base_SetConfig+0x110>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00b      	beq.n	8003368 <TIM_Base_SetConfig+0xe8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a10      	ldr	r2, [pc, #64]	; (8003394 <TIM_Base_SetConfig+0x114>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d007      	beq.n	8003368 <TIM_Base_SetConfig+0xe8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a0f      	ldr	r2, [pc, #60]	; (8003398 <TIM_Base_SetConfig+0x118>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d003      	beq.n	8003368 <TIM_Base_SetConfig+0xe8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a0e      	ldr	r2, [pc, #56]	; (800339c <TIM_Base_SetConfig+0x11c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d103      	bne.n	8003370 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	615a      	str	r2, [r3, #20]
}
 8003376:	bf00      	nop
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40012c00 	.word	0x40012c00
 8003388:	40000400 	.word	0x40000400
 800338c:	40000800 	.word	0x40000800
 8003390:	40013400 	.word	0x40013400
 8003394:	40014000 	.word	0x40014000
 8003398:	40014400 	.word	0x40014400
 800339c:	40014800 	.word	0x40014800

080033a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	f023 0201 	bic.w	r2, r3, #1
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f023 030a 	bic.w	r3, r3, #10
 80033dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	621a      	str	r2, [r3, #32]
}
 80033f2:	bf00      	nop
 80033f4:	371c      	adds	r7, #28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033fe:	b480      	push	{r7}
 8003400:	b087      	sub	sp, #28
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	f023 0210 	bic.w	r2, r3, #16
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003428:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	031b      	lsls	r3, r3, #12
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800343a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	621a      	str	r2, [r3, #32]
}
 8003452:	bf00      	nop
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800345e:	b480      	push	{r7}
 8003460:	b085      	sub	sp, #20
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	f043 0307 	orr.w	r3, r3, #7
 8003480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	609a      	str	r2, [r3, #8]
}
 8003488:	bf00      	nop
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	021a      	lsls	r2, r3, #8
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	609a      	str	r2, [r3, #8]
}
 80034c8:	bf00      	nop
 80034ca:	371c      	adds	r7, #28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e063      	b.n	80035b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a2b      	ldr	r2, [pc, #172]	; (80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d004      	beq.n	8003520 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a2a      	ldr	r2, [pc, #168]	; (80035c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d108      	bne.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003526:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003538:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1b      	ldr	r2, [pc, #108]	; (80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d018      	beq.n	8003588 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355e:	d013      	beq.n	8003588 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a18      	ldr	r2, [pc, #96]	; (80035c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00e      	beq.n	8003588 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a17      	ldr	r2, [pc, #92]	; (80035cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d009      	beq.n	8003588 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a12      	ldr	r2, [pc, #72]	; (80035c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d004      	beq.n	8003588 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a13      	ldr	r2, [pc, #76]	; (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d10c      	bne.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800358e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	4313      	orrs	r3, r2
 8003598:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	40012c00 	.word	0x40012c00
 80035c4:	40013400 	.word	0x40013400
 80035c8:	40000400 	.word	0x40000400
 80035cc:	40000800 	.word	0x40000800
 80035d0:	40014000 	.word	0x40014000

080035d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e040      	b.n	80036a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d106      	bne.n	8003638 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7fd f948 	bl	80008c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2224      	movs	r2, #36	; 0x24
 800363c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0201 	bic.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fbbc 	bl	8003dcc <UART_SetConfig>
 8003654:	4603      	mov	r3, r0
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e022      	b.n	80036a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fd82 	bl	8004170 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800367a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800368a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fe09 	bl	80042b4 <UART_CheckIdleState>
 80036a2:	4603      	mov	r3, r0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08a      	sub	sp, #40	; 0x28
 80036b0:	af02      	add	r7, sp, #8
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	603b      	str	r3, [r7, #0]
 80036b8:	4613      	mov	r3, r2
 80036ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	d178      	bne.n	80037b6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_UART_Transmit+0x24>
 80036ca:	88fb      	ldrh	r3, [r7, #6]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e071      	b.n	80037b8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2221      	movs	r2, #33	; 0x21
 80036e0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036e2:	f7fd fbe1 	bl	8000ea8 <HAL_GetTick>
 80036e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	88fa      	ldrh	r2, [r7, #6]
 80036ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	88fa      	ldrh	r2, [r7, #6]
 80036f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003700:	d108      	bne.n	8003714 <HAL_UART_Transmit+0x68>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d104      	bne.n	8003714 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800370a:	2300      	movs	r3, #0
 800370c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	61bb      	str	r3, [r7, #24]
 8003712:	e003      	b.n	800371c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003718:	2300      	movs	r3, #0
 800371a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800371c:	e030      	b.n	8003780 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2200      	movs	r2, #0
 8003726:	2180      	movs	r1, #128	; 0x80
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fe6b 	bl	8004404 <UART_WaitOnFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d004      	beq.n	800373e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e03c      	b.n	80037b8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10b      	bne.n	800375c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	881a      	ldrh	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003750:	b292      	uxth	r2, r2
 8003752:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	3302      	adds	r3, #2
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	e008      	b.n	800376e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	781a      	ldrb	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	b292      	uxth	r2, r2
 8003766:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	3301      	adds	r3, #1
 800376c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1c8      	bne.n	800371e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2200      	movs	r2, #0
 8003794:	2140      	movs	r1, #64	; 0x40
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 fe34 	bl	8004404 <UART_WaitOnFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d004      	beq.n	80037ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2220      	movs	r2, #32
 80037a6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e005      	b.n	80037b8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e000      	b.n	80037b8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
  }
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3720      	adds	r7, #32
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b0ba      	sub	sp, #232	; 0xe8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80037e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80037ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80037ee:	4013      	ands	r3, r2
 80037f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80037f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d115      	bne.n	8003828 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80037fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00f      	beq.n	8003828 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b00      	cmp	r3, #0
 8003812:	d009      	beq.n	8003828 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 82ab 	beq.w	8003d74 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	4798      	blx	r3
      }
      return;
 8003826:	e2a5      	b.n	8003d74 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003828:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 8117 	beq.w	8003a60 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800383e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003842:	4b85      	ldr	r3, [pc, #532]	; (8003a58 <HAL_UART_IRQHandler+0x298>)
 8003844:	4013      	ands	r3, r2
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 810a 	beq.w	8003a60 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800384c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d011      	beq.n	800387c <HAL_UART_IRQHandler+0xbc>
 8003858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800385c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00b      	beq.n	800387c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2201      	movs	r2, #1
 800386a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003872:	f043 0201 	orr.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800387c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d011      	beq.n	80038ac <HAL_UART_IRQHandler+0xec>
 8003888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00b      	beq.n	80038ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2202      	movs	r2, #2
 800389a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038a2:	f043 0204 	orr.w	r2, r3, #4
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d011      	beq.n	80038dc <HAL_UART_IRQHandler+0x11c>
 80038b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00b      	beq.n	80038dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2204      	movs	r2, #4
 80038ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038d2:	f043 0202 	orr.w	r2, r3, #2
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80038dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d017      	beq.n	8003918 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d105      	bne.n	8003900 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80038f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00b      	beq.n	8003918 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2208      	movs	r2, #8
 8003906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800390e:	f043 0208 	orr.w	r2, r3, #8
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003920:	2b00      	cmp	r3, #0
 8003922:	d012      	beq.n	800394a <HAL_UART_IRQHandler+0x18a>
 8003924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003928:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00c      	beq.n	800394a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003938:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003940:	f043 0220 	orr.w	r2, r3, #32
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 8211 	beq.w	8003d78 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00d      	beq.n	800397e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	d007      	beq.n	800397e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003984:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003992:	2b40      	cmp	r3, #64	; 0x40
 8003994:	d005      	beq.n	80039a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800399a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d04f      	beq.n	8003a42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fd95 	bl	80044d2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d141      	bne.n	8003a3a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3308      	adds	r3, #8
 80039bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039c4:	e853 3f00 	ldrex	r3, [r3]
 80039c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3308      	adds	r3, #8
 80039de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80039e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039f2:	e841 2300 	strex	r3, r2, [r1]
 80039f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1d9      	bne.n	80039b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d013      	beq.n	8003a32 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0e:	4a13      	ldr	r2, [pc, #76]	; (8003a5c <HAL_UART_IRQHandler+0x29c>)
 8003a10:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fd fb9c 	bl	8001154 <HAL_DMA_Abort_IT>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d017      	beq.n	8003a52 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a30:	e00f      	b.n	8003a52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f9b4 	bl	8003da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a38:	e00b      	b.n	8003a52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f9b0 	bl	8003da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a40:	e007      	b.n	8003a52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f9ac 	bl	8003da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003a50:	e192      	b.n	8003d78 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a52:	bf00      	nop
    return;
 8003a54:	e190      	b.n	8003d78 <HAL_UART_IRQHandler+0x5b8>
 8003a56:	bf00      	nop
 8003a58:	04000120 	.word	0x04000120
 8003a5c:	0800459b 	.word	0x0800459b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	f040 814b 	bne.w	8003d00 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6e:	f003 0310 	and.w	r3, r3, #16
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 8144 	beq.w	8003d00 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 813d 	beq.w	8003d00 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2210      	movs	r2, #16
 8003a8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a98:	2b40      	cmp	r3, #64	; 0x40
 8003a9a:	f040 80b5 	bne.w	8003c08 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003aaa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 8164 	beq.w	8003d7c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003aba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	f080 815c 	bcs.w	8003d7c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003aca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	f000 8086 	beq.w	8003be6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ae6:	e853 3f00 	ldrex	r3, [r3]
 8003aea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003aee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003af2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003af6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b08:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b10:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b14:	e841 2300 	strex	r3, r2, [r1]
 8003b18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1da      	bne.n	8003ada <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3308      	adds	r3, #8
 8003b2a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b2e:	e853 3f00 	ldrex	r3, [r3]
 8003b32:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3308      	adds	r3, #8
 8003b44:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b48:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b4c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b54:	e841 2300 	strex	r3, r2, [r1]
 8003b58:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1e1      	bne.n	8003b24 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3308      	adds	r3, #8
 8003b66:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b6a:	e853 3f00 	ldrex	r3, [r3]
 8003b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3308      	adds	r3, #8
 8003b80:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b84:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e3      	bne.n	8003b60 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bae:	e853 3f00 	ldrex	r3, [r3]
 8003bb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bb6:	f023 0310 	bic.w	r3, r3, #16
 8003bba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e4      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fd fa7e 	bl	80010e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2202      	movs	r2, #2
 8003bea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f8d7 	bl	8003db4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c06:	e0b9      	b.n	8003d7c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80ab 	beq.w	8003d80 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003c2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 80a6 	beq.w	8003d80 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3c:	e853 3f00 	ldrex	r3, [r3]
 8003c40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c56:	647b      	str	r3, [r7, #68]	; 0x44
 8003c58:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e4      	bne.n	8003c34 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3308      	adds	r3, #8
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	e853 3f00 	ldrex	r3, [r3]
 8003c78:	623b      	str	r3, [r7, #32]
   return(result);
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3308      	adds	r3, #8
 8003c8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c8e:	633a      	str	r2, [r7, #48]	; 0x30
 8003c90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c96:	e841 2300 	strex	r3, r2, [r1]
 8003c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1e3      	bne.n	8003c6a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	e853 3f00 	ldrex	r3, [r3]
 8003cc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0310 	bic.w	r3, r3, #16
 8003cca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	69b9      	ldr	r1, [r7, #24]
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	e841 2300 	strex	r3, r2, [r1]
 8003ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e4      	bne.n	8003cb6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cf2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f85b 	bl	8003db4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cfe:	e03f      	b.n	8003d80 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00e      	beq.n	8003d2a <HAL_UART_IRQHandler+0x56a>
 8003d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fc79 	bl	800461a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d28:	e02d      	b.n	8003d86 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00e      	beq.n	8003d54 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d008      	beq.n	8003d54 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d01c      	beq.n	8003d84 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	4798      	blx	r3
    }
    return;
 8003d52:	e017      	b.n	8003d84 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d012      	beq.n	8003d86 <HAL_UART_IRQHandler+0x5c6>
 8003d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00c      	beq.n	8003d86 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fc2a 	bl	80045c6 <UART_EndTransmit_IT>
    return;
 8003d72:	e008      	b.n	8003d86 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003d74:	bf00      	nop
 8003d76:	e006      	b.n	8003d86 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003d78:	bf00      	nop
 8003d7a:	e004      	b.n	8003d86 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003d7c:	bf00      	nop
 8003d7e:	e002      	b.n	8003d86 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003d80:	bf00      	nop
 8003d82:	e000      	b.n	8003d86 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003d84:	bf00      	nop
  }

}
 8003d86:	37e8      	adds	r7, #232	; 0xe8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003dfa:	f023 030c 	bic.w	r3, r3, #12
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6812      	ldr	r2, [r2, #0]
 8003e02:	6979      	ldr	r1, [r7, #20]
 8003e04:	430b      	orrs	r3, r1
 8003e06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4aad      	ldr	r2, [pc, #692]	; (80040fc <UART_SetConfig+0x330>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d120      	bne.n	8003e8e <UART_SetConfig+0xc2>
 8003e4c:	4bac      	ldr	r3, [pc, #688]	; (8004100 <UART_SetConfig+0x334>)
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d817      	bhi.n	8003e88 <UART_SetConfig+0xbc>
 8003e58:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <UART_SetConfig+0x94>)
 8003e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5e:	bf00      	nop
 8003e60:	08003e71 	.word	0x08003e71
 8003e64:	08003e7d 	.word	0x08003e7d
 8003e68:	08003e83 	.word	0x08003e83
 8003e6c:	08003e77 	.word	0x08003e77
 8003e70:	2301      	movs	r3, #1
 8003e72:	77fb      	strb	r3, [r7, #31]
 8003e74:	e0b5      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003e76:	2302      	movs	r3, #2
 8003e78:	77fb      	strb	r3, [r7, #31]
 8003e7a:	e0b2      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003e7c:	2304      	movs	r3, #4
 8003e7e:	77fb      	strb	r3, [r7, #31]
 8003e80:	e0af      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003e82:	2308      	movs	r3, #8
 8003e84:	77fb      	strb	r3, [r7, #31]
 8003e86:	e0ac      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003e88:	2310      	movs	r3, #16
 8003e8a:	77fb      	strb	r3, [r7, #31]
 8003e8c:	e0a9      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a9c      	ldr	r2, [pc, #624]	; (8004104 <UART_SetConfig+0x338>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d124      	bne.n	8003ee2 <UART_SetConfig+0x116>
 8003e98:	4b99      	ldr	r3, [pc, #612]	; (8004100 <UART_SetConfig+0x334>)
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ea0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ea4:	d011      	beq.n	8003eca <UART_SetConfig+0xfe>
 8003ea6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003eaa:	d817      	bhi.n	8003edc <UART_SetConfig+0x110>
 8003eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eb0:	d011      	beq.n	8003ed6 <UART_SetConfig+0x10a>
 8003eb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eb6:	d811      	bhi.n	8003edc <UART_SetConfig+0x110>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <UART_SetConfig+0xf8>
 8003ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec0:	d006      	beq.n	8003ed0 <UART_SetConfig+0x104>
 8003ec2:	e00b      	b.n	8003edc <UART_SetConfig+0x110>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	77fb      	strb	r3, [r7, #31]
 8003ec8:	e08b      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	77fb      	strb	r3, [r7, #31]
 8003ece:	e088      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	77fb      	strb	r3, [r7, #31]
 8003ed4:	e085      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003ed6:	2308      	movs	r3, #8
 8003ed8:	77fb      	strb	r3, [r7, #31]
 8003eda:	e082      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003edc:	2310      	movs	r3, #16
 8003ede:	77fb      	strb	r3, [r7, #31]
 8003ee0:	e07f      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a88      	ldr	r2, [pc, #544]	; (8004108 <UART_SetConfig+0x33c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d124      	bne.n	8003f36 <UART_SetConfig+0x16a>
 8003eec:	4b84      	ldr	r3, [pc, #528]	; (8004100 <UART_SetConfig+0x334>)
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003ef4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ef8:	d011      	beq.n	8003f1e <UART_SetConfig+0x152>
 8003efa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003efe:	d817      	bhi.n	8003f30 <UART_SetConfig+0x164>
 8003f00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f04:	d011      	beq.n	8003f2a <UART_SetConfig+0x15e>
 8003f06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f0a:	d811      	bhi.n	8003f30 <UART_SetConfig+0x164>
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <UART_SetConfig+0x14c>
 8003f10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f14:	d006      	beq.n	8003f24 <UART_SetConfig+0x158>
 8003f16:	e00b      	b.n	8003f30 <UART_SetConfig+0x164>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	77fb      	strb	r3, [r7, #31]
 8003f1c:	e061      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	77fb      	strb	r3, [r7, #31]
 8003f22:	e05e      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003f24:	2304      	movs	r3, #4
 8003f26:	77fb      	strb	r3, [r7, #31]
 8003f28:	e05b      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	77fb      	strb	r3, [r7, #31]
 8003f2e:	e058      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003f30:	2310      	movs	r3, #16
 8003f32:	77fb      	strb	r3, [r7, #31]
 8003f34:	e055      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a74      	ldr	r2, [pc, #464]	; (800410c <UART_SetConfig+0x340>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d124      	bne.n	8003f8a <UART_SetConfig+0x1be>
 8003f40:	4b6f      	ldr	r3, [pc, #444]	; (8004100 <UART_SetConfig+0x334>)
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003f48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f4c:	d011      	beq.n	8003f72 <UART_SetConfig+0x1a6>
 8003f4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f52:	d817      	bhi.n	8003f84 <UART_SetConfig+0x1b8>
 8003f54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f58:	d011      	beq.n	8003f7e <UART_SetConfig+0x1b2>
 8003f5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f5e:	d811      	bhi.n	8003f84 <UART_SetConfig+0x1b8>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <UART_SetConfig+0x1a0>
 8003f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f68:	d006      	beq.n	8003f78 <UART_SetConfig+0x1ac>
 8003f6a:	e00b      	b.n	8003f84 <UART_SetConfig+0x1b8>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e037      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003f72:	2302      	movs	r3, #2
 8003f74:	77fb      	strb	r3, [r7, #31]
 8003f76:	e034      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003f78:	2304      	movs	r3, #4
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e031      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003f7e:	2308      	movs	r3, #8
 8003f80:	77fb      	strb	r3, [r7, #31]
 8003f82:	e02e      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003f84:	2310      	movs	r3, #16
 8003f86:	77fb      	strb	r3, [r7, #31]
 8003f88:	e02b      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a60      	ldr	r2, [pc, #384]	; (8004110 <UART_SetConfig+0x344>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d124      	bne.n	8003fde <UART_SetConfig+0x212>
 8003f94:	4b5a      	ldr	r3, [pc, #360]	; (8004100 <UART_SetConfig+0x334>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003f9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fa0:	d011      	beq.n	8003fc6 <UART_SetConfig+0x1fa>
 8003fa2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fa6:	d817      	bhi.n	8003fd8 <UART_SetConfig+0x20c>
 8003fa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fac:	d011      	beq.n	8003fd2 <UART_SetConfig+0x206>
 8003fae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fb2:	d811      	bhi.n	8003fd8 <UART_SetConfig+0x20c>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <UART_SetConfig+0x1f4>
 8003fb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fbc:	d006      	beq.n	8003fcc <UART_SetConfig+0x200>
 8003fbe:	e00b      	b.n	8003fd8 <UART_SetConfig+0x20c>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e00d      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	77fb      	strb	r3, [r7, #31]
 8003fca:	e00a      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003fcc:	2304      	movs	r3, #4
 8003fce:	77fb      	strb	r3, [r7, #31]
 8003fd0:	e007      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003fd2:	2308      	movs	r3, #8
 8003fd4:	77fb      	strb	r3, [r7, #31]
 8003fd6:	e004      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003fd8:	2310      	movs	r3, #16
 8003fda:	77fb      	strb	r3, [r7, #31]
 8003fdc:	e001      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003fde:	2310      	movs	r3, #16
 8003fe0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fea:	d15b      	bne.n	80040a4 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003fec:	7ffb      	ldrb	r3, [r7, #31]
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d827      	bhi.n	8004042 <UART_SetConfig+0x276>
 8003ff2:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <UART_SetConfig+0x22c>)
 8003ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff8:	0800401d 	.word	0x0800401d
 8003ffc:	08004025 	.word	0x08004025
 8004000:	0800402d 	.word	0x0800402d
 8004004:	08004043 	.word	0x08004043
 8004008:	08004033 	.word	0x08004033
 800400c:	08004043 	.word	0x08004043
 8004010:	08004043 	.word	0x08004043
 8004014:	08004043 	.word	0x08004043
 8004018:	0800403b 	.word	0x0800403b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800401c:	f7fe fb64 	bl	80026e8 <HAL_RCC_GetPCLK1Freq>
 8004020:	61b8      	str	r0, [r7, #24]
        break;
 8004022:	e013      	b.n	800404c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004024:	f7fe fb82 	bl	800272c <HAL_RCC_GetPCLK2Freq>
 8004028:	61b8      	str	r0, [r7, #24]
        break;
 800402a:	e00f      	b.n	800404c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800402c:	4b39      	ldr	r3, [pc, #228]	; (8004114 <UART_SetConfig+0x348>)
 800402e:	61bb      	str	r3, [r7, #24]
        break;
 8004030:	e00c      	b.n	800404c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004032:	f7fe fae3 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 8004036:	61b8      	str	r0, [r7, #24]
        break;
 8004038:	e008      	b.n	800404c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800403a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800403e:	61bb      	str	r3, [r7, #24]
        break;
 8004040:	e004      	b.n	800404c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	77bb      	strb	r3, [r7, #30]
        break;
 800404a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 8083 	beq.w	800415a <UART_SetConfig+0x38e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	005a      	lsls	r2, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	085b      	lsrs	r3, r3, #1
 800405e:	441a      	add	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	fbb2 f3f3 	udiv	r3, r2, r3
 8004068:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2b0f      	cmp	r3, #15
 800406e:	d916      	bls.n	800409e <UART_SetConfig+0x2d2>
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004076:	d212      	bcs.n	800409e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	b29b      	uxth	r3, r3
 800407c:	f023 030f 	bic.w	r3, r3, #15
 8004080:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	b29b      	uxth	r3, r3
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	b29a      	uxth	r2, r3
 800408e:	89fb      	ldrh	r3, [r7, #14]
 8004090:	4313      	orrs	r3, r2
 8004092:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	89fa      	ldrh	r2, [r7, #14]
 800409a:	60da      	str	r2, [r3, #12]
 800409c:	e05d      	b.n	800415a <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	77bb      	strb	r3, [r7, #30]
 80040a2:	e05a      	b.n	800415a <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040a4:	7ffb      	ldrb	r3, [r7, #31]
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d836      	bhi.n	8004118 <UART_SetConfig+0x34c>
 80040aa:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <UART_SetConfig+0x2e4>)
 80040ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b0:	080040d5 	.word	0x080040d5
 80040b4:	080040dd 	.word	0x080040dd
 80040b8:	080040e5 	.word	0x080040e5
 80040bc:	08004119 	.word	0x08004119
 80040c0:	080040eb 	.word	0x080040eb
 80040c4:	08004119 	.word	0x08004119
 80040c8:	08004119 	.word	0x08004119
 80040cc:	08004119 	.word	0x08004119
 80040d0:	080040f3 	.word	0x080040f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040d4:	f7fe fb08 	bl	80026e8 <HAL_RCC_GetPCLK1Freq>
 80040d8:	61b8      	str	r0, [r7, #24]
        break;
 80040da:	e022      	b.n	8004122 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040dc:	f7fe fb26 	bl	800272c <HAL_RCC_GetPCLK2Freq>
 80040e0:	61b8      	str	r0, [r7, #24]
        break;
 80040e2:	e01e      	b.n	8004122 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <UART_SetConfig+0x348>)
 80040e6:	61bb      	str	r3, [r7, #24]
        break;
 80040e8:	e01b      	b.n	8004122 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ea:	f7fe fa87 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 80040ee:	61b8      	str	r0, [r7, #24]
        break;
 80040f0:	e017      	b.n	8004122 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040f6:	61bb      	str	r3, [r7, #24]
        break;
 80040f8:	e013      	b.n	8004122 <UART_SetConfig+0x356>
 80040fa:	bf00      	nop
 80040fc:	40013800 	.word	0x40013800
 8004100:	40021000 	.word	0x40021000
 8004104:	40004400 	.word	0x40004400
 8004108:	40004800 	.word	0x40004800
 800410c:	40004c00 	.word	0x40004c00
 8004110:	40005000 	.word	0x40005000
 8004114:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	77bb      	strb	r3, [r7, #30]
        break;
 8004120:	bf00      	nop
    }

    if (pclk != 0U)
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d018      	beq.n	800415a <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	085a      	lsrs	r2, r3, #1
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	441a      	add	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	fbb2 f3f3 	udiv	r3, r2, r3
 800413a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	2b0f      	cmp	r3, #15
 8004140:	d909      	bls.n	8004156 <UART_SetConfig+0x38a>
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004148:	d205      	bcs.n	8004156 <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	b29a      	uxth	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60da      	str	r2, [r3, #12]
 8004154:	e001      	b.n	800415a <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004166:	7fbb      	ldrb	r3, [r7, #30]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3720      	adds	r7, #32
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	f003 0310 	and.w	r3, r3, #16
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424c:	2b00      	cmp	r3, #0
 800424e:	d01a      	beq.n	8004286 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800426e:	d10a      	bne.n	8004286 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	605a      	str	r2, [r3, #4]
  }
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b098      	sub	sp, #96	; 0x60
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042c4:	f7fc fdf0 	bl	8000ea8 <HAL_GetTick>
 80042c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d12e      	bne.n	8004336 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e0:	2200      	movs	r2, #0
 80042e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f88c 	bl	8004404 <UART_WaitOnFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d021      	beq.n	8004336 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fa:	e853 3f00 	ldrex	r3, [r3]
 80042fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004306:	653b      	str	r3, [r7, #80]	; 0x50
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004310:	647b      	str	r3, [r7, #68]	; 0x44
 8004312:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004316:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004318:	e841 2300 	strex	r3, r2, [r1]
 800431c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800431e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e6      	bne.n	80042f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e062      	b.n	80043fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b04      	cmp	r3, #4
 8004342:	d149      	bne.n	80043d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004344:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800434c:	2200      	movs	r2, #0
 800434e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f856 	bl	8004404 <UART_WaitOnFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d03c      	beq.n	80043d8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	623b      	str	r3, [r7, #32]
   return(result);
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800437c:	633b      	str	r3, [r7, #48]	; 0x30
 800437e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004384:	e841 2300 	strex	r3, r2, [r1]
 8004388:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800438a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e6      	bne.n	800435e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3308      	adds	r3, #8
 8004396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	e853 3f00 	ldrex	r3, [r3]
 800439e:	60fb      	str	r3, [r7, #12]
   return(result);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0301 	bic.w	r3, r3, #1
 80043a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3308      	adds	r3, #8
 80043ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043b0:	61fa      	str	r2, [r7, #28]
 80043b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	69b9      	ldr	r1, [r7, #24]
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	617b      	str	r3, [r7, #20]
   return(result);
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e5      	bne.n	8004390 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e011      	b.n	80043fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3758      	adds	r7, #88	; 0x58
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	4613      	mov	r3, r2
 8004412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004414:	e049      	b.n	80044aa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441c:	d045      	beq.n	80044aa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441e:	f7fc fd43 	bl	8000ea8 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	429a      	cmp	r2, r3
 800442c:	d302      	bcc.n	8004434 <UART_WaitOnFlagUntilTimeout+0x30>
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e048      	b.n	80044ca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	d031      	beq.n	80044aa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b08      	cmp	r3, #8
 8004452:	d110      	bne.n	8004476 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2208      	movs	r2, #8
 800445a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f838 	bl	80044d2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2208      	movs	r2, #8
 8004466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e029      	b.n	80044ca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004484:	d111      	bne.n	80044aa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800448e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f81e 	bl	80044d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2220      	movs	r2, #32
 800449a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e00f      	b.n	80044ca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69da      	ldr	r2, [r3, #28]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4013      	ands	r3, r2
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	bf0c      	ite	eq
 80044ba:	2301      	moveq	r3, #1
 80044bc:	2300      	movne	r3, #0
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	461a      	mov	r2, r3
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d0a6      	beq.n	8004416 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b095      	sub	sp, #84	; 0x54
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f8:	643b      	str	r3, [r7, #64]	; 0x40
 80044fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e6      	bne.n	80044da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3308      	adds	r3, #8
 8004512:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	61fb      	str	r3, [r7, #28]
   return(result);
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f023 0301 	bic.w	r3, r3, #1
 8004522:	64bb      	str	r3, [r7, #72]	; 0x48
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3308      	adds	r3, #8
 800452a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800452c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800452e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004530:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004534:	e841 2300 	strex	r3, r2, [r1]
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e5      	bne.n	800450c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004544:	2b01      	cmp	r3, #1
 8004546:	d118      	bne.n	800457a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	60bb      	str	r3, [r7, #8]
   return(result);
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f023 0310 	bic.w	r3, r3, #16
 800455c:	647b      	str	r3, [r7, #68]	; 0x44
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	461a      	mov	r2, r3
 8004564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004566:	61bb      	str	r3, [r7, #24]
 8004568:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456a:	6979      	ldr	r1, [r7, #20]
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	613b      	str	r3, [r7, #16]
   return(result);
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1e6      	bne.n	8004548 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2220      	movs	r2, #32
 800457e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800458e:	bf00      	nop
 8004590:	3754      	adds	r7, #84	; 0x54
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f7ff fbf1 	bl	8003da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045be:	bf00      	nop
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b088      	sub	sp, #32
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	e853 3f00 	ldrex	r3, [r3]
 80045da:	60bb      	str	r3, [r7, #8]
   return(result);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e2:	61fb      	str	r3, [r7, #28]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	461a      	mov	r2, r3
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	61bb      	str	r3, [r7, #24]
 80045ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f0:	6979      	ldr	r1, [r7, #20]
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	e841 2300 	strex	r3, r2, [r1]
 80045f8:	613b      	str	r3, [r7, #16]
   return(result);
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1e6      	bne.n	80045ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2220      	movs	r2, #32
 8004604:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff fbbd 	bl	8003d8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004612:	bf00      	nop
 8004614:	3720      	adds	r7, #32
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <_Clear_DrvPar>:
*/
/******************************************************************************/
/***                        TIMER FUNCTION FOR THE DRIVER                    **/
/******************************************************************************/
void _Clear_DrvPar(Cblk_parameter_t *_cblk)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
	memset(_cblk,0,sizeof(Cblk_parameter_t));
 8004636:	2220      	movs	r2, #32
 8004638:	2100      	movs	r1, #0
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fa02 	bl	8004a44 <memset>
	_cblk->type = DR_NULL;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	711a      	strb	r2, [r3, #4]
	_cblk->active = false;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	761a      	strb	r2, [r3, #24]
	_cblk->para = 0;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	609a      	str	r2, [r3, #8]
	_cblk->private_systick = 0;
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_cblk->EventCallback_t = 0;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <Drv_RegisterTIMER>:
void Drv_RegisterTIMER(void)
{
 800466e:	b590      	push	{r4, r7, lr}
 8004670:	b08d      	sub	sp, #52	; 0x34
 8004672:	af04      	add	r7, sp, #16
	Cblk_parameter_t cbkirq;
	_Clear_DrvPar(&cbkirq);
 8004674:	463b      	mov	r3, r7
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff ffd9 	bl	800462e <_Clear_DrvPar>
	cbkirq.type = DR_TIMER_SYS;
 800467c:	2304      	movs	r3, #4
 800467e:	713b      	strb	r3, [r7, #4]
	Drv_RegisterIRQ_callback(cbkirq);
 8004680:	466c      	mov	r4, sp
 8004682:	f107 0310 	add.w	r3, r7, #16
 8004686:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004688:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800468c:	463b      	mov	r3, r7
 800468e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004690:	f000 f8d4 	bl	800483c <Drv_RegisterIRQ_callback>
}
 8004694:	bf00      	nop
 8004696:	3724      	adds	r7, #36	; 0x24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd90      	pop	{r4, r7, pc}

0800469c <DRV_TIMER_FNC>:
void DRV_TIMER_FNC(void *arg)
{
 800469c:	b4b0      	push	{r4, r5, r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<IRQ_MAX; i++)
 80046a4:	2300      	movs	r3, #0
 80046a6:	73fb      	strb	r3, [r7, #15]
 80046a8:	e07f      	b.n	80047aa <DRV_TIMER_FNC+0x10e>
	{
		if(IRQ_Arr[i].type == DR_NULL) return;
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	4a44      	ldr	r2, [pc, #272]	; (80047c0 <DRV_TIMER_FNC+0x124>)
 80046ae:	015b      	lsls	r3, r3, #5
 80046b0:	4413      	add	r3, r2
 80046b2:	3304      	adds	r3, #4
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d07c      	beq.n	80047b4 <DRV_TIMER_FNC+0x118>

		if((IRQ_Arr[i].type) == DR_TIMER)
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	4a40      	ldr	r2, [pc, #256]	; (80047c0 <DRV_TIMER_FNC+0x124>)
 80046be:	015b      	lsls	r3, r3, #5
 80046c0:	4413      	add	r3, r2
 80046c2:	3304      	adds	r3, #4
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b05      	cmp	r3, #5
 80046c8:	d16c      	bne.n	80047a4 <DRV_TIMER_FNC+0x108>
		{
			if(*(uint32_t*)IRQ_Arr[i].para != 0 && IRQ_Arr[i].para != 0)
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	4a3c      	ldr	r2, [pc, #240]	; (80047c0 <DRV_TIMER_FNC+0x124>)
 80046ce:	015b      	lsls	r3, r3, #5
 80046d0:	4413      	add	r3, r2
 80046d2:	3308      	adds	r3, #8
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d04e      	beq.n	800477a <DRV_TIMER_FNC+0xde>
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	4a38      	ldr	r2, [pc, #224]	; (80047c0 <DRV_TIMER_FNC+0x124>)
 80046e0:	015b      	lsls	r3, r3, #5
 80046e2:	4413      	add	r3, r2
 80046e4:	3308      	adds	r3, #8
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d046      	beq.n	800477a <DRV_TIMER_FNC+0xde>
			{
				if(++IRQ_Arr[i].private_systick >= (*(uint32_t*)IRQ_Arr[i].para) / DRV_TIMER_PERIOD)
 80046ec:	7bf9      	ldrb	r1, [r7, #15]
 80046ee:	4a34      	ldr	r2, [pc, #208]	; (80047c0 <DRV_TIMER_FNC+0x124>)
 80046f0:	014b      	lsls	r3, r1, #5
 80046f2:	4413      	add	r3, r2
 80046f4:	3310      	adds	r3, #16
 80046f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fa:	1c54      	adds	r4, r2, #1
 80046fc:	f143 0500 	adc.w	r5, r3, #0
 8004700:	4a2f      	ldr	r2, [pc, #188]	; (80047c0 <DRV_TIMER_FNC+0x124>)
 8004702:	014b      	lsls	r3, r1, #5
 8004704:	4413      	add	r3, r2
 8004706:	3310      	adds	r3, #16
 8004708:	e9c3 4500 	strd	r4, r5, [r3]
 800470c:	4a2c      	ldr	r2, [pc, #176]	; (80047c0 <DRV_TIMER_FNC+0x124>)
 800470e:	014b      	lsls	r3, r1, #5
 8004710:	4413      	add	r3, r2
 8004712:	3310      	adds	r3, #16
 8004714:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	4a29      	ldr	r2, [pc, #164]	; (80047c0 <DRV_TIMER_FNC+0x124>)
 800471c:	015b      	lsls	r3, r3, #5
 800471e:	4413      	add	r3, r2
 8004720:	3308      	adds	r3, #8
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a27      	ldr	r2, [pc, #156]	; (80047c4 <DRV_TIMER_FNC+0x128>)
 8004728:	fba2 2303 	umull	r2, r3, r2, r3
 800472c:	099b      	lsrs	r3, r3, #6
 800472e:	461a      	mov	r2, r3
 8004730:	f04f 0300 	mov.w	r3, #0
 8004734:	4299      	cmp	r1, r3
 8004736:	bf08      	it	eq
 8004738:	4290      	cmpeq	r0, r2
 800473a:	d333      	bcc.n	80047a4 <DRV_TIMER_FNC+0x108>
				{
					if(IRQ_Arr[i].active == false)
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	4a20      	ldr	r2, [pc, #128]	; (80047c0 <DRV_TIMER_FNC+0x124>)
 8004740:	015b      	lsls	r3, r3, #5
 8004742:	4413      	add	r3, r2
 8004744:	3318      	adds	r3, #24
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	f083 0301 	eor.w	r3, r3, #1
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d006      	beq.n	8004760 <DRV_TIMER_FNC+0xc4>
					{
						IRQ_Arr[i].active = true;
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	4a1a      	ldr	r2, [pc, #104]	; (80047c0 <DRV_TIMER_FNC+0x124>)
 8004756:	015b      	lsls	r3, r3, #5
 8004758:	4413      	add	r3, r2
 800475a:	3318      	adds	r3, #24
 800475c:	2201      	movs	r2, #1
 800475e:	701a      	strb	r2, [r3, #0]
					}
					IRQ_Arr[i].private_systick = 0;
 8004760:	7bfb      	ldrb	r3, [r7, #15]
 8004762:	4a17      	ldr	r2, [pc, #92]	; (80047c0 <DRV_TIMER_FNC+0x124>)
 8004764:	015b      	lsls	r3, r3, #5
 8004766:	4413      	add	r3, r2
 8004768:	f103 0110 	add.w	r1, r3, #16
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	e9c1 2300 	strd	r2, r3, [r1]
				if(++IRQ_Arr[i].private_systick >= (*(uint32_t*)IRQ_Arr[i].para) / DRV_TIMER_PERIOD)
 8004778:	e014      	b.n	80047a4 <DRV_TIMER_FNC+0x108>
				}
			}
			else if(!(*(uint32_t*)IRQ_Arr[i].para))
 800477a:	7bfb      	ldrb	r3, [r7, #15]
 800477c:	4a10      	ldr	r2, [pc, #64]	; (80047c0 <DRV_TIMER_FNC+0x124>)
 800477e:	015b      	lsls	r3, r3, #5
 8004780:	4413      	add	r3, r2
 8004782:	3308      	adds	r3, #8
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10b      	bne.n	80047a4 <DRV_TIMER_FNC+0x108>
			{
				IRQ_Arr[i].private_systick = 0;
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	4a0c      	ldr	r2, [pc, #48]	; (80047c0 <DRV_TIMER_FNC+0x124>)
 8004790:	015b      	lsls	r3, r3, #5
 8004792:	4413      	add	r3, r2
 8004794:	f103 0110 	add.w	r1, r3, #16
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t i=0; i<IRQ_MAX; i++)
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	3301      	adds	r3, #1
 80047a8:	73fb      	strb	r3, [r7, #15]
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	2b13      	cmp	r3, #19
 80047ae:	f67f af7c 	bls.w	80046aa <DRV_TIMER_FNC+0xe>
 80047b2:	e000      	b.n	80047b6 <DRV_TIMER_FNC+0x11a>
		if(IRQ_Arr[i].type == DR_NULL) return;
 80047b4:	bf00      	nop
			}
		}
	}
}
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bcb0      	pop	{r4, r5, r7}
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	20000758 	.word	0x20000758
 80047c4:	10624dd3 	.word	0x10624dd3

080047c8 <DRV_RUN>:

void DRV_RUN(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<IRQ_MAX; i++)
 80047ce:	2300      	movs	r3, #0
 80047d0:	71fb      	strb	r3, [r7, #7]
 80047d2:	e028      	b.n	8004826 <DRV_RUN+0x5e>
	{
		if(IRQ_Arr[i].type == DR_NULL) return;
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	4a18      	ldr	r2, [pc, #96]	; (8004838 <DRV_RUN+0x70>)
 80047d8:	015b      	lsls	r3, r3, #5
 80047da:	4413      	add	r3, r2
 80047dc:	3304      	adds	r3, #4
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d024      	beq.n	800482e <DRV_RUN+0x66>
		if(IRQ_Arr[i].active && IRQ_Arr[i].type == DR_TIMER)
 80047e4:	79fb      	ldrb	r3, [r7, #7]
 80047e6:	4a14      	ldr	r2, [pc, #80]	; (8004838 <DRV_RUN+0x70>)
 80047e8:	015b      	lsls	r3, r3, #5
 80047ea:	4413      	add	r3, r2
 80047ec:	3318      	adds	r3, #24
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d015      	beq.n	8004820 <DRV_RUN+0x58>
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	4a10      	ldr	r2, [pc, #64]	; (8004838 <DRV_RUN+0x70>)
 80047f8:	015b      	lsls	r3, r3, #5
 80047fa:	4413      	add	r3, r2
 80047fc:	3304      	adds	r3, #4
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b05      	cmp	r3, #5
 8004802:	d10d      	bne.n	8004820 <DRV_RUN+0x58>
		{
			IRQ_Arr[i].EventCallback_t(0);
 8004804:	79fb      	ldrb	r3, [r7, #7]
 8004806:	4a0c      	ldr	r2, [pc, #48]	; (8004838 <DRV_RUN+0x70>)
 8004808:	015b      	lsls	r3, r3, #5
 800480a:	4413      	add	r3, r2
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2000      	movs	r0, #0
 8004810:	4798      	blx	r3
			IRQ_Arr[i].active=false;
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	4a08      	ldr	r2, [pc, #32]	; (8004838 <DRV_RUN+0x70>)
 8004816:	015b      	lsls	r3, r3, #5
 8004818:	4413      	add	r3, r2
 800481a:	3318      	adds	r3, #24
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<IRQ_MAX; i++)
 8004820:	79fb      	ldrb	r3, [r7, #7]
 8004822:	3301      	adds	r3, #1
 8004824:	71fb      	strb	r3, [r7, #7]
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	2b13      	cmp	r3, #19
 800482a:	d9d3      	bls.n	80047d4 <DRV_RUN+0xc>
 800482c:	e000      	b.n	8004830 <DRV_RUN+0x68>
		if(IRQ_Arr[i].type == DR_NULL) return;
 800482e:	bf00      	nop
		}
	}
}
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000758 	.word	0x20000758

0800483c <Drv_RegisterIRQ_callback>:
/******************************************************************************/
/***                 INTERRUPT FUNCTIONS FOR THE DRIVER                      **/
/******************************************************************************/
bool Drv_RegisterIRQ_callback(Cblk_parameter_t cbk)
{
 800483c:	b084      	sub	sp, #16
 800483e:	b5b0      	push	{r4, r5, r7, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	af00      	add	r7, sp, #0
 8004844:	f107 0418 	add.w	r4, r7, #24
 8004848:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t i;
	for(i=0;i<IRQ_MAX;i++)
 800484c:	2300      	movs	r3, #0
 800484e:	71fb      	strb	r3, [r7, #7]
 8004850:	e020      	b.n	8004894 <Drv_RegisterIRQ_callback+0x58>
	{
		if(IRQ_Arr[i].type == DR_NULL)
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	4a15      	ldr	r2, [pc, #84]	; (80048ac <Drv_RegisterIRQ_callback+0x70>)
 8004856:	015b      	lsls	r3, r3, #5
 8004858:	4413      	add	r3, r2
 800485a:	3304      	adds	r3, #4
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d115      	bne.n	800488e <Drv_RegisterIRQ_callback+0x52>
		{
			_Clear_DrvPar(&IRQ_Arr[i]);
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	015b      	lsls	r3, r3, #5
 8004866:	4a11      	ldr	r2, [pc, #68]	; (80048ac <Drv_RegisterIRQ_callback+0x70>)
 8004868:	4413      	add	r3, r2
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff fedf 	bl	800462e <_Clear_DrvPar>
			IRQ_Arr[i] = cbk;
 8004870:	79fb      	ldrb	r3, [r7, #7]
 8004872:	4a0e      	ldr	r2, [pc, #56]	; (80048ac <Drv_RegisterIRQ_callback+0x70>)
 8004874:	015b      	lsls	r3, r3, #5
 8004876:	4413      	add	r3, r2
 8004878:	461d      	mov	r5, r3
 800487a:	f107 0418 	add.w	r4, r7, #24
 800487e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004882:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004886:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			return true;
 800488a:	2301      	movs	r3, #1
 800488c:	e006      	b.n	800489c <Drv_RegisterIRQ_callback+0x60>
	for(i=0;i<IRQ_MAX;i++)
 800488e:	79fb      	ldrb	r3, [r7, #7]
 8004890:	3301      	adds	r3, #1
 8004892:	71fb      	strb	r3, [r7, #7]
 8004894:	79fb      	ldrb	r3, [r7, #7]
 8004896:	2b13      	cmp	r3, #19
 8004898:	d9db      	bls.n	8004852 <Drv_RegisterIRQ_callback+0x16>
		}
	}
	return false;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80048a6:	b004      	add	sp, #16
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	20000758 	.word	0x20000758

080048b0 <test_cbk>:
/******************************************************************************/
/***                      Processing functions Callback                      **/
/******************************************************************************/
/******************************************************************************/
void test_cbk(void * arg)                 // callback to period timer
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
	static uint32_t check_counter = 0;
	if(check_counter != 0)
 80048b8:	4b12      	ldr	r3, [pc, #72]	; (8004904 <test_cbk+0x54>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d017      	beq.n	80048f0 <test_cbk+0x40>
	{
		LOGA(INF, "Call timer: %ld\r\n", DRV_GETTICK() - check_counter);
 80048c0:	4811      	ldr	r0, [pc, #68]	; (8004908 <test_cbk+0x58>)
 80048c2:	f000 f8c7 	bl	8004a54 <iprintf>
 80048c6:	bf00      	nop
 80048c8:	f7fc faee 	bl	8000ea8 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <test_cbk+0x54>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	222e      	movs	r2, #46	; 0x2e
 80048d6:	490d      	ldr	r1, [pc, #52]	; (800490c <test_cbk+0x5c>)
 80048d8:	480d      	ldr	r0, [pc, #52]	; (8004910 <test_cbk+0x60>)
 80048da:	f000 f8bb 	bl	8004a54 <iprintf>
 80048de:	480d      	ldr	r0, [pc, #52]	; (8004914 <test_cbk+0x64>)
 80048e0:	f000 f8b8 	bl	8004a54 <iprintf>
		check_counter = DRV_GETTICK();
 80048e4:	f7fc fae0 	bl	8000ea8 <HAL_GetTick>
 80048e8:	4603      	mov	r3, r0
 80048ea:	4a06      	ldr	r2, [pc, #24]	; (8004904 <test_cbk+0x54>)
 80048ec:	6013      	str	r3, [r2, #0]
	}
	else
	{
		check_counter = DRV_GETTICK();
	}
}
 80048ee:	e004      	b.n	80048fa <test_cbk+0x4a>
		check_counter = DRV_GETTICK();
 80048f0:	f7fc fada 	bl	8000ea8 <HAL_GetTick>
 80048f4:	4603      	mov	r3, r0
 80048f6:	4a03      	ldr	r2, [pc, #12]	; (8004904 <test_cbk+0x54>)
 80048f8:	6013      	str	r3, [r2, #0]
}
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20000090 	.word	0x20000090
 8004908:	08005940 	.word	0x08005940
 800490c:	080059b8 	.word	0x080059b8
 8004910:	08005948 	.word	0x08005948
 8004914:	08005968 	.word	0x08005968

08004918 <test_uart_cbk>:

void test_uart_cbk(void * arg)         // callback to usart interrupt
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
	uint8_t * symbol = (uint8_t *) arg;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	60fb      	str	r3, [r7, #12]
	if(TEST_CBK.usart.rx.idx < sizeof(TEST_CBK.usart.rx.rcv) - 1)
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <test_uart_cbk+0x3c>)
 8004926:	8b1b      	ldrh	r3, [r3, #24]
 8004928:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 800492c:	d80b      	bhi.n	8004946 <test_uart_cbk+0x2e>
	{
		TEST_CBK.usart.rx.rcv[TEST_CBK.usart.rx.idx++] = *symbol;
 800492e:	4b09      	ldr	r3, [pc, #36]	; (8004954 <test_uart_cbk+0x3c>)
 8004930:	8b1b      	ldrh	r3, [r3, #24]
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	b291      	uxth	r1, r2
 8004936:	4a07      	ldr	r2, [pc, #28]	; (8004954 <test_uart_cbk+0x3c>)
 8004938:	8311      	strh	r1, [r2, #24]
 800493a:	4619      	mov	r1, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	781a      	ldrb	r2, [r3, #0]
 8004940:	4b04      	ldr	r3, [pc, #16]	; (8004954 <test_uart_cbk+0x3c>)
 8004942:	440b      	add	r3, r1
 8004944:	769a      	strb	r2, [r3, #26]
	}
}
 8004946:	bf00      	nop
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	200009d8 	.word	0x200009d8

08004958 <init_test_callback>:
/******************************************************************************/
/***                            Public functions                             **/
/******************************************************************************/
/******************************************************************************/
void init_test_callback(void)
{
 8004958:	b590      	push	{r4, r7, lr}
 800495a:	b095      	sub	sp, #84	; 0x54
 800495c:	af04      	add	r7, sp, #16
	memset(&TEST_CBK, 0x00, sizeof(TEST_CBK));
 800495e:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 8004962:	2100      	movs	r1, #0
 8004964:	481d      	ldr	r0, [pc, #116]	; (80049dc <init_test_callback+0x84>)
 8004966:	f000 f86d 	bl	8004a44 <memset>

	Cblk_parameter_t test_callback;

	TEST_CBK.tim.time_refesh = 6000;
 800496a:	4b1c      	ldr	r3, [pc, #112]	; (80049dc <init_test_callback+0x84>)
 800496c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004970:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8

	_Clear_DrvPar(&test_callback);
 8004974:	f107 0320 	add.w	r3, r7, #32
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff fe58 	bl	800462e <_Clear_DrvPar>
	test_callback.type = DR_TIMER;
 800497e:	2305      	movs	r3, #5
 8004980:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	test_callback.para = &TEST_CBK.tim.time_refesh;
 8004984:	4b16      	ldr	r3, [pc, #88]	; (80049e0 <init_test_callback+0x88>)
 8004986:	62bb      	str	r3, [r7, #40]	; 0x28
	test_callback.EventCallback_t = &test_cbk;
 8004988:	4b16      	ldr	r3, [pc, #88]	; (80049e4 <init_test_callback+0x8c>)
 800498a:	623b      	str	r3, [r7, #32]
	Drv_RegisterIRQ_callback(test_callback);
 800498c:	466c      	mov	r4, sp
 800498e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004992:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004994:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004998:	f107 0320 	add.w	r3, r7, #32
 800499c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800499e:	f7ff ff4d 	bl	800483c <Drv_RegisterIRQ_callback>




	Cblk_parameter_t test_uart;
	TEST_CBK.usart.peri.uart.rcu_uart = RCU_USART1;
 80049a2:	4b0e      	ldr	r3, [pc, #56]	; (80049dc <init_test_callback+0x84>)
 80049a4:	4a10      	ldr	r2, [pc, #64]	; (80049e8 <init_test_callback+0x90>)
 80049a6:	601a      	str	r2, [r3, #0]

	_Clear_DrvPar(&test_uart);
 80049a8:	463b      	mov	r3, r7
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff fe3f 	bl	800462e <_Clear_DrvPar>
	test_uart.type = DR_UART;
 80049b0:	2301      	movs	r3, #1
 80049b2:	713b      	strb	r3, [r7, #4]
	test_uart.para = &TEST_CBK.usart.peri.uart.rcu_uart;
 80049b4:	4b09      	ldr	r3, [pc, #36]	; (80049dc <init_test_callback+0x84>)
 80049b6:	60bb      	str	r3, [r7, #8]
	test_uart.EventCallback_t = &test_uart_cbk;
 80049b8:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <init_test_callback+0x94>)
 80049ba:	603b      	str	r3, [r7, #0]
	Drv_RegisterIRQ_callback(test_callback);
 80049bc:	466c      	mov	r4, sp
 80049be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80049c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80049c8:	f107 0320 	add.w	r3, r7, #32
 80049cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049ce:	f7ff ff35 	bl	800483c <Drv_RegisterIRQ_callback>

//	TEST_CBK.init = &init_test_callback;
}
 80049d2:	bf00      	nop
 80049d4:	3744      	adds	r7, #68	; 0x44
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd90      	pop	{r4, r7, pc}
 80049da:	bf00      	nop
 80049dc:	200009d8 	.word	0x200009d8
 80049e0:	20000b90 	.word	0x20000b90
 80049e4:	080048b1 	.word	0x080048b1
 80049e8:	40013800 	.word	0x40013800
 80049ec:	08004919 	.word	0x08004919

080049f0 <__errno>:
 80049f0:	4b01      	ldr	r3, [pc, #4]	; (80049f8 <__errno+0x8>)
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	2000000c 	.word	0x2000000c

080049fc <__libc_init_array>:
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	4d0d      	ldr	r5, [pc, #52]	; (8004a34 <__libc_init_array+0x38>)
 8004a00:	4c0d      	ldr	r4, [pc, #52]	; (8004a38 <__libc_init_array+0x3c>)
 8004a02:	1b64      	subs	r4, r4, r5
 8004a04:	10a4      	asrs	r4, r4, #2
 8004a06:	2600      	movs	r6, #0
 8004a08:	42a6      	cmp	r6, r4
 8004a0a:	d109      	bne.n	8004a20 <__libc_init_array+0x24>
 8004a0c:	4d0b      	ldr	r5, [pc, #44]	; (8004a3c <__libc_init_array+0x40>)
 8004a0e:	4c0c      	ldr	r4, [pc, #48]	; (8004a40 <__libc_init_array+0x44>)
 8004a10:	f000 ff76 	bl	8005900 <_init>
 8004a14:	1b64      	subs	r4, r4, r5
 8004a16:	10a4      	asrs	r4, r4, #2
 8004a18:	2600      	movs	r6, #0
 8004a1a:	42a6      	cmp	r6, r4
 8004a1c:	d105      	bne.n	8004a2a <__libc_init_array+0x2e>
 8004a1e:	bd70      	pop	{r4, r5, r6, pc}
 8004a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a24:	4798      	blx	r3
 8004a26:	3601      	adds	r6, #1
 8004a28:	e7ee      	b.n	8004a08 <__libc_init_array+0xc>
 8004a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a2e:	4798      	blx	r3
 8004a30:	3601      	adds	r6, #1
 8004a32:	e7f2      	b.n	8004a1a <__libc_init_array+0x1e>
 8004a34:	08005a5c 	.word	0x08005a5c
 8004a38:	08005a5c 	.word	0x08005a5c
 8004a3c:	08005a5c 	.word	0x08005a5c
 8004a40:	08005a60 	.word	0x08005a60

08004a44 <memset>:
 8004a44:	4402      	add	r2, r0
 8004a46:	4603      	mov	r3, r0
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d100      	bne.n	8004a4e <memset+0xa>
 8004a4c:	4770      	bx	lr
 8004a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a52:	e7f9      	b.n	8004a48 <memset+0x4>

08004a54 <iprintf>:
 8004a54:	b40f      	push	{r0, r1, r2, r3}
 8004a56:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <iprintf+0x2c>)
 8004a58:	b513      	push	{r0, r1, r4, lr}
 8004a5a:	681c      	ldr	r4, [r3, #0]
 8004a5c:	b124      	cbz	r4, 8004a68 <iprintf+0x14>
 8004a5e:	69a3      	ldr	r3, [r4, #24]
 8004a60:	b913      	cbnz	r3, 8004a68 <iprintf+0x14>
 8004a62:	4620      	mov	r0, r4
 8004a64:	f000 f9e8 	bl	8004e38 <__sinit>
 8004a68:	ab05      	add	r3, sp, #20
 8004a6a:	9a04      	ldr	r2, [sp, #16]
 8004a6c:	68a1      	ldr	r1, [r4, #8]
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	4620      	mov	r0, r4
 8004a72:	f000 fbb9 	bl	80051e8 <_vfiprintf_r>
 8004a76:	b002      	add	sp, #8
 8004a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a7c:	b004      	add	sp, #16
 8004a7e:	4770      	bx	lr
 8004a80:	2000000c 	.word	0x2000000c

08004a84 <__swbuf_r>:
 8004a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a86:	460e      	mov	r6, r1
 8004a88:	4614      	mov	r4, r2
 8004a8a:	4605      	mov	r5, r0
 8004a8c:	b118      	cbz	r0, 8004a96 <__swbuf_r+0x12>
 8004a8e:	6983      	ldr	r3, [r0, #24]
 8004a90:	b90b      	cbnz	r3, 8004a96 <__swbuf_r+0x12>
 8004a92:	f000 f9d1 	bl	8004e38 <__sinit>
 8004a96:	4b21      	ldr	r3, [pc, #132]	; (8004b1c <__swbuf_r+0x98>)
 8004a98:	429c      	cmp	r4, r3
 8004a9a:	d12b      	bne.n	8004af4 <__swbuf_r+0x70>
 8004a9c:	686c      	ldr	r4, [r5, #4]
 8004a9e:	69a3      	ldr	r3, [r4, #24]
 8004aa0:	60a3      	str	r3, [r4, #8]
 8004aa2:	89a3      	ldrh	r3, [r4, #12]
 8004aa4:	071a      	lsls	r2, r3, #28
 8004aa6:	d52f      	bpl.n	8004b08 <__swbuf_r+0x84>
 8004aa8:	6923      	ldr	r3, [r4, #16]
 8004aaa:	b36b      	cbz	r3, 8004b08 <__swbuf_r+0x84>
 8004aac:	6923      	ldr	r3, [r4, #16]
 8004aae:	6820      	ldr	r0, [r4, #0]
 8004ab0:	1ac0      	subs	r0, r0, r3
 8004ab2:	6963      	ldr	r3, [r4, #20]
 8004ab4:	b2f6      	uxtb	r6, r6
 8004ab6:	4283      	cmp	r3, r0
 8004ab8:	4637      	mov	r7, r6
 8004aba:	dc04      	bgt.n	8004ac6 <__swbuf_r+0x42>
 8004abc:	4621      	mov	r1, r4
 8004abe:	4628      	mov	r0, r5
 8004ac0:	f000 f926 	bl	8004d10 <_fflush_r>
 8004ac4:	bb30      	cbnz	r0, 8004b14 <__swbuf_r+0x90>
 8004ac6:	68a3      	ldr	r3, [r4, #8]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	60a3      	str	r3, [r4, #8]
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	6022      	str	r2, [r4, #0]
 8004ad2:	701e      	strb	r6, [r3, #0]
 8004ad4:	6963      	ldr	r3, [r4, #20]
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	4283      	cmp	r3, r0
 8004ada:	d004      	beq.n	8004ae6 <__swbuf_r+0x62>
 8004adc:	89a3      	ldrh	r3, [r4, #12]
 8004ade:	07db      	lsls	r3, r3, #31
 8004ae0:	d506      	bpl.n	8004af0 <__swbuf_r+0x6c>
 8004ae2:	2e0a      	cmp	r6, #10
 8004ae4:	d104      	bne.n	8004af0 <__swbuf_r+0x6c>
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	4628      	mov	r0, r5
 8004aea:	f000 f911 	bl	8004d10 <_fflush_r>
 8004aee:	b988      	cbnz	r0, 8004b14 <__swbuf_r+0x90>
 8004af0:	4638      	mov	r0, r7
 8004af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004af4:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <__swbuf_r+0x9c>)
 8004af6:	429c      	cmp	r4, r3
 8004af8:	d101      	bne.n	8004afe <__swbuf_r+0x7a>
 8004afa:	68ac      	ldr	r4, [r5, #8]
 8004afc:	e7cf      	b.n	8004a9e <__swbuf_r+0x1a>
 8004afe:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <__swbuf_r+0xa0>)
 8004b00:	429c      	cmp	r4, r3
 8004b02:	bf08      	it	eq
 8004b04:	68ec      	ldreq	r4, [r5, #12]
 8004b06:	e7ca      	b.n	8004a9e <__swbuf_r+0x1a>
 8004b08:	4621      	mov	r1, r4
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f000 f80c 	bl	8004b28 <__swsetup_r>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	d0cb      	beq.n	8004aac <__swbuf_r+0x28>
 8004b14:	f04f 37ff 	mov.w	r7, #4294967295
 8004b18:	e7ea      	b.n	8004af0 <__swbuf_r+0x6c>
 8004b1a:	bf00      	nop
 8004b1c:	080059e8 	.word	0x080059e8
 8004b20:	08005a08 	.word	0x08005a08
 8004b24:	080059c8 	.word	0x080059c8

08004b28 <__swsetup_r>:
 8004b28:	4b32      	ldr	r3, [pc, #200]	; (8004bf4 <__swsetup_r+0xcc>)
 8004b2a:	b570      	push	{r4, r5, r6, lr}
 8004b2c:	681d      	ldr	r5, [r3, #0]
 8004b2e:	4606      	mov	r6, r0
 8004b30:	460c      	mov	r4, r1
 8004b32:	b125      	cbz	r5, 8004b3e <__swsetup_r+0x16>
 8004b34:	69ab      	ldr	r3, [r5, #24]
 8004b36:	b913      	cbnz	r3, 8004b3e <__swsetup_r+0x16>
 8004b38:	4628      	mov	r0, r5
 8004b3a:	f000 f97d 	bl	8004e38 <__sinit>
 8004b3e:	4b2e      	ldr	r3, [pc, #184]	; (8004bf8 <__swsetup_r+0xd0>)
 8004b40:	429c      	cmp	r4, r3
 8004b42:	d10f      	bne.n	8004b64 <__swsetup_r+0x3c>
 8004b44:	686c      	ldr	r4, [r5, #4]
 8004b46:	89a3      	ldrh	r3, [r4, #12]
 8004b48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b4c:	0719      	lsls	r1, r3, #28
 8004b4e:	d42c      	bmi.n	8004baa <__swsetup_r+0x82>
 8004b50:	06dd      	lsls	r5, r3, #27
 8004b52:	d411      	bmi.n	8004b78 <__swsetup_r+0x50>
 8004b54:	2309      	movs	r3, #9
 8004b56:	6033      	str	r3, [r6, #0]
 8004b58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b5c:	81a3      	strh	r3, [r4, #12]
 8004b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b62:	e03e      	b.n	8004be2 <__swsetup_r+0xba>
 8004b64:	4b25      	ldr	r3, [pc, #148]	; (8004bfc <__swsetup_r+0xd4>)
 8004b66:	429c      	cmp	r4, r3
 8004b68:	d101      	bne.n	8004b6e <__swsetup_r+0x46>
 8004b6a:	68ac      	ldr	r4, [r5, #8]
 8004b6c:	e7eb      	b.n	8004b46 <__swsetup_r+0x1e>
 8004b6e:	4b24      	ldr	r3, [pc, #144]	; (8004c00 <__swsetup_r+0xd8>)
 8004b70:	429c      	cmp	r4, r3
 8004b72:	bf08      	it	eq
 8004b74:	68ec      	ldreq	r4, [r5, #12]
 8004b76:	e7e6      	b.n	8004b46 <__swsetup_r+0x1e>
 8004b78:	0758      	lsls	r0, r3, #29
 8004b7a:	d512      	bpl.n	8004ba2 <__swsetup_r+0x7a>
 8004b7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b7e:	b141      	cbz	r1, 8004b92 <__swsetup_r+0x6a>
 8004b80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b84:	4299      	cmp	r1, r3
 8004b86:	d002      	beq.n	8004b8e <__swsetup_r+0x66>
 8004b88:	4630      	mov	r0, r6
 8004b8a:	f000 fa59 	bl	8005040 <_free_r>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	6363      	str	r3, [r4, #52]	; 0x34
 8004b92:	89a3      	ldrh	r3, [r4, #12]
 8004b94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b98:	81a3      	strh	r3, [r4, #12]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	6063      	str	r3, [r4, #4]
 8004b9e:	6923      	ldr	r3, [r4, #16]
 8004ba0:	6023      	str	r3, [r4, #0]
 8004ba2:	89a3      	ldrh	r3, [r4, #12]
 8004ba4:	f043 0308 	orr.w	r3, r3, #8
 8004ba8:	81a3      	strh	r3, [r4, #12]
 8004baa:	6923      	ldr	r3, [r4, #16]
 8004bac:	b94b      	cbnz	r3, 8004bc2 <__swsetup_r+0x9a>
 8004bae:	89a3      	ldrh	r3, [r4, #12]
 8004bb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bb8:	d003      	beq.n	8004bc2 <__swsetup_r+0x9a>
 8004bba:	4621      	mov	r1, r4
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	f000 f9ff 	bl	8004fc0 <__smakebuf_r>
 8004bc2:	89a0      	ldrh	r0, [r4, #12]
 8004bc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bc8:	f010 0301 	ands.w	r3, r0, #1
 8004bcc:	d00a      	beq.n	8004be4 <__swsetup_r+0xbc>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60a3      	str	r3, [r4, #8]
 8004bd2:	6963      	ldr	r3, [r4, #20]
 8004bd4:	425b      	negs	r3, r3
 8004bd6:	61a3      	str	r3, [r4, #24]
 8004bd8:	6923      	ldr	r3, [r4, #16]
 8004bda:	b943      	cbnz	r3, 8004bee <__swsetup_r+0xc6>
 8004bdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004be0:	d1ba      	bne.n	8004b58 <__swsetup_r+0x30>
 8004be2:	bd70      	pop	{r4, r5, r6, pc}
 8004be4:	0781      	lsls	r1, r0, #30
 8004be6:	bf58      	it	pl
 8004be8:	6963      	ldrpl	r3, [r4, #20]
 8004bea:	60a3      	str	r3, [r4, #8]
 8004bec:	e7f4      	b.n	8004bd8 <__swsetup_r+0xb0>
 8004bee:	2000      	movs	r0, #0
 8004bf0:	e7f7      	b.n	8004be2 <__swsetup_r+0xba>
 8004bf2:	bf00      	nop
 8004bf4:	2000000c 	.word	0x2000000c
 8004bf8:	080059e8 	.word	0x080059e8
 8004bfc:	08005a08 	.word	0x08005a08
 8004c00:	080059c8 	.word	0x080059c8

08004c04 <__sflush_r>:
 8004c04:	898a      	ldrh	r2, [r1, #12]
 8004c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c0a:	4605      	mov	r5, r0
 8004c0c:	0710      	lsls	r0, r2, #28
 8004c0e:	460c      	mov	r4, r1
 8004c10:	d458      	bmi.n	8004cc4 <__sflush_r+0xc0>
 8004c12:	684b      	ldr	r3, [r1, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	dc05      	bgt.n	8004c24 <__sflush_r+0x20>
 8004c18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	dc02      	bgt.n	8004c24 <__sflush_r+0x20>
 8004c1e:	2000      	movs	r0, #0
 8004c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c26:	2e00      	cmp	r6, #0
 8004c28:	d0f9      	beq.n	8004c1e <__sflush_r+0x1a>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c30:	682f      	ldr	r7, [r5, #0]
 8004c32:	602b      	str	r3, [r5, #0]
 8004c34:	d032      	beq.n	8004c9c <__sflush_r+0x98>
 8004c36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c38:	89a3      	ldrh	r3, [r4, #12]
 8004c3a:	075a      	lsls	r2, r3, #29
 8004c3c:	d505      	bpl.n	8004c4a <__sflush_r+0x46>
 8004c3e:	6863      	ldr	r3, [r4, #4]
 8004c40:	1ac0      	subs	r0, r0, r3
 8004c42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c44:	b10b      	cbz	r3, 8004c4a <__sflush_r+0x46>
 8004c46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c48:	1ac0      	subs	r0, r0, r3
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c50:	6a21      	ldr	r1, [r4, #32]
 8004c52:	4628      	mov	r0, r5
 8004c54:	47b0      	blx	r6
 8004c56:	1c43      	adds	r3, r0, #1
 8004c58:	89a3      	ldrh	r3, [r4, #12]
 8004c5a:	d106      	bne.n	8004c6a <__sflush_r+0x66>
 8004c5c:	6829      	ldr	r1, [r5, #0]
 8004c5e:	291d      	cmp	r1, #29
 8004c60:	d82c      	bhi.n	8004cbc <__sflush_r+0xb8>
 8004c62:	4a2a      	ldr	r2, [pc, #168]	; (8004d0c <__sflush_r+0x108>)
 8004c64:	40ca      	lsrs	r2, r1
 8004c66:	07d6      	lsls	r6, r2, #31
 8004c68:	d528      	bpl.n	8004cbc <__sflush_r+0xb8>
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	6062      	str	r2, [r4, #4]
 8004c6e:	04d9      	lsls	r1, r3, #19
 8004c70:	6922      	ldr	r2, [r4, #16]
 8004c72:	6022      	str	r2, [r4, #0]
 8004c74:	d504      	bpl.n	8004c80 <__sflush_r+0x7c>
 8004c76:	1c42      	adds	r2, r0, #1
 8004c78:	d101      	bne.n	8004c7e <__sflush_r+0x7a>
 8004c7a:	682b      	ldr	r3, [r5, #0]
 8004c7c:	b903      	cbnz	r3, 8004c80 <__sflush_r+0x7c>
 8004c7e:	6560      	str	r0, [r4, #84]	; 0x54
 8004c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c82:	602f      	str	r7, [r5, #0]
 8004c84:	2900      	cmp	r1, #0
 8004c86:	d0ca      	beq.n	8004c1e <__sflush_r+0x1a>
 8004c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c8c:	4299      	cmp	r1, r3
 8004c8e:	d002      	beq.n	8004c96 <__sflush_r+0x92>
 8004c90:	4628      	mov	r0, r5
 8004c92:	f000 f9d5 	bl	8005040 <_free_r>
 8004c96:	2000      	movs	r0, #0
 8004c98:	6360      	str	r0, [r4, #52]	; 0x34
 8004c9a:	e7c1      	b.n	8004c20 <__sflush_r+0x1c>
 8004c9c:	6a21      	ldr	r1, [r4, #32]
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	47b0      	blx	r6
 8004ca4:	1c41      	adds	r1, r0, #1
 8004ca6:	d1c7      	bne.n	8004c38 <__sflush_r+0x34>
 8004ca8:	682b      	ldr	r3, [r5, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0c4      	beq.n	8004c38 <__sflush_r+0x34>
 8004cae:	2b1d      	cmp	r3, #29
 8004cb0:	d001      	beq.n	8004cb6 <__sflush_r+0xb2>
 8004cb2:	2b16      	cmp	r3, #22
 8004cb4:	d101      	bne.n	8004cba <__sflush_r+0xb6>
 8004cb6:	602f      	str	r7, [r5, #0]
 8004cb8:	e7b1      	b.n	8004c1e <__sflush_r+0x1a>
 8004cba:	89a3      	ldrh	r3, [r4, #12]
 8004cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cc0:	81a3      	strh	r3, [r4, #12]
 8004cc2:	e7ad      	b.n	8004c20 <__sflush_r+0x1c>
 8004cc4:	690f      	ldr	r7, [r1, #16]
 8004cc6:	2f00      	cmp	r7, #0
 8004cc8:	d0a9      	beq.n	8004c1e <__sflush_r+0x1a>
 8004cca:	0793      	lsls	r3, r2, #30
 8004ccc:	680e      	ldr	r6, [r1, #0]
 8004cce:	bf08      	it	eq
 8004cd0:	694b      	ldreq	r3, [r1, #20]
 8004cd2:	600f      	str	r7, [r1, #0]
 8004cd4:	bf18      	it	ne
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	eba6 0807 	sub.w	r8, r6, r7
 8004cdc:	608b      	str	r3, [r1, #8]
 8004cde:	f1b8 0f00 	cmp.w	r8, #0
 8004ce2:	dd9c      	ble.n	8004c1e <__sflush_r+0x1a>
 8004ce4:	6a21      	ldr	r1, [r4, #32]
 8004ce6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ce8:	4643      	mov	r3, r8
 8004cea:	463a      	mov	r2, r7
 8004cec:	4628      	mov	r0, r5
 8004cee:	47b0      	blx	r6
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	dc06      	bgt.n	8004d02 <__sflush_r+0xfe>
 8004cf4:	89a3      	ldrh	r3, [r4, #12]
 8004cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cfa:	81a3      	strh	r3, [r4, #12]
 8004cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004d00:	e78e      	b.n	8004c20 <__sflush_r+0x1c>
 8004d02:	4407      	add	r7, r0
 8004d04:	eba8 0800 	sub.w	r8, r8, r0
 8004d08:	e7e9      	b.n	8004cde <__sflush_r+0xda>
 8004d0a:	bf00      	nop
 8004d0c:	20400001 	.word	0x20400001

08004d10 <_fflush_r>:
 8004d10:	b538      	push	{r3, r4, r5, lr}
 8004d12:	690b      	ldr	r3, [r1, #16]
 8004d14:	4605      	mov	r5, r0
 8004d16:	460c      	mov	r4, r1
 8004d18:	b913      	cbnz	r3, 8004d20 <_fflush_r+0x10>
 8004d1a:	2500      	movs	r5, #0
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	b118      	cbz	r0, 8004d2a <_fflush_r+0x1a>
 8004d22:	6983      	ldr	r3, [r0, #24]
 8004d24:	b90b      	cbnz	r3, 8004d2a <_fflush_r+0x1a>
 8004d26:	f000 f887 	bl	8004e38 <__sinit>
 8004d2a:	4b14      	ldr	r3, [pc, #80]	; (8004d7c <_fflush_r+0x6c>)
 8004d2c:	429c      	cmp	r4, r3
 8004d2e:	d11b      	bne.n	8004d68 <_fflush_r+0x58>
 8004d30:	686c      	ldr	r4, [r5, #4]
 8004d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0ef      	beq.n	8004d1a <_fflush_r+0xa>
 8004d3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d3c:	07d0      	lsls	r0, r2, #31
 8004d3e:	d404      	bmi.n	8004d4a <_fflush_r+0x3a>
 8004d40:	0599      	lsls	r1, r3, #22
 8004d42:	d402      	bmi.n	8004d4a <_fflush_r+0x3a>
 8004d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d46:	f000 f915 	bl	8004f74 <__retarget_lock_acquire_recursive>
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	f7ff ff59 	bl	8004c04 <__sflush_r>
 8004d52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d54:	07da      	lsls	r2, r3, #31
 8004d56:	4605      	mov	r5, r0
 8004d58:	d4e0      	bmi.n	8004d1c <_fflush_r+0xc>
 8004d5a:	89a3      	ldrh	r3, [r4, #12]
 8004d5c:	059b      	lsls	r3, r3, #22
 8004d5e:	d4dd      	bmi.n	8004d1c <_fflush_r+0xc>
 8004d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d62:	f000 f908 	bl	8004f76 <__retarget_lock_release_recursive>
 8004d66:	e7d9      	b.n	8004d1c <_fflush_r+0xc>
 8004d68:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <_fflush_r+0x70>)
 8004d6a:	429c      	cmp	r4, r3
 8004d6c:	d101      	bne.n	8004d72 <_fflush_r+0x62>
 8004d6e:	68ac      	ldr	r4, [r5, #8]
 8004d70:	e7df      	b.n	8004d32 <_fflush_r+0x22>
 8004d72:	4b04      	ldr	r3, [pc, #16]	; (8004d84 <_fflush_r+0x74>)
 8004d74:	429c      	cmp	r4, r3
 8004d76:	bf08      	it	eq
 8004d78:	68ec      	ldreq	r4, [r5, #12]
 8004d7a:	e7da      	b.n	8004d32 <_fflush_r+0x22>
 8004d7c:	080059e8 	.word	0x080059e8
 8004d80:	08005a08 	.word	0x08005a08
 8004d84:	080059c8 	.word	0x080059c8

08004d88 <std>:
 8004d88:	2300      	movs	r3, #0
 8004d8a:	b510      	push	{r4, lr}
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8004d92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d96:	6083      	str	r3, [r0, #8]
 8004d98:	8181      	strh	r1, [r0, #12]
 8004d9a:	6643      	str	r3, [r0, #100]	; 0x64
 8004d9c:	81c2      	strh	r2, [r0, #14]
 8004d9e:	6183      	str	r3, [r0, #24]
 8004da0:	4619      	mov	r1, r3
 8004da2:	2208      	movs	r2, #8
 8004da4:	305c      	adds	r0, #92	; 0x5c
 8004da6:	f7ff fe4d 	bl	8004a44 <memset>
 8004daa:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <std+0x38>)
 8004dac:	6263      	str	r3, [r4, #36]	; 0x24
 8004dae:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <std+0x3c>)
 8004db0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004db2:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <std+0x40>)
 8004db4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004db6:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <std+0x44>)
 8004db8:	6224      	str	r4, [r4, #32]
 8004dba:	6323      	str	r3, [r4, #48]	; 0x30
 8004dbc:	bd10      	pop	{r4, pc}
 8004dbe:	bf00      	nop
 8004dc0:	08005791 	.word	0x08005791
 8004dc4:	080057b3 	.word	0x080057b3
 8004dc8:	080057eb 	.word	0x080057eb
 8004dcc:	0800580f 	.word	0x0800580f

08004dd0 <_cleanup_r>:
 8004dd0:	4901      	ldr	r1, [pc, #4]	; (8004dd8 <_cleanup_r+0x8>)
 8004dd2:	f000 b8af 	b.w	8004f34 <_fwalk_reent>
 8004dd6:	bf00      	nop
 8004dd8:	08004d11 	.word	0x08004d11

08004ddc <__sfmoreglue>:
 8004ddc:	b570      	push	{r4, r5, r6, lr}
 8004dde:	1e4a      	subs	r2, r1, #1
 8004de0:	2568      	movs	r5, #104	; 0x68
 8004de2:	4355      	muls	r5, r2
 8004de4:	460e      	mov	r6, r1
 8004de6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004dea:	f000 f979 	bl	80050e0 <_malloc_r>
 8004dee:	4604      	mov	r4, r0
 8004df0:	b140      	cbz	r0, 8004e04 <__sfmoreglue+0x28>
 8004df2:	2100      	movs	r1, #0
 8004df4:	e9c0 1600 	strd	r1, r6, [r0]
 8004df8:	300c      	adds	r0, #12
 8004dfa:	60a0      	str	r0, [r4, #8]
 8004dfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e00:	f7ff fe20 	bl	8004a44 <memset>
 8004e04:	4620      	mov	r0, r4
 8004e06:	bd70      	pop	{r4, r5, r6, pc}

08004e08 <__sfp_lock_acquire>:
 8004e08:	4801      	ldr	r0, [pc, #4]	; (8004e10 <__sfp_lock_acquire+0x8>)
 8004e0a:	f000 b8b3 	b.w	8004f74 <__retarget_lock_acquire_recursive>
 8004e0e:	bf00      	nop
 8004e10:	20000ba8 	.word	0x20000ba8

08004e14 <__sfp_lock_release>:
 8004e14:	4801      	ldr	r0, [pc, #4]	; (8004e1c <__sfp_lock_release+0x8>)
 8004e16:	f000 b8ae 	b.w	8004f76 <__retarget_lock_release_recursive>
 8004e1a:	bf00      	nop
 8004e1c:	20000ba8 	.word	0x20000ba8

08004e20 <__sinit_lock_acquire>:
 8004e20:	4801      	ldr	r0, [pc, #4]	; (8004e28 <__sinit_lock_acquire+0x8>)
 8004e22:	f000 b8a7 	b.w	8004f74 <__retarget_lock_acquire_recursive>
 8004e26:	bf00      	nop
 8004e28:	20000ba3 	.word	0x20000ba3

08004e2c <__sinit_lock_release>:
 8004e2c:	4801      	ldr	r0, [pc, #4]	; (8004e34 <__sinit_lock_release+0x8>)
 8004e2e:	f000 b8a2 	b.w	8004f76 <__retarget_lock_release_recursive>
 8004e32:	bf00      	nop
 8004e34:	20000ba3 	.word	0x20000ba3

08004e38 <__sinit>:
 8004e38:	b510      	push	{r4, lr}
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	f7ff fff0 	bl	8004e20 <__sinit_lock_acquire>
 8004e40:	69a3      	ldr	r3, [r4, #24]
 8004e42:	b11b      	cbz	r3, 8004e4c <__sinit+0x14>
 8004e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e48:	f7ff bff0 	b.w	8004e2c <__sinit_lock_release>
 8004e4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e50:	6523      	str	r3, [r4, #80]	; 0x50
 8004e52:	4b13      	ldr	r3, [pc, #76]	; (8004ea0 <__sinit+0x68>)
 8004e54:	4a13      	ldr	r2, [pc, #76]	; (8004ea4 <__sinit+0x6c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e5a:	42a3      	cmp	r3, r4
 8004e5c:	bf04      	itt	eq
 8004e5e:	2301      	moveq	r3, #1
 8004e60:	61a3      	streq	r3, [r4, #24]
 8004e62:	4620      	mov	r0, r4
 8004e64:	f000 f820 	bl	8004ea8 <__sfp>
 8004e68:	6060      	str	r0, [r4, #4]
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	f000 f81c 	bl	8004ea8 <__sfp>
 8004e70:	60a0      	str	r0, [r4, #8]
 8004e72:	4620      	mov	r0, r4
 8004e74:	f000 f818 	bl	8004ea8 <__sfp>
 8004e78:	2200      	movs	r2, #0
 8004e7a:	60e0      	str	r0, [r4, #12]
 8004e7c:	2104      	movs	r1, #4
 8004e7e:	6860      	ldr	r0, [r4, #4]
 8004e80:	f7ff ff82 	bl	8004d88 <std>
 8004e84:	68a0      	ldr	r0, [r4, #8]
 8004e86:	2201      	movs	r2, #1
 8004e88:	2109      	movs	r1, #9
 8004e8a:	f7ff ff7d 	bl	8004d88 <std>
 8004e8e:	68e0      	ldr	r0, [r4, #12]
 8004e90:	2202      	movs	r2, #2
 8004e92:	2112      	movs	r1, #18
 8004e94:	f7ff ff78 	bl	8004d88 <std>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	61a3      	str	r3, [r4, #24]
 8004e9c:	e7d2      	b.n	8004e44 <__sinit+0xc>
 8004e9e:	bf00      	nop
 8004ea0:	080059c4 	.word	0x080059c4
 8004ea4:	08004dd1 	.word	0x08004dd1

08004ea8 <__sfp>:
 8004ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eaa:	4607      	mov	r7, r0
 8004eac:	f7ff ffac 	bl	8004e08 <__sfp_lock_acquire>
 8004eb0:	4b1e      	ldr	r3, [pc, #120]	; (8004f2c <__sfp+0x84>)
 8004eb2:	681e      	ldr	r6, [r3, #0]
 8004eb4:	69b3      	ldr	r3, [r6, #24]
 8004eb6:	b913      	cbnz	r3, 8004ebe <__sfp+0x16>
 8004eb8:	4630      	mov	r0, r6
 8004eba:	f7ff ffbd 	bl	8004e38 <__sinit>
 8004ebe:	3648      	adds	r6, #72	; 0x48
 8004ec0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	d503      	bpl.n	8004ed0 <__sfp+0x28>
 8004ec8:	6833      	ldr	r3, [r6, #0]
 8004eca:	b30b      	cbz	r3, 8004f10 <__sfp+0x68>
 8004ecc:	6836      	ldr	r6, [r6, #0]
 8004ece:	e7f7      	b.n	8004ec0 <__sfp+0x18>
 8004ed0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ed4:	b9d5      	cbnz	r5, 8004f0c <__sfp+0x64>
 8004ed6:	4b16      	ldr	r3, [pc, #88]	; (8004f30 <__sfp+0x88>)
 8004ed8:	60e3      	str	r3, [r4, #12]
 8004eda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ede:	6665      	str	r5, [r4, #100]	; 0x64
 8004ee0:	f000 f847 	bl	8004f72 <__retarget_lock_init_recursive>
 8004ee4:	f7ff ff96 	bl	8004e14 <__sfp_lock_release>
 8004ee8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004eec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ef0:	6025      	str	r5, [r4, #0]
 8004ef2:	61a5      	str	r5, [r4, #24]
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004efc:	f7ff fda2 	bl	8004a44 <memset>
 8004f00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f08:	4620      	mov	r0, r4
 8004f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f0c:	3468      	adds	r4, #104	; 0x68
 8004f0e:	e7d9      	b.n	8004ec4 <__sfp+0x1c>
 8004f10:	2104      	movs	r1, #4
 8004f12:	4638      	mov	r0, r7
 8004f14:	f7ff ff62 	bl	8004ddc <__sfmoreglue>
 8004f18:	4604      	mov	r4, r0
 8004f1a:	6030      	str	r0, [r6, #0]
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	d1d5      	bne.n	8004ecc <__sfp+0x24>
 8004f20:	f7ff ff78 	bl	8004e14 <__sfp_lock_release>
 8004f24:	230c      	movs	r3, #12
 8004f26:	603b      	str	r3, [r7, #0]
 8004f28:	e7ee      	b.n	8004f08 <__sfp+0x60>
 8004f2a:	bf00      	nop
 8004f2c:	080059c4 	.word	0x080059c4
 8004f30:	ffff0001 	.word	0xffff0001

08004f34 <_fwalk_reent>:
 8004f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f38:	4606      	mov	r6, r0
 8004f3a:	4688      	mov	r8, r1
 8004f3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f40:	2700      	movs	r7, #0
 8004f42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f46:	f1b9 0901 	subs.w	r9, r9, #1
 8004f4a:	d505      	bpl.n	8004f58 <_fwalk_reent+0x24>
 8004f4c:	6824      	ldr	r4, [r4, #0]
 8004f4e:	2c00      	cmp	r4, #0
 8004f50:	d1f7      	bne.n	8004f42 <_fwalk_reent+0xe>
 8004f52:	4638      	mov	r0, r7
 8004f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f58:	89ab      	ldrh	r3, [r5, #12]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d907      	bls.n	8004f6e <_fwalk_reent+0x3a>
 8004f5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f62:	3301      	adds	r3, #1
 8004f64:	d003      	beq.n	8004f6e <_fwalk_reent+0x3a>
 8004f66:	4629      	mov	r1, r5
 8004f68:	4630      	mov	r0, r6
 8004f6a:	47c0      	blx	r8
 8004f6c:	4307      	orrs	r7, r0
 8004f6e:	3568      	adds	r5, #104	; 0x68
 8004f70:	e7e9      	b.n	8004f46 <_fwalk_reent+0x12>

08004f72 <__retarget_lock_init_recursive>:
 8004f72:	4770      	bx	lr

08004f74 <__retarget_lock_acquire_recursive>:
 8004f74:	4770      	bx	lr

08004f76 <__retarget_lock_release_recursive>:
 8004f76:	4770      	bx	lr

08004f78 <__swhatbuf_r>:
 8004f78:	b570      	push	{r4, r5, r6, lr}
 8004f7a:	460e      	mov	r6, r1
 8004f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f80:	2900      	cmp	r1, #0
 8004f82:	b096      	sub	sp, #88	; 0x58
 8004f84:	4614      	mov	r4, r2
 8004f86:	461d      	mov	r5, r3
 8004f88:	da07      	bge.n	8004f9a <__swhatbuf_r+0x22>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	602b      	str	r3, [r5, #0]
 8004f8e:	89b3      	ldrh	r3, [r6, #12]
 8004f90:	061a      	lsls	r2, r3, #24
 8004f92:	d410      	bmi.n	8004fb6 <__swhatbuf_r+0x3e>
 8004f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f98:	e00e      	b.n	8004fb8 <__swhatbuf_r+0x40>
 8004f9a:	466a      	mov	r2, sp
 8004f9c:	f000 fc5e 	bl	800585c <_fstat_r>
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	dbf2      	blt.n	8004f8a <__swhatbuf_r+0x12>
 8004fa4:	9a01      	ldr	r2, [sp, #4]
 8004fa6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004faa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fae:	425a      	negs	r2, r3
 8004fb0:	415a      	adcs	r2, r3
 8004fb2:	602a      	str	r2, [r5, #0]
 8004fb4:	e7ee      	b.n	8004f94 <__swhatbuf_r+0x1c>
 8004fb6:	2340      	movs	r3, #64	; 0x40
 8004fb8:	2000      	movs	r0, #0
 8004fba:	6023      	str	r3, [r4, #0]
 8004fbc:	b016      	add	sp, #88	; 0x58
 8004fbe:	bd70      	pop	{r4, r5, r6, pc}

08004fc0 <__smakebuf_r>:
 8004fc0:	898b      	ldrh	r3, [r1, #12]
 8004fc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fc4:	079d      	lsls	r5, r3, #30
 8004fc6:	4606      	mov	r6, r0
 8004fc8:	460c      	mov	r4, r1
 8004fca:	d507      	bpl.n	8004fdc <__smakebuf_r+0x1c>
 8004fcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	6123      	str	r3, [r4, #16]
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	6163      	str	r3, [r4, #20]
 8004fd8:	b002      	add	sp, #8
 8004fda:	bd70      	pop	{r4, r5, r6, pc}
 8004fdc:	ab01      	add	r3, sp, #4
 8004fde:	466a      	mov	r2, sp
 8004fe0:	f7ff ffca 	bl	8004f78 <__swhatbuf_r>
 8004fe4:	9900      	ldr	r1, [sp, #0]
 8004fe6:	4605      	mov	r5, r0
 8004fe8:	4630      	mov	r0, r6
 8004fea:	f000 f879 	bl	80050e0 <_malloc_r>
 8004fee:	b948      	cbnz	r0, 8005004 <__smakebuf_r+0x44>
 8004ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ff4:	059a      	lsls	r2, r3, #22
 8004ff6:	d4ef      	bmi.n	8004fd8 <__smakebuf_r+0x18>
 8004ff8:	f023 0303 	bic.w	r3, r3, #3
 8004ffc:	f043 0302 	orr.w	r3, r3, #2
 8005000:	81a3      	strh	r3, [r4, #12]
 8005002:	e7e3      	b.n	8004fcc <__smakebuf_r+0xc>
 8005004:	4b0d      	ldr	r3, [pc, #52]	; (800503c <__smakebuf_r+0x7c>)
 8005006:	62b3      	str	r3, [r6, #40]	; 0x28
 8005008:	89a3      	ldrh	r3, [r4, #12]
 800500a:	6020      	str	r0, [r4, #0]
 800500c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005010:	81a3      	strh	r3, [r4, #12]
 8005012:	9b00      	ldr	r3, [sp, #0]
 8005014:	6163      	str	r3, [r4, #20]
 8005016:	9b01      	ldr	r3, [sp, #4]
 8005018:	6120      	str	r0, [r4, #16]
 800501a:	b15b      	cbz	r3, 8005034 <__smakebuf_r+0x74>
 800501c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005020:	4630      	mov	r0, r6
 8005022:	f000 fc2d 	bl	8005880 <_isatty_r>
 8005026:	b128      	cbz	r0, 8005034 <__smakebuf_r+0x74>
 8005028:	89a3      	ldrh	r3, [r4, #12]
 800502a:	f023 0303 	bic.w	r3, r3, #3
 800502e:	f043 0301 	orr.w	r3, r3, #1
 8005032:	81a3      	strh	r3, [r4, #12]
 8005034:	89a0      	ldrh	r0, [r4, #12]
 8005036:	4305      	orrs	r5, r0
 8005038:	81a5      	strh	r5, [r4, #12]
 800503a:	e7cd      	b.n	8004fd8 <__smakebuf_r+0x18>
 800503c:	08004dd1 	.word	0x08004dd1

08005040 <_free_r>:
 8005040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005042:	2900      	cmp	r1, #0
 8005044:	d048      	beq.n	80050d8 <_free_r+0x98>
 8005046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800504a:	9001      	str	r0, [sp, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	f1a1 0404 	sub.w	r4, r1, #4
 8005052:	bfb8      	it	lt
 8005054:	18e4      	addlt	r4, r4, r3
 8005056:	f000 fc35 	bl	80058c4 <__malloc_lock>
 800505a:	4a20      	ldr	r2, [pc, #128]	; (80050dc <_free_r+0x9c>)
 800505c:	9801      	ldr	r0, [sp, #4]
 800505e:	6813      	ldr	r3, [r2, #0]
 8005060:	4615      	mov	r5, r2
 8005062:	b933      	cbnz	r3, 8005072 <_free_r+0x32>
 8005064:	6063      	str	r3, [r4, #4]
 8005066:	6014      	str	r4, [r2, #0]
 8005068:	b003      	add	sp, #12
 800506a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800506e:	f000 bc2f 	b.w	80058d0 <__malloc_unlock>
 8005072:	42a3      	cmp	r3, r4
 8005074:	d90b      	bls.n	800508e <_free_r+0x4e>
 8005076:	6821      	ldr	r1, [r4, #0]
 8005078:	1862      	adds	r2, r4, r1
 800507a:	4293      	cmp	r3, r2
 800507c:	bf04      	itt	eq
 800507e:	681a      	ldreq	r2, [r3, #0]
 8005080:	685b      	ldreq	r3, [r3, #4]
 8005082:	6063      	str	r3, [r4, #4]
 8005084:	bf04      	itt	eq
 8005086:	1852      	addeq	r2, r2, r1
 8005088:	6022      	streq	r2, [r4, #0]
 800508a:	602c      	str	r4, [r5, #0]
 800508c:	e7ec      	b.n	8005068 <_free_r+0x28>
 800508e:	461a      	mov	r2, r3
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	b10b      	cbz	r3, 8005098 <_free_r+0x58>
 8005094:	42a3      	cmp	r3, r4
 8005096:	d9fa      	bls.n	800508e <_free_r+0x4e>
 8005098:	6811      	ldr	r1, [r2, #0]
 800509a:	1855      	adds	r5, r2, r1
 800509c:	42a5      	cmp	r5, r4
 800509e:	d10b      	bne.n	80050b8 <_free_r+0x78>
 80050a0:	6824      	ldr	r4, [r4, #0]
 80050a2:	4421      	add	r1, r4
 80050a4:	1854      	adds	r4, r2, r1
 80050a6:	42a3      	cmp	r3, r4
 80050a8:	6011      	str	r1, [r2, #0]
 80050aa:	d1dd      	bne.n	8005068 <_free_r+0x28>
 80050ac:	681c      	ldr	r4, [r3, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	6053      	str	r3, [r2, #4]
 80050b2:	4421      	add	r1, r4
 80050b4:	6011      	str	r1, [r2, #0]
 80050b6:	e7d7      	b.n	8005068 <_free_r+0x28>
 80050b8:	d902      	bls.n	80050c0 <_free_r+0x80>
 80050ba:	230c      	movs	r3, #12
 80050bc:	6003      	str	r3, [r0, #0]
 80050be:	e7d3      	b.n	8005068 <_free_r+0x28>
 80050c0:	6825      	ldr	r5, [r4, #0]
 80050c2:	1961      	adds	r1, r4, r5
 80050c4:	428b      	cmp	r3, r1
 80050c6:	bf04      	itt	eq
 80050c8:	6819      	ldreq	r1, [r3, #0]
 80050ca:	685b      	ldreq	r3, [r3, #4]
 80050cc:	6063      	str	r3, [r4, #4]
 80050ce:	bf04      	itt	eq
 80050d0:	1949      	addeq	r1, r1, r5
 80050d2:	6021      	streq	r1, [r4, #0]
 80050d4:	6054      	str	r4, [r2, #4]
 80050d6:	e7c7      	b.n	8005068 <_free_r+0x28>
 80050d8:	b003      	add	sp, #12
 80050da:	bd30      	pop	{r4, r5, pc}
 80050dc:	20000094 	.word	0x20000094

080050e0 <_malloc_r>:
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e2:	1ccd      	adds	r5, r1, #3
 80050e4:	f025 0503 	bic.w	r5, r5, #3
 80050e8:	3508      	adds	r5, #8
 80050ea:	2d0c      	cmp	r5, #12
 80050ec:	bf38      	it	cc
 80050ee:	250c      	movcc	r5, #12
 80050f0:	2d00      	cmp	r5, #0
 80050f2:	4606      	mov	r6, r0
 80050f4:	db01      	blt.n	80050fa <_malloc_r+0x1a>
 80050f6:	42a9      	cmp	r1, r5
 80050f8:	d903      	bls.n	8005102 <_malloc_r+0x22>
 80050fa:	230c      	movs	r3, #12
 80050fc:	6033      	str	r3, [r6, #0]
 80050fe:	2000      	movs	r0, #0
 8005100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005102:	f000 fbdf 	bl	80058c4 <__malloc_lock>
 8005106:	4921      	ldr	r1, [pc, #132]	; (800518c <_malloc_r+0xac>)
 8005108:	680a      	ldr	r2, [r1, #0]
 800510a:	4614      	mov	r4, r2
 800510c:	b99c      	cbnz	r4, 8005136 <_malloc_r+0x56>
 800510e:	4f20      	ldr	r7, [pc, #128]	; (8005190 <_malloc_r+0xb0>)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	b923      	cbnz	r3, 800511e <_malloc_r+0x3e>
 8005114:	4621      	mov	r1, r4
 8005116:	4630      	mov	r0, r6
 8005118:	f000 fb2a 	bl	8005770 <_sbrk_r>
 800511c:	6038      	str	r0, [r7, #0]
 800511e:	4629      	mov	r1, r5
 8005120:	4630      	mov	r0, r6
 8005122:	f000 fb25 	bl	8005770 <_sbrk_r>
 8005126:	1c43      	adds	r3, r0, #1
 8005128:	d123      	bne.n	8005172 <_malloc_r+0x92>
 800512a:	230c      	movs	r3, #12
 800512c:	6033      	str	r3, [r6, #0]
 800512e:	4630      	mov	r0, r6
 8005130:	f000 fbce 	bl	80058d0 <__malloc_unlock>
 8005134:	e7e3      	b.n	80050fe <_malloc_r+0x1e>
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	1b5b      	subs	r3, r3, r5
 800513a:	d417      	bmi.n	800516c <_malloc_r+0x8c>
 800513c:	2b0b      	cmp	r3, #11
 800513e:	d903      	bls.n	8005148 <_malloc_r+0x68>
 8005140:	6023      	str	r3, [r4, #0]
 8005142:	441c      	add	r4, r3
 8005144:	6025      	str	r5, [r4, #0]
 8005146:	e004      	b.n	8005152 <_malloc_r+0x72>
 8005148:	6863      	ldr	r3, [r4, #4]
 800514a:	42a2      	cmp	r2, r4
 800514c:	bf0c      	ite	eq
 800514e:	600b      	streq	r3, [r1, #0]
 8005150:	6053      	strne	r3, [r2, #4]
 8005152:	4630      	mov	r0, r6
 8005154:	f000 fbbc 	bl	80058d0 <__malloc_unlock>
 8005158:	f104 000b 	add.w	r0, r4, #11
 800515c:	1d23      	adds	r3, r4, #4
 800515e:	f020 0007 	bic.w	r0, r0, #7
 8005162:	1ac2      	subs	r2, r0, r3
 8005164:	d0cc      	beq.n	8005100 <_malloc_r+0x20>
 8005166:	1a1b      	subs	r3, r3, r0
 8005168:	50a3      	str	r3, [r4, r2]
 800516a:	e7c9      	b.n	8005100 <_malloc_r+0x20>
 800516c:	4622      	mov	r2, r4
 800516e:	6864      	ldr	r4, [r4, #4]
 8005170:	e7cc      	b.n	800510c <_malloc_r+0x2c>
 8005172:	1cc4      	adds	r4, r0, #3
 8005174:	f024 0403 	bic.w	r4, r4, #3
 8005178:	42a0      	cmp	r0, r4
 800517a:	d0e3      	beq.n	8005144 <_malloc_r+0x64>
 800517c:	1a21      	subs	r1, r4, r0
 800517e:	4630      	mov	r0, r6
 8005180:	f000 faf6 	bl	8005770 <_sbrk_r>
 8005184:	3001      	adds	r0, #1
 8005186:	d1dd      	bne.n	8005144 <_malloc_r+0x64>
 8005188:	e7cf      	b.n	800512a <_malloc_r+0x4a>
 800518a:	bf00      	nop
 800518c:	20000094 	.word	0x20000094
 8005190:	20000098 	.word	0x20000098

08005194 <__sfputc_r>:
 8005194:	6893      	ldr	r3, [r2, #8]
 8005196:	3b01      	subs	r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	b410      	push	{r4}
 800519c:	6093      	str	r3, [r2, #8]
 800519e:	da08      	bge.n	80051b2 <__sfputc_r+0x1e>
 80051a0:	6994      	ldr	r4, [r2, #24]
 80051a2:	42a3      	cmp	r3, r4
 80051a4:	db01      	blt.n	80051aa <__sfputc_r+0x16>
 80051a6:	290a      	cmp	r1, #10
 80051a8:	d103      	bne.n	80051b2 <__sfputc_r+0x1e>
 80051aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051ae:	f7ff bc69 	b.w	8004a84 <__swbuf_r>
 80051b2:	6813      	ldr	r3, [r2, #0]
 80051b4:	1c58      	adds	r0, r3, #1
 80051b6:	6010      	str	r0, [r2, #0]
 80051b8:	7019      	strb	r1, [r3, #0]
 80051ba:	4608      	mov	r0, r1
 80051bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <__sfputs_r>:
 80051c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c4:	4606      	mov	r6, r0
 80051c6:	460f      	mov	r7, r1
 80051c8:	4614      	mov	r4, r2
 80051ca:	18d5      	adds	r5, r2, r3
 80051cc:	42ac      	cmp	r4, r5
 80051ce:	d101      	bne.n	80051d4 <__sfputs_r+0x12>
 80051d0:	2000      	movs	r0, #0
 80051d2:	e007      	b.n	80051e4 <__sfputs_r+0x22>
 80051d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051d8:	463a      	mov	r2, r7
 80051da:	4630      	mov	r0, r6
 80051dc:	f7ff ffda 	bl	8005194 <__sfputc_r>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	d1f3      	bne.n	80051cc <__sfputs_r+0xa>
 80051e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051e8 <_vfiprintf_r>:
 80051e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ec:	460d      	mov	r5, r1
 80051ee:	b09d      	sub	sp, #116	; 0x74
 80051f0:	4614      	mov	r4, r2
 80051f2:	4698      	mov	r8, r3
 80051f4:	4606      	mov	r6, r0
 80051f6:	b118      	cbz	r0, 8005200 <_vfiprintf_r+0x18>
 80051f8:	6983      	ldr	r3, [r0, #24]
 80051fa:	b90b      	cbnz	r3, 8005200 <_vfiprintf_r+0x18>
 80051fc:	f7ff fe1c 	bl	8004e38 <__sinit>
 8005200:	4b89      	ldr	r3, [pc, #548]	; (8005428 <_vfiprintf_r+0x240>)
 8005202:	429d      	cmp	r5, r3
 8005204:	d11b      	bne.n	800523e <_vfiprintf_r+0x56>
 8005206:	6875      	ldr	r5, [r6, #4]
 8005208:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800520a:	07d9      	lsls	r1, r3, #31
 800520c:	d405      	bmi.n	800521a <_vfiprintf_r+0x32>
 800520e:	89ab      	ldrh	r3, [r5, #12]
 8005210:	059a      	lsls	r2, r3, #22
 8005212:	d402      	bmi.n	800521a <_vfiprintf_r+0x32>
 8005214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005216:	f7ff fead 	bl	8004f74 <__retarget_lock_acquire_recursive>
 800521a:	89ab      	ldrh	r3, [r5, #12]
 800521c:	071b      	lsls	r3, r3, #28
 800521e:	d501      	bpl.n	8005224 <_vfiprintf_r+0x3c>
 8005220:	692b      	ldr	r3, [r5, #16]
 8005222:	b9eb      	cbnz	r3, 8005260 <_vfiprintf_r+0x78>
 8005224:	4629      	mov	r1, r5
 8005226:	4630      	mov	r0, r6
 8005228:	f7ff fc7e 	bl	8004b28 <__swsetup_r>
 800522c:	b1c0      	cbz	r0, 8005260 <_vfiprintf_r+0x78>
 800522e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005230:	07dc      	lsls	r4, r3, #31
 8005232:	d50e      	bpl.n	8005252 <_vfiprintf_r+0x6a>
 8005234:	f04f 30ff 	mov.w	r0, #4294967295
 8005238:	b01d      	add	sp, #116	; 0x74
 800523a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800523e:	4b7b      	ldr	r3, [pc, #492]	; (800542c <_vfiprintf_r+0x244>)
 8005240:	429d      	cmp	r5, r3
 8005242:	d101      	bne.n	8005248 <_vfiprintf_r+0x60>
 8005244:	68b5      	ldr	r5, [r6, #8]
 8005246:	e7df      	b.n	8005208 <_vfiprintf_r+0x20>
 8005248:	4b79      	ldr	r3, [pc, #484]	; (8005430 <_vfiprintf_r+0x248>)
 800524a:	429d      	cmp	r5, r3
 800524c:	bf08      	it	eq
 800524e:	68f5      	ldreq	r5, [r6, #12]
 8005250:	e7da      	b.n	8005208 <_vfiprintf_r+0x20>
 8005252:	89ab      	ldrh	r3, [r5, #12]
 8005254:	0598      	lsls	r0, r3, #22
 8005256:	d4ed      	bmi.n	8005234 <_vfiprintf_r+0x4c>
 8005258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800525a:	f7ff fe8c 	bl	8004f76 <__retarget_lock_release_recursive>
 800525e:	e7e9      	b.n	8005234 <_vfiprintf_r+0x4c>
 8005260:	2300      	movs	r3, #0
 8005262:	9309      	str	r3, [sp, #36]	; 0x24
 8005264:	2320      	movs	r3, #32
 8005266:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800526a:	f8cd 800c 	str.w	r8, [sp, #12]
 800526e:	2330      	movs	r3, #48	; 0x30
 8005270:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005434 <_vfiprintf_r+0x24c>
 8005274:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005278:	f04f 0901 	mov.w	r9, #1
 800527c:	4623      	mov	r3, r4
 800527e:	469a      	mov	sl, r3
 8005280:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005284:	b10a      	cbz	r2, 800528a <_vfiprintf_r+0xa2>
 8005286:	2a25      	cmp	r2, #37	; 0x25
 8005288:	d1f9      	bne.n	800527e <_vfiprintf_r+0x96>
 800528a:	ebba 0b04 	subs.w	fp, sl, r4
 800528e:	d00b      	beq.n	80052a8 <_vfiprintf_r+0xc0>
 8005290:	465b      	mov	r3, fp
 8005292:	4622      	mov	r2, r4
 8005294:	4629      	mov	r1, r5
 8005296:	4630      	mov	r0, r6
 8005298:	f7ff ff93 	bl	80051c2 <__sfputs_r>
 800529c:	3001      	adds	r0, #1
 800529e:	f000 80aa 	beq.w	80053f6 <_vfiprintf_r+0x20e>
 80052a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052a4:	445a      	add	r2, fp
 80052a6:	9209      	str	r2, [sp, #36]	; 0x24
 80052a8:	f89a 3000 	ldrb.w	r3, [sl]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 80a2 	beq.w	80053f6 <_vfiprintf_r+0x20e>
 80052b2:	2300      	movs	r3, #0
 80052b4:	f04f 32ff 	mov.w	r2, #4294967295
 80052b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052bc:	f10a 0a01 	add.w	sl, sl, #1
 80052c0:	9304      	str	r3, [sp, #16]
 80052c2:	9307      	str	r3, [sp, #28]
 80052c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052c8:	931a      	str	r3, [sp, #104]	; 0x68
 80052ca:	4654      	mov	r4, sl
 80052cc:	2205      	movs	r2, #5
 80052ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052d2:	4858      	ldr	r0, [pc, #352]	; (8005434 <_vfiprintf_r+0x24c>)
 80052d4:	f7fa ff7c 	bl	80001d0 <memchr>
 80052d8:	9a04      	ldr	r2, [sp, #16]
 80052da:	b9d8      	cbnz	r0, 8005314 <_vfiprintf_r+0x12c>
 80052dc:	06d1      	lsls	r1, r2, #27
 80052de:	bf44      	itt	mi
 80052e0:	2320      	movmi	r3, #32
 80052e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052e6:	0713      	lsls	r3, r2, #28
 80052e8:	bf44      	itt	mi
 80052ea:	232b      	movmi	r3, #43	; 0x2b
 80052ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052f0:	f89a 3000 	ldrb.w	r3, [sl]
 80052f4:	2b2a      	cmp	r3, #42	; 0x2a
 80052f6:	d015      	beq.n	8005324 <_vfiprintf_r+0x13c>
 80052f8:	9a07      	ldr	r2, [sp, #28]
 80052fa:	4654      	mov	r4, sl
 80052fc:	2000      	movs	r0, #0
 80052fe:	f04f 0c0a 	mov.w	ip, #10
 8005302:	4621      	mov	r1, r4
 8005304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005308:	3b30      	subs	r3, #48	; 0x30
 800530a:	2b09      	cmp	r3, #9
 800530c:	d94e      	bls.n	80053ac <_vfiprintf_r+0x1c4>
 800530e:	b1b0      	cbz	r0, 800533e <_vfiprintf_r+0x156>
 8005310:	9207      	str	r2, [sp, #28]
 8005312:	e014      	b.n	800533e <_vfiprintf_r+0x156>
 8005314:	eba0 0308 	sub.w	r3, r0, r8
 8005318:	fa09 f303 	lsl.w	r3, r9, r3
 800531c:	4313      	orrs	r3, r2
 800531e:	9304      	str	r3, [sp, #16]
 8005320:	46a2      	mov	sl, r4
 8005322:	e7d2      	b.n	80052ca <_vfiprintf_r+0xe2>
 8005324:	9b03      	ldr	r3, [sp, #12]
 8005326:	1d19      	adds	r1, r3, #4
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	9103      	str	r1, [sp, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	bfbb      	ittet	lt
 8005330:	425b      	neglt	r3, r3
 8005332:	f042 0202 	orrlt.w	r2, r2, #2
 8005336:	9307      	strge	r3, [sp, #28]
 8005338:	9307      	strlt	r3, [sp, #28]
 800533a:	bfb8      	it	lt
 800533c:	9204      	strlt	r2, [sp, #16]
 800533e:	7823      	ldrb	r3, [r4, #0]
 8005340:	2b2e      	cmp	r3, #46	; 0x2e
 8005342:	d10c      	bne.n	800535e <_vfiprintf_r+0x176>
 8005344:	7863      	ldrb	r3, [r4, #1]
 8005346:	2b2a      	cmp	r3, #42	; 0x2a
 8005348:	d135      	bne.n	80053b6 <_vfiprintf_r+0x1ce>
 800534a:	9b03      	ldr	r3, [sp, #12]
 800534c:	1d1a      	adds	r2, r3, #4
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	9203      	str	r2, [sp, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	bfb8      	it	lt
 8005356:	f04f 33ff 	movlt.w	r3, #4294967295
 800535a:	3402      	adds	r4, #2
 800535c:	9305      	str	r3, [sp, #20]
 800535e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005444 <_vfiprintf_r+0x25c>
 8005362:	7821      	ldrb	r1, [r4, #0]
 8005364:	2203      	movs	r2, #3
 8005366:	4650      	mov	r0, sl
 8005368:	f7fa ff32 	bl	80001d0 <memchr>
 800536c:	b140      	cbz	r0, 8005380 <_vfiprintf_r+0x198>
 800536e:	2340      	movs	r3, #64	; 0x40
 8005370:	eba0 000a 	sub.w	r0, r0, sl
 8005374:	fa03 f000 	lsl.w	r0, r3, r0
 8005378:	9b04      	ldr	r3, [sp, #16]
 800537a:	4303      	orrs	r3, r0
 800537c:	3401      	adds	r4, #1
 800537e:	9304      	str	r3, [sp, #16]
 8005380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005384:	482c      	ldr	r0, [pc, #176]	; (8005438 <_vfiprintf_r+0x250>)
 8005386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800538a:	2206      	movs	r2, #6
 800538c:	f7fa ff20 	bl	80001d0 <memchr>
 8005390:	2800      	cmp	r0, #0
 8005392:	d03f      	beq.n	8005414 <_vfiprintf_r+0x22c>
 8005394:	4b29      	ldr	r3, [pc, #164]	; (800543c <_vfiprintf_r+0x254>)
 8005396:	bb1b      	cbnz	r3, 80053e0 <_vfiprintf_r+0x1f8>
 8005398:	9b03      	ldr	r3, [sp, #12]
 800539a:	3307      	adds	r3, #7
 800539c:	f023 0307 	bic.w	r3, r3, #7
 80053a0:	3308      	adds	r3, #8
 80053a2:	9303      	str	r3, [sp, #12]
 80053a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a6:	443b      	add	r3, r7
 80053a8:	9309      	str	r3, [sp, #36]	; 0x24
 80053aa:	e767      	b.n	800527c <_vfiprintf_r+0x94>
 80053ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80053b0:	460c      	mov	r4, r1
 80053b2:	2001      	movs	r0, #1
 80053b4:	e7a5      	b.n	8005302 <_vfiprintf_r+0x11a>
 80053b6:	2300      	movs	r3, #0
 80053b8:	3401      	adds	r4, #1
 80053ba:	9305      	str	r3, [sp, #20]
 80053bc:	4619      	mov	r1, r3
 80053be:	f04f 0c0a 	mov.w	ip, #10
 80053c2:	4620      	mov	r0, r4
 80053c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053c8:	3a30      	subs	r2, #48	; 0x30
 80053ca:	2a09      	cmp	r2, #9
 80053cc:	d903      	bls.n	80053d6 <_vfiprintf_r+0x1ee>
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0c5      	beq.n	800535e <_vfiprintf_r+0x176>
 80053d2:	9105      	str	r1, [sp, #20]
 80053d4:	e7c3      	b.n	800535e <_vfiprintf_r+0x176>
 80053d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80053da:	4604      	mov	r4, r0
 80053dc:	2301      	movs	r3, #1
 80053de:	e7f0      	b.n	80053c2 <_vfiprintf_r+0x1da>
 80053e0:	ab03      	add	r3, sp, #12
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	462a      	mov	r2, r5
 80053e6:	4b16      	ldr	r3, [pc, #88]	; (8005440 <_vfiprintf_r+0x258>)
 80053e8:	a904      	add	r1, sp, #16
 80053ea:	4630      	mov	r0, r6
 80053ec:	f3af 8000 	nop.w
 80053f0:	4607      	mov	r7, r0
 80053f2:	1c78      	adds	r0, r7, #1
 80053f4:	d1d6      	bne.n	80053a4 <_vfiprintf_r+0x1bc>
 80053f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053f8:	07d9      	lsls	r1, r3, #31
 80053fa:	d405      	bmi.n	8005408 <_vfiprintf_r+0x220>
 80053fc:	89ab      	ldrh	r3, [r5, #12]
 80053fe:	059a      	lsls	r2, r3, #22
 8005400:	d402      	bmi.n	8005408 <_vfiprintf_r+0x220>
 8005402:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005404:	f7ff fdb7 	bl	8004f76 <__retarget_lock_release_recursive>
 8005408:	89ab      	ldrh	r3, [r5, #12]
 800540a:	065b      	lsls	r3, r3, #25
 800540c:	f53f af12 	bmi.w	8005234 <_vfiprintf_r+0x4c>
 8005410:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005412:	e711      	b.n	8005238 <_vfiprintf_r+0x50>
 8005414:	ab03      	add	r3, sp, #12
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	462a      	mov	r2, r5
 800541a:	4b09      	ldr	r3, [pc, #36]	; (8005440 <_vfiprintf_r+0x258>)
 800541c:	a904      	add	r1, sp, #16
 800541e:	4630      	mov	r0, r6
 8005420:	f000 f880 	bl	8005524 <_printf_i>
 8005424:	e7e4      	b.n	80053f0 <_vfiprintf_r+0x208>
 8005426:	bf00      	nop
 8005428:	080059e8 	.word	0x080059e8
 800542c:	08005a08 	.word	0x08005a08
 8005430:	080059c8 	.word	0x080059c8
 8005434:	08005a28 	.word	0x08005a28
 8005438:	08005a32 	.word	0x08005a32
 800543c:	00000000 	.word	0x00000000
 8005440:	080051c3 	.word	0x080051c3
 8005444:	08005a2e 	.word	0x08005a2e

08005448 <_printf_common>:
 8005448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800544c:	4616      	mov	r6, r2
 800544e:	4699      	mov	r9, r3
 8005450:	688a      	ldr	r2, [r1, #8]
 8005452:	690b      	ldr	r3, [r1, #16]
 8005454:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005458:	4293      	cmp	r3, r2
 800545a:	bfb8      	it	lt
 800545c:	4613      	movlt	r3, r2
 800545e:	6033      	str	r3, [r6, #0]
 8005460:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005464:	4607      	mov	r7, r0
 8005466:	460c      	mov	r4, r1
 8005468:	b10a      	cbz	r2, 800546e <_printf_common+0x26>
 800546a:	3301      	adds	r3, #1
 800546c:	6033      	str	r3, [r6, #0]
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	0699      	lsls	r1, r3, #26
 8005472:	bf42      	ittt	mi
 8005474:	6833      	ldrmi	r3, [r6, #0]
 8005476:	3302      	addmi	r3, #2
 8005478:	6033      	strmi	r3, [r6, #0]
 800547a:	6825      	ldr	r5, [r4, #0]
 800547c:	f015 0506 	ands.w	r5, r5, #6
 8005480:	d106      	bne.n	8005490 <_printf_common+0x48>
 8005482:	f104 0a19 	add.w	sl, r4, #25
 8005486:	68e3      	ldr	r3, [r4, #12]
 8005488:	6832      	ldr	r2, [r6, #0]
 800548a:	1a9b      	subs	r3, r3, r2
 800548c:	42ab      	cmp	r3, r5
 800548e:	dc26      	bgt.n	80054de <_printf_common+0x96>
 8005490:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005494:	1e13      	subs	r3, r2, #0
 8005496:	6822      	ldr	r2, [r4, #0]
 8005498:	bf18      	it	ne
 800549a:	2301      	movne	r3, #1
 800549c:	0692      	lsls	r2, r2, #26
 800549e:	d42b      	bmi.n	80054f8 <_printf_common+0xb0>
 80054a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054a4:	4649      	mov	r1, r9
 80054a6:	4638      	mov	r0, r7
 80054a8:	47c0      	blx	r8
 80054aa:	3001      	adds	r0, #1
 80054ac:	d01e      	beq.n	80054ec <_printf_common+0xa4>
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	68e5      	ldr	r5, [r4, #12]
 80054b2:	6832      	ldr	r2, [r6, #0]
 80054b4:	f003 0306 	and.w	r3, r3, #6
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	bf08      	it	eq
 80054bc:	1aad      	subeq	r5, r5, r2
 80054be:	68a3      	ldr	r3, [r4, #8]
 80054c0:	6922      	ldr	r2, [r4, #16]
 80054c2:	bf0c      	ite	eq
 80054c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054c8:	2500      	movne	r5, #0
 80054ca:	4293      	cmp	r3, r2
 80054cc:	bfc4      	itt	gt
 80054ce:	1a9b      	subgt	r3, r3, r2
 80054d0:	18ed      	addgt	r5, r5, r3
 80054d2:	2600      	movs	r6, #0
 80054d4:	341a      	adds	r4, #26
 80054d6:	42b5      	cmp	r5, r6
 80054d8:	d11a      	bne.n	8005510 <_printf_common+0xc8>
 80054da:	2000      	movs	r0, #0
 80054dc:	e008      	b.n	80054f0 <_printf_common+0xa8>
 80054de:	2301      	movs	r3, #1
 80054e0:	4652      	mov	r2, sl
 80054e2:	4649      	mov	r1, r9
 80054e4:	4638      	mov	r0, r7
 80054e6:	47c0      	blx	r8
 80054e8:	3001      	adds	r0, #1
 80054ea:	d103      	bne.n	80054f4 <_printf_common+0xac>
 80054ec:	f04f 30ff 	mov.w	r0, #4294967295
 80054f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f4:	3501      	adds	r5, #1
 80054f6:	e7c6      	b.n	8005486 <_printf_common+0x3e>
 80054f8:	18e1      	adds	r1, r4, r3
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	2030      	movs	r0, #48	; 0x30
 80054fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005502:	4422      	add	r2, r4
 8005504:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005508:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800550c:	3302      	adds	r3, #2
 800550e:	e7c7      	b.n	80054a0 <_printf_common+0x58>
 8005510:	2301      	movs	r3, #1
 8005512:	4622      	mov	r2, r4
 8005514:	4649      	mov	r1, r9
 8005516:	4638      	mov	r0, r7
 8005518:	47c0      	blx	r8
 800551a:	3001      	adds	r0, #1
 800551c:	d0e6      	beq.n	80054ec <_printf_common+0xa4>
 800551e:	3601      	adds	r6, #1
 8005520:	e7d9      	b.n	80054d6 <_printf_common+0x8e>
	...

08005524 <_printf_i>:
 8005524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005528:	460c      	mov	r4, r1
 800552a:	4691      	mov	r9, r2
 800552c:	7e27      	ldrb	r7, [r4, #24]
 800552e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005530:	2f78      	cmp	r7, #120	; 0x78
 8005532:	4680      	mov	r8, r0
 8005534:	469a      	mov	sl, r3
 8005536:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800553a:	d807      	bhi.n	800554c <_printf_i+0x28>
 800553c:	2f62      	cmp	r7, #98	; 0x62
 800553e:	d80a      	bhi.n	8005556 <_printf_i+0x32>
 8005540:	2f00      	cmp	r7, #0
 8005542:	f000 80d8 	beq.w	80056f6 <_printf_i+0x1d2>
 8005546:	2f58      	cmp	r7, #88	; 0x58
 8005548:	f000 80a3 	beq.w	8005692 <_printf_i+0x16e>
 800554c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005550:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005554:	e03a      	b.n	80055cc <_printf_i+0xa8>
 8005556:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800555a:	2b15      	cmp	r3, #21
 800555c:	d8f6      	bhi.n	800554c <_printf_i+0x28>
 800555e:	a001      	add	r0, pc, #4	; (adr r0, 8005564 <_printf_i+0x40>)
 8005560:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005564:	080055bd 	.word	0x080055bd
 8005568:	080055d1 	.word	0x080055d1
 800556c:	0800554d 	.word	0x0800554d
 8005570:	0800554d 	.word	0x0800554d
 8005574:	0800554d 	.word	0x0800554d
 8005578:	0800554d 	.word	0x0800554d
 800557c:	080055d1 	.word	0x080055d1
 8005580:	0800554d 	.word	0x0800554d
 8005584:	0800554d 	.word	0x0800554d
 8005588:	0800554d 	.word	0x0800554d
 800558c:	0800554d 	.word	0x0800554d
 8005590:	080056dd 	.word	0x080056dd
 8005594:	08005601 	.word	0x08005601
 8005598:	080056bf 	.word	0x080056bf
 800559c:	0800554d 	.word	0x0800554d
 80055a0:	0800554d 	.word	0x0800554d
 80055a4:	080056ff 	.word	0x080056ff
 80055a8:	0800554d 	.word	0x0800554d
 80055ac:	08005601 	.word	0x08005601
 80055b0:	0800554d 	.word	0x0800554d
 80055b4:	0800554d 	.word	0x0800554d
 80055b8:	080056c7 	.word	0x080056c7
 80055bc:	680b      	ldr	r3, [r1, #0]
 80055be:	1d1a      	adds	r2, r3, #4
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	600a      	str	r2, [r1, #0]
 80055c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055cc:	2301      	movs	r3, #1
 80055ce:	e0a3      	b.n	8005718 <_printf_i+0x1f4>
 80055d0:	6825      	ldr	r5, [r4, #0]
 80055d2:	6808      	ldr	r0, [r1, #0]
 80055d4:	062e      	lsls	r6, r5, #24
 80055d6:	f100 0304 	add.w	r3, r0, #4
 80055da:	d50a      	bpl.n	80055f2 <_printf_i+0xce>
 80055dc:	6805      	ldr	r5, [r0, #0]
 80055de:	600b      	str	r3, [r1, #0]
 80055e0:	2d00      	cmp	r5, #0
 80055e2:	da03      	bge.n	80055ec <_printf_i+0xc8>
 80055e4:	232d      	movs	r3, #45	; 0x2d
 80055e6:	426d      	negs	r5, r5
 80055e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055ec:	485e      	ldr	r0, [pc, #376]	; (8005768 <_printf_i+0x244>)
 80055ee:	230a      	movs	r3, #10
 80055f0:	e019      	b.n	8005626 <_printf_i+0x102>
 80055f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80055f6:	6805      	ldr	r5, [r0, #0]
 80055f8:	600b      	str	r3, [r1, #0]
 80055fa:	bf18      	it	ne
 80055fc:	b22d      	sxthne	r5, r5
 80055fe:	e7ef      	b.n	80055e0 <_printf_i+0xbc>
 8005600:	680b      	ldr	r3, [r1, #0]
 8005602:	6825      	ldr	r5, [r4, #0]
 8005604:	1d18      	adds	r0, r3, #4
 8005606:	6008      	str	r0, [r1, #0]
 8005608:	0628      	lsls	r0, r5, #24
 800560a:	d501      	bpl.n	8005610 <_printf_i+0xec>
 800560c:	681d      	ldr	r5, [r3, #0]
 800560e:	e002      	b.n	8005616 <_printf_i+0xf2>
 8005610:	0669      	lsls	r1, r5, #25
 8005612:	d5fb      	bpl.n	800560c <_printf_i+0xe8>
 8005614:	881d      	ldrh	r5, [r3, #0]
 8005616:	4854      	ldr	r0, [pc, #336]	; (8005768 <_printf_i+0x244>)
 8005618:	2f6f      	cmp	r7, #111	; 0x6f
 800561a:	bf0c      	ite	eq
 800561c:	2308      	moveq	r3, #8
 800561e:	230a      	movne	r3, #10
 8005620:	2100      	movs	r1, #0
 8005622:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005626:	6866      	ldr	r6, [r4, #4]
 8005628:	60a6      	str	r6, [r4, #8]
 800562a:	2e00      	cmp	r6, #0
 800562c:	bfa2      	ittt	ge
 800562e:	6821      	ldrge	r1, [r4, #0]
 8005630:	f021 0104 	bicge.w	r1, r1, #4
 8005634:	6021      	strge	r1, [r4, #0]
 8005636:	b90d      	cbnz	r5, 800563c <_printf_i+0x118>
 8005638:	2e00      	cmp	r6, #0
 800563a:	d04d      	beq.n	80056d8 <_printf_i+0x1b4>
 800563c:	4616      	mov	r6, r2
 800563e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005642:	fb03 5711 	mls	r7, r3, r1, r5
 8005646:	5dc7      	ldrb	r7, [r0, r7]
 8005648:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800564c:	462f      	mov	r7, r5
 800564e:	42bb      	cmp	r3, r7
 8005650:	460d      	mov	r5, r1
 8005652:	d9f4      	bls.n	800563e <_printf_i+0x11a>
 8005654:	2b08      	cmp	r3, #8
 8005656:	d10b      	bne.n	8005670 <_printf_i+0x14c>
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	07df      	lsls	r7, r3, #31
 800565c:	d508      	bpl.n	8005670 <_printf_i+0x14c>
 800565e:	6923      	ldr	r3, [r4, #16]
 8005660:	6861      	ldr	r1, [r4, #4]
 8005662:	4299      	cmp	r1, r3
 8005664:	bfde      	ittt	le
 8005666:	2330      	movle	r3, #48	; 0x30
 8005668:	f806 3c01 	strble.w	r3, [r6, #-1]
 800566c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005670:	1b92      	subs	r2, r2, r6
 8005672:	6122      	str	r2, [r4, #16]
 8005674:	f8cd a000 	str.w	sl, [sp]
 8005678:	464b      	mov	r3, r9
 800567a:	aa03      	add	r2, sp, #12
 800567c:	4621      	mov	r1, r4
 800567e:	4640      	mov	r0, r8
 8005680:	f7ff fee2 	bl	8005448 <_printf_common>
 8005684:	3001      	adds	r0, #1
 8005686:	d14c      	bne.n	8005722 <_printf_i+0x1fe>
 8005688:	f04f 30ff 	mov.w	r0, #4294967295
 800568c:	b004      	add	sp, #16
 800568e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005692:	4835      	ldr	r0, [pc, #212]	; (8005768 <_printf_i+0x244>)
 8005694:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	680e      	ldr	r6, [r1, #0]
 800569c:	061f      	lsls	r7, r3, #24
 800569e:	f856 5b04 	ldr.w	r5, [r6], #4
 80056a2:	600e      	str	r6, [r1, #0]
 80056a4:	d514      	bpl.n	80056d0 <_printf_i+0x1ac>
 80056a6:	07d9      	lsls	r1, r3, #31
 80056a8:	bf44      	itt	mi
 80056aa:	f043 0320 	orrmi.w	r3, r3, #32
 80056ae:	6023      	strmi	r3, [r4, #0]
 80056b0:	b91d      	cbnz	r5, 80056ba <_printf_i+0x196>
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	f023 0320 	bic.w	r3, r3, #32
 80056b8:	6023      	str	r3, [r4, #0]
 80056ba:	2310      	movs	r3, #16
 80056bc:	e7b0      	b.n	8005620 <_printf_i+0xfc>
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	f043 0320 	orr.w	r3, r3, #32
 80056c4:	6023      	str	r3, [r4, #0]
 80056c6:	2378      	movs	r3, #120	; 0x78
 80056c8:	4828      	ldr	r0, [pc, #160]	; (800576c <_printf_i+0x248>)
 80056ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056ce:	e7e3      	b.n	8005698 <_printf_i+0x174>
 80056d0:	065e      	lsls	r6, r3, #25
 80056d2:	bf48      	it	mi
 80056d4:	b2ad      	uxthmi	r5, r5
 80056d6:	e7e6      	b.n	80056a6 <_printf_i+0x182>
 80056d8:	4616      	mov	r6, r2
 80056da:	e7bb      	b.n	8005654 <_printf_i+0x130>
 80056dc:	680b      	ldr	r3, [r1, #0]
 80056de:	6826      	ldr	r6, [r4, #0]
 80056e0:	6960      	ldr	r0, [r4, #20]
 80056e2:	1d1d      	adds	r5, r3, #4
 80056e4:	600d      	str	r5, [r1, #0]
 80056e6:	0635      	lsls	r5, r6, #24
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	d501      	bpl.n	80056f0 <_printf_i+0x1cc>
 80056ec:	6018      	str	r0, [r3, #0]
 80056ee:	e002      	b.n	80056f6 <_printf_i+0x1d2>
 80056f0:	0671      	lsls	r1, r6, #25
 80056f2:	d5fb      	bpl.n	80056ec <_printf_i+0x1c8>
 80056f4:	8018      	strh	r0, [r3, #0]
 80056f6:	2300      	movs	r3, #0
 80056f8:	6123      	str	r3, [r4, #16]
 80056fa:	4616      	mov	r6, r2
 80056fc:	e7ba      	b.n	8005674 <_printf_i+0x150>
 80056fe:	680b      	ldr	r3, [r1, #0]
 8005700:	1d1a      	adds	r2, r3, #4
 8005702:	600a      	str	r2, [r1, #0]
 8005704:	681e      	ldr	r6, [r3, #0]
 8005706:	6862      	ldr	r2, [r4, #4]
 8005708:	2100      	movs	r1, #0
 800570a:	4630      	mov	r0, r6
 800570c:	f7fa fd60 	bl	80001d0 <memchr>
 8005710:	b108      	cbz	r0, 8005716 <_printf_i+0x1f2>
 8005712:	1b80      	subs	r0, r0, r6
 8005714:	6060      	str	r0, [r4, #4]
 8005716:	6863      	ldr	r3, [r4, #4]
 8005718:	6123      	str	r3, [r4, #16]
 800571a:	2300      	movs	r3, #0
 800571c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005720:	e7a8      	b.n	8005674 <_printf_i+0x150>
 8005722:	6923      	ldr	r3, [r4, #16]
 8005724:	4632      	mov	r2, r6
 8005726:	4649      	mov	r1, r9
 8005728:	4640      	mov	r0, r8
 800572a:	47d0      	blx	sl
 800572c:	3001      	adds	r0, #1
 800572e:	d0ab      	beq.n	8005688 <_printf_i+0x164>
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	079b      	lsls	r3, r3, #30
 8005734:	d413      	bmi.n	800575e <_printf_i+0x23a>
 8005736:	68e0      	ldr	r0, [r4, #12]
 8005738:	9b03      	ldr	r3, [sp, #12]
 800573a:	4298      	cmp	r0, r3
 800573c:	bfb8      	it	lt
 800573e:	4618      	movlt	r0, r3
 8005740:	e7a4      	b.n	800568c <_printf_i+0x168>
 8005742:	2301      	movs	r3, #1
 8005744:	4632      	mov	r2, r6
 8005746:	4649      	mov	r1, r9
 8005748:	4640      	mov	r0, r8
 800574a:	47d0      	blx	sl
 800574c:	3001      	adds	r0, #1
 800574e:	d09b      	beq.n	8005688 <_printf_i+0x164>
 8005750:	3501      	adds	r5, #1
 8005752:	68e3      	ldr	r3, [r4, #12]
 8005754:	9903      	ldr	r1, [sp, #12]
 8005756:	1a5b      	subs	r3, r3, r1
 8005758:	42ab      	cmp	r3, r5
 800575a:	dcf2      	bgt.n	8005742 <_printf_i+0x21e>
 800575c:	e7eb      	b.n	8005736 <_printf_i+0x212>
 800575e:	2500      	movs	r5, #0
 8005760:	f104 0619 	add.w	r6, r4, #25
 8005764:	e7f5      	b.n	8005752 <_printf_i+0x22e>
 8005766:	bf00      	nop
 8005768:	08005a39 	.word	0x08005a39
 800576c:	08005a4a 	.word	0x08005a4a

08005770 <_sbrk_r>:
 8005770:	b538      	push	{r3, r4, r5, lr}
 8005772:	4d06      	ldr	r5, [pc, #24]	; (800578c <_sbrk_r+0x1c>)
 8005774:	2300      	movs	r3, #0
 8005776:	4604      	mov	r4, r0
 8005778:	4608      	mov	r0, r1
 800577a:	602b      	str	r3, [r5, #0]
 800577c:	f7fb fac8 	bl	8000d10 <_sbrk>
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	d102      	bne.n	800578a <_sbrk_r+0x1a>
 8005784:	682b      	ldr	r3, [r5, #0]
 8005786:	b103      	cbz	r3, 800578a <_sbrk_r+0x1a>
 8005788:	6023      	str	r3, [r4, #0]
 800578a:	bd38      	pop	{r3, r4, r5, pc}
 800578c:	20000bac 	.word	0x20000bac

08005790 <__sread>:
 8005790:	b510      	push	{r4, lr}
 8005792:	460c      	mov	r4, r1
 8005794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005798:	f000 f8a0 	bl	80058dc <_read_r>
 800579c:	2800      	cmp	r0, #0
 800579e:	bfab      	itete	ge
 80057a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057a2:	89a3      	ldrhlt	r3, [r4, #12]
 80057a4:	181b      	addge	r3, r3, r0
 80057a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057aa:	bfac      	ite	ge
 80057ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80057ae:	81a3      	strhlt	r3, [r4, #12]
 80057b0:	bd10      	pop	{r4, pc}

080057b2 <__swrite>:
 80057b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057b6:	461f      	mov	r7, r3
 80057b8:	898b      	ldrh	r3, [r1, #12]
 80057ba:	05db      	lsls	r3, r3, #23
 80057bc:	4605      	mov	r5, r0
 80057be:	460c      	mov	r4, r1
 80057c0:	4616      	mov	r6, r2
 80057c2:	d505      	bpl.n	80057d0 <__swrite+0x1e>
 80057c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c8:	2302      	movs	r3, #2
 80057ca:	2200      	movs	r2, #0
 80057cc:	f000 f868 	bl	80058a0 <_lseek_r>
 80057d0:	89a3      	ldrh	r3, [r4, #12]
 80057d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057da:	81a3      	strh	r3, [r4, #12]
 80057dc:	4632      	mov	r2, r6
 80057de:	463b      	mov	r3, r7
 80057e0:	4628      	mov	r0, r5
 80057e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057e6:	f000 b817 	b.w	8005818 <_write_r>

080057ea <__sseek>:
 80057ea:	b510      	push	{r4, lr}
 80057ec:	460c      	mov	r4, r1
 80057ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f2:	f000 f855 	bl	80058a0 <_lseek_r>
 80057f6:	1c43      	adds	r3, r0, #1
 80057f8:	89a3      	ldrh	r3, [r4, #12]
 80057fa:	bf15      	itete	ne
 80057fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80057fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005802:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005806:	81a3      	strheq	r3, [r4, #12]
 8005808:	bf18      	it	ne
 800580a:	81a3      	strhne	r3, [r4, #12]
 800580c:	bd10      	pop	{r4, pc}

0800580e <__sclose>:
 800580e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005812:	f000 b813 	b.w	800583c <_close_r>
	...

08005818 <_write_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	4d07      	ldr	r5, [pc, #28]	; (8005838 <_write_r+0x20>)
 800581c:	4604      	mov	r4, r0
 800581e:	4608      	mov	r0, r1
 8005820:	4611      	mov	r1, r2
 8005822:	2200      	movs	r2, #0
 8005824:	602a      	str	r2, [r5, #0]
 8005826:	461a      	mov	r2, r3
 8005828:	f7fb fa21 	bl	8000c6e <_write>
 800582c:	1c43      	adds	r3, r0, #1
 800582e:	d102      	bne.n	8005836 <_write_r+0x1e>
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	b103      	cbz	r3, 8005836 <_write_r+0x1e>
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	bd38      	pop	{r3, r4, r5, pc}
 8005838:	20000bac 	.word	0x20000bac

0800583c <_close_r>:
 800583c:	b538      	push	{r3, r4, r5, lr}
 800583e:	4d06      	ldr	r5, [pc, #24]	; (8005858 <_close_r+0x1c>)
 8005840:	2300      	movs	r3, #0
 8005842:	4604      	mov	r4, r0
 8005844:	4608      	mov	r0, r1
 8005846:	602b      	str	r3, [r5, #0]
 8005848:	f7fb fa2d 	bl	8000ca6 <_close>
 800584c:	1c43      	adds	r3, r0, #1
 800584e:	d102      	bne.n	8005856 <_close_r+0x1a>
 8005850:	682b      	ldr	r3, [r5, #0]
 8005852:	b103      	cbz	r3, 8005856 <_close_r+0x1a>
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	bd38      	pop	{r3, r4, r5, pc}
 8005858:	20000bac 	.word	0x20000bac

0800585c <_fstat_r>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	4d07      	ldr	r5, [pc, #28]	; (800587c <_fstat_r+0x20>)
 8005860:	2300      	movs	r3, #0
 8005862:	4604      	mov	r4, r0
 8005864:	4608      	mov	r0, r1
 8005866:	4611      	mov	r1, r2
 8005868:	602b      	str	r3, [r5, #0]
 800586a:	f7fb fa28 	bl	8000cbe <_fstat>
 800586e:	1c43      	adds	r3, r0, #1
 8005870:	d102      	bne.n	8005878 <_fstat_r+0x1c>
 8005872:	682b      	ldr	r3, [r5, #0]
 8005874:	b103      	cbz	r3, 8005878 <_fstat_r+0x1c>
 8005876:	6023      	str	r3, [r4, #0]
 8005878:	bd38      	pop	{r3, r4, r5, pc}
 800587a:	bf00      	nop
 800587c:	20000bac 	.word	0x20000bac

08005880 <_isatty_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	4d06      	ldr	r5, [pc, #24]	; (800589c <_isatty_r+0x1c>)
 8005884:	2300      	movs	r3, #0
 8005886:	4604      	mov	r4, r0
 8005888:	4608      	mov	r0, r1
 800588a:	602b      	str	r3, [r5, #0]
 800588c:	f7fb fa27 	bl	8000cde <_isatty>
 8005890:	1c43      	adds	r3, r0, #1
 8005892:	d102      	bne.n	800589a <_isatty_r+0x1a>
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	b103      	cbz	r3, 800589a <_isatty_r+0x1a>
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	bd38      	pop	{r3, r4, r5, pc}
 800589c:	20000bac 	.word	0x20000bac

080058a0 <_lseek_r>:
 80058a0:	b538      	push	{r3, r4, r5, lr}
 80058a2:	4d07      	ldr	r5, [pc, #28]	; (80058c0 <_lseek_r+0x20>)
 80058a4:	4604      	mov	r4, r0
 80058a6:	4608      	mov	r0, r1
 80058a8:	4611      	mov	r1, r2
 80058aa:	2200      	movs	r2, #0
 80058ac:	602a      	str	r2, [r5, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	f7fb fa20 	bl	8000cf4 <_lseek>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	d102      	bne.n	80058be <_lseek_r+0x1e>
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	b103      	cbz	r3, 80058be <_lseek_r+0x1e>
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	bd38      	pop	{r3, r4, r5, pc}
 80058c0:	20000bac 	.word	0x20000bac

080058c4 <__malloc_lock>:
 80058c4:	4801      	ldr	r0, [pc, #4]	; (80058cc <__malloc_lock+0x8>)
 80058c6:	f7ff bb55 	b.w	8004f74 <__retarget_lock_acquire_recursive>
 80058ca:	bf00      	nop
 80058cc:	20000ba4 	.word	0x20000ba4

080058d0 <__malloc_unlock>:
 80058d0:	4801      	ldr	r0, [pc, #4]	; (80058d8 <__malloc_unlock+0x8>)
 80058d2:	f7ff bb50 	b.w	8004f76 <__retarget_lock_release_recursive>
 80058d6:	bf00      	nop
 80058d8:	20000ba4 	.word	0x20000ba4

080058dc <_read_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	4d07      	ldr	r5, [pc, #28]	; (80058fc <_read_r+0x20>)
 80058e0:	4604      	mov	r4, r0
 80058e2:	4608      	mov	r0, r1
 80058e4:	4611      	mov	r1, r2
 80058e6:	2200      	movs	r2, #0
 80058e8:	602a      	str	r2, [r5, #0]
 80058ea:	461a      	mov	r2, r3
 80058ec:	f7fb f9a2 	bl	8000c34 <_read>
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	d102      	bne.n	80058fa <_read_r+0x1e>
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	b103      	cbz	r3, 80058fa <_read_r+0x1e>
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	bd38      	pop	{r3, r4, r5, pc}
 80058fc:	20000bac 	.word	0x20000bac

08005900 <_init>:
 8005900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005902:	bf00      	nop
 8005904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005906:	bc08      	pop	{r3}
 8005908:	469e      	mov	lr, r3
 800590a:	4770      	bx	lr

0800590c <_fini>:
 800590c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590e:	bf00      	nop
 8005910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005912:	bc08      	pop	{r3}
 8005914:	469e      	mov	lr, r3
 8005916:	4770      	bx	lr
