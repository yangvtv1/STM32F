
DEV_KIT_STM32F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ccmram       00000008  10000000  08000188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00005e24  08000190  08000190  00020190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000178  08005fb4  08005fb4  00025fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800612c  0800612c  00030070  2**0
                  CONTENTS
  5 .ARM          00000000  0800612c  0800612c  00030070  2**0
                  CONTENTS
  6 .preinit_array 00000000  0800612c  0800612c  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800612c  0800612c  0002612c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08006130  08006130  00026130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000070  20000000  08006134  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000b40  20000070  080061a4  00030070  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000bb0  080061a4  00030bb0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018749  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e14  00000000  00000000  000487e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  0004b600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb0  00000000  00000000  0004c5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000215a3  00000000  00000000  0004d468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014d77  00000000  00000000  0006ea0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5647  00000000  00000000  00083782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00148dc9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048d0  00000000  00000000  00148e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f9c 	.word	0x08005f9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005f9c 	.word	0x08005f9c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DRV_TIM_PERIOD_ELAPSED_CALLBACK(TIM_HandleTypeDef *htim)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000280:	d102      	bne.n	8000288 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		DRV_TIMER_FNC(0);
 8000282:	2000      	movs	r0, #0
 8000284:	f004 fcda 	bl	8004c3c <DRV_TIMER_FNC>
	}
}
 8000288:	bf00      	nop
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <HAL_UART_RxCpltCallback>:

void DRV_UART_RX_CPLT_CALLBACK(UART_HandleTypeDef *huart)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a08      	ldr	r2, [pc, #32]	; (80002c0 <HAL_UART_RxCpltCallback+0x30>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d10a      	bne.n	80002b8 <HAL_UART_RxCpltCallback+0x28>
	{
		DRV_UART_RECEIVE_IT(&huart1, UART1_rxBuffer, 1);
 80002a2:	2201      	movs	r2, #1
 80002a4:	4907      	ldr	r1, [pc, #28]	; (80002c4 <HAL_UART_RxCpltCallback+0x34>)
 80002a6:	4808      	ldr	r0, [pc, #32]	; (80002c8 <HAL_UART_RxCpltCallback+0x38>)
 80002a8:	f003 fab8 	bl	800381c <HAL_UART_Receive_IT>
	    UART_IRQ(RCU_USART1, UART1_rxBuffer[0]);
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <HAL_UART_RxCpltCallback+0x34>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	4619      	mov	r1, r3
 80002b2:	4803      	ldr	r0, [pc, #12]	; (80002c0 <HAL_UART_RxCpltCallback+0x30>)
 80002b4:	f004 fdcc 	bl	8004e50 <UART_IRQ>
	}
}
 80002b8:	bf00      	nop
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	40013800 	.word	0x40013800
 80002c4:	10000004 	.word	0x10000004
 80002c8:	20000200 	.word	0x20000200

080002cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d0:	f000 fdbe 	bl	8000e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d4:	f000 f82a 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d8:	f000 fa14 	bl	8000704 <MX_GPIO_Init>
  MX_RTC_Init();
 80002dc:	f000 f896 	bl	800040c <MX_RTC_Init>
  MX_TIM2_Init();
 80002e0:	f000 f8ba 	bl	8000458 <MX_TIM2_Init>
  MX_UART4_Init();
 80002e4:	f000 f91e 	bl	8000524 <MX_UART4_Init>
  MX_UART5_Init();
 80002e8:	f000 f94c 	bl	8000584 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80002ec:	f000 f97a 	bl	80005e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80002f0:	f000 f9a8 	bl	8000644 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80002f4:	f000 f9d6 	bl	80006a4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  DRV_TIM_BASE_START_IT(&htim2);
 80002f8:	4808      	ldr	r0, [pc, #32]	; (800031c <main+0x50>)
 80002fa:	f002 fd75 	bl	8002de8 <HAL_TIM_Base_Start_IT>
  init_test_callback();
 80002fe:	f004 fe6f 	bl	8004fe0 <init_test_callback>
  DRV_UART_RECEIVE_IT(&huart1, UART1_rxBuffer, 1);
 8000302:	2201      	movs	r2, #1
 8000304:	4906      	ldr	r1, [pc, #24]	; (8000320 <main+0x54>)
 8000306:	4807      	ldr	r0, [pc, #28]	; (8000324 <main+0x58>)
 8000308:	f003 fa88 	bl	800381c <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	DRV_RUN();
 800030c:	f004 fd2c 	bl	8004d68 <DRV_RUN>
	TEST_CBK.run();
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <main+0x5c>)
 8000312:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8000316:	4798      	blx	r3
	DRV_RUN();
 8000318:	e7f8      	b.n	800030c <main+0x40>
 800031a:	bf00      	nop
 800031c:	20000394 	.word	0x20000394
 8000320:	10000004 	.word	0x10000004
 8000324:	20000200 	.word	0x20000200
 8000328:	200009d8 	.word	0x200009d8

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b09e      	sub	sp, #120	; 0x78
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000336:	2228      	movs	r2, #40	; 0x28
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f004 fed0 	bl	80050e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
 800034c:	60da      	str	r2, [r3, #12]
 800034e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000350:	463b      	mov	r3, r7
 8000352:	223c      	movs	r2, #60	; 0x3c
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f004 fec2 	bl	80050e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800035c:	230b      	movs	r3, #11
 800035e:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000360:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000364:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036a:	2301      	movs	r3, #1
 800036c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036e:	2310      	movs	r3, #16
 8000370:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000372:	2301      	movs	r3, #1
 8000374:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000376:	2302      	movs	r3, #2
 8000378:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800037a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800037e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000380:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000384:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000386:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800038a:	4618      	mov	r0, r3
 800038c:	f001 f8e0 	bl	8001550 <HAL_RCC_OscConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000396:	f000 fa51 	bl	800083c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039a:	230f      	movs	r3, #15
 800039c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039e:	2302      	movs	r3, #2
 80003a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003b4:	2102      	movs	r1, #2
 80003b6:	4618      	mov	r0, r3
 80003b8:	f001 ffd2 	bl	8002360 <HAL_RCC_ClockConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003c2:	f000 fa3b 	bl	800083c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80003c6:	4b10      	ldr	r3, [pc, #64]	; (8000408 <SystemClock_Config+0xdc>)
 80003c8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80003d6:	2300      	movs	r3, #0
 80003d8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80003da:	2300      	movs	r3, #0
 80003dc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003de:	2300      	movs	r3, #0
 80003e0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80003e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003e6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003e8:	2300      	movs	r3, #0
 80003ea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ec:	463b      	mov	r3, r7
 80003ee:	4618      	mov	r0, r3
 80003f0:	f002 f9ec 	bl	80027cc <HAL_RCCEx_PeriphCLKConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80003fa:	f000 fa1f 	bl	800083c <Error_Handler>
  }
}
 80003fe:	bf00      	nop
 8000400:	3778      	adds	r7, #120	; 0x78
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	0003003f 	.word	0x0003003f

0800040c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <MX_RTC_Init+0x44>)
 8000412:	4a10      	ldr	r2, [pc, #64]	; (8000454 <MX_RTC_Init+0x48>)
 8000414:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <MX_RTC_Init+0x44>)
 8000418:	2200      	movs	r2, #0
 800041a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800041c:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <MX_RTC_Init+0x44>)
 800041e:	227f      	movs	r2, #127	; 0x7f
 8000420:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <MX_RTC_Init+0x44>)
 8000424:	22ff      	movs	r2, #255	; 0xff
 8000426:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000428:	4b09      	ldr	r3, [pc, #36]	; (8000450 <MX_RTC_Init+0x44>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <MX_RTC_Init+0x44>)
 8000430:	2200      	movs	r2, #0
 8000432:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <MX_RTC_Init+0x44>)
 8000436:	2200      	movs	r2, #0
 8000438:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800043a:	4805      	ldr	r0, [pc, #20]	; (8000450 <MX_RTC_Init+0x44>)
 800043c:	f002 fb76 	bl	8002b2c <HAL_RTC_Init>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000446:	f000 f9f9 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	20000288 	.word	0x20000288
 8000454:	40002800 	.word	0x40002800

08000458 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000476:	4b26      	ldr	r3, [pc, #152]	; (8000510 <MX_TIM2_Init+0xb8>)
 8000478:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800047c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 800047e:	4b24      	ldr	r3, [pc, #144]	; (8000510 <MX_TIM2_Init+0xb8>)
 8000480:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000484:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000486:	4b22      	ldr	r3, [pc, #136]	; (8000510 <MX_TIM2_Init+0xb8>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9000-1;
 800048c:	4b20      	ldr	r3, [pc, #128]	; (8000510 <MX_TIM2_Init+0xb8>)
 800048e:	f242 3227 	movw	r2, #8999	; 0x2327
 8000492:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000494:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <MX_TIM2_Init+0xb8>)
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800049a:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <MX_TIM2_Init+0xb8>)
 800049c:	2200      	movs	r2, #0
 800049e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004a0:	481b      	ldr	r0, [pc, #108]	; (8000510 <MX_TIM2_Init+0xb8>)
 80004a2:	f002 fc49 	bl	8002d38 <HAL_TIM_Base_Init>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80004ac:	f000 f9c6 	bl	800083c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004b6:	f107 0310 	add.w	r3, r7, #16
 80004ba:	4619      	mov	r1, r3
 80004bc:	4814      	ldr	r0, [pc, #80]	; (8000510 <MX_TIM2_Init+0xb8>)
 80004be:	f002 fe1c 	bl	80030fa <HAL_TIM_ConfigClockSource>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80004c8:	f000 f9b8 	bl	800083c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004cc:	2300      	movs	r3, #0
 80004ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	4619      	mov	r1, r3
 80004d8:	480d      	ldr	r0, [pc, #52]	; (8000510 <MX_TIM2_Init+0xb8>)
 80004da:	f003 f829 	bl	8003530 <HAL_TIMEx_MasterConfigSynchronization>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80004e4:	f000 f9aa 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	LOGA(INF_FILE, "REGISTER\r\n");
 80004e8:	480a      	ldr	r0, [pc, #40]	; (8000514 <MX_TIM2_Init+0xbc>)
 80004ea:	f004 fe01 	bl	80050f0 <iprintf>
 80004ee:	bf00      	nop
 80004f0:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80004f4:	4908      	ldr	r1, [pc, #32]	; (8000518 <MX_TIM2_Init+0xc0>)
 80004f6:	4809      	ldr	r0, [pc, #36]	; (800051c <MX_TIM2_Init+0xc4>)
 80004f8:	f004 fdfa 	bl	80050f0 <iprintf>
 80004fc:	4808      	ldr	r0, [pc, #32]	; (8000520 <MX_TIM2_Init+0xc8>)
 80004fe:	f004 fdf7 	bl	80050f0 <iprintf>
	Drv_RegisterTIMER();
 8000502:	f004 fb83 	bl	8004c0c <Drv_RegisterTIMER>
  /* USER CODE END TIM2_Init 2 */

}
 8000506:	bf00      	nop
 8000508:	3720      	adds	r7, #32
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000394 	.word	0x20000394
 8000514:	08005fb4 	.word	0x08005fb4
 8000518:	0800602c 	.word	0x0800602c
 800051c:	08005fbc 	.word	0x08005fbc
 8000520:	08005fd4 	.word	0x08005fd4

08000524 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <MX_UART4_Init+0x58>)
 800052a:	4a15      	ldr	r2, [pc, #84]	; (8000580 <MX_UART4_Init+0x5c>)
 800052c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <MX_UART4_Init+0x58>)
 8000530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000534:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000536:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_UART4_Init+0x58>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <MX_UART4_Init+0x58>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <MX_UART4_Init+0x58>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <MX_UART4_Init+0x58>)
 800054a:	220c      	movs	r2, #12
 800054c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <MX_UART4_Init+0x58>)
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <MX_UART4_Init+0x58>)
 8000556:	2200      	movs	r2, #0
 8000558:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <MX_UART4_Init+0x58>)
 800055c:	2200      	movs	r2, #0
 800055e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <MX_UART4_Init+0x58>)
 8000562:	2200      	movs	r2, #0
 8000564:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000566:	4805      	ldr	r0, [pc, #20]	; (800057c <MX_UART4_Init+0x58>)
 8000568:	f003 f880 	bl	800366c <HAL_UART_Init>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000572:	f000 f963 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200002a8 	.word	0x200002a8
 8000580:	40004c00 	.word	0x40004c00

08000584 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <MX_UART5_Init+0x58>)
 800058a:	4a15      	ldr	r2, [pc, #84]	; (80005e0 <MX_UART5_Init+0x5c>)
 800058c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800058e:	4b13      	ldr	r3, [pc, #76]	; (80005dc <MX_UART5_Init+0x58>)
 8000590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000594:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <MX_UART5_Init+0x58>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <MX_UART5_Init+0x58>)
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <MX_UART5_Init+0x58>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <MX_UART5_Init+0x58>)
 80005aa:	220c      	movs	r2, #12
 80005ac:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <MX_UART5_Init+0x58>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_UART5_Init+0x58>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <MX_UART5_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_UART5_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <MX_UART5_Init+0x58>)
 80005c8:	f003 f850 	bl	800366c <HAL_UART_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80005d2:	f000 f933 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000178 	.word	0x20000178
 80005e0:	40005000 	.word	0x40005000

080005e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_USART1_UART_Init+0x58>)
 80005ea:	4a15      	ldr	r2, [pc, #84]	; (8000640 <MX_USART1_UART_Init+0x5c>)
 80005ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_USART1_UART_Init+0x58>)
 80005f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_USART1_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_USART1_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_USART1_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_USART1_UART_Init+0x58>)
 800060a:	220c      	movs	r2, #12
 800060c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_USART1_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_USART1_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_USART1_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_USART1_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_USART1_UART_Init+0x58>)
 8000628:	f003 f820 	bl	800366c <HAL_UART_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000632:	f000 f903 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000200 	.word	0x20000200
 8000640:	40013800 	.word	0x40013800

08000644 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_USART2_UART_Init+0x58>)
 800064a:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <MX_USART2_UART_Init+0x5c>)
 800064c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000654:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_USART2_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_USART2_UART_Init+0x58>)
 800066a:	220c      	movs	r2, #12
 800066c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_USART2_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000688:	f002 fff0 	bl	800366c <HAL_UART_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000692:	f000 f8d3 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200003e0 	.word	0x200003e0
 80006a0:	40004400 	.word	0x40004400

080006a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006aa:	4a15      	ldr	r2, [pc, #84]	; (8000700 <MX_USART3_UART_Init+0x5c>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006e8:	f002 ffc0 	bl	800366c <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80006f2:	f000 f8a3 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	2000009c 	.word	0x2000009c
 8000700:	40004800 	.word	0x40004800

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	; 0x30
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800071a:	4b3d      	ldr	r3, [pc, #244]	; (8000810 <MX_GPIO_Init+0x10c>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a3c      	ldr	r2, [pc, #240]	; (8000810 <MX_GPIO_Init+0x10c>)
 8000720:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000724:	6153      	str	r3, [r2, #20]
 8000726:	4b3a      	ldr	r3, [pc, #232]	; (8000810 <MX_GPIO_Init+0x10c>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800072e:	61bb      	str	r3, [r7, #24]
 8000730:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	4b37      	ldr	r3, [pc, #220]	; (8000810 <MX_GPIO_Init+0x10c>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	4a36      	ldr	r2, [pc, #216]	; (8000810 <MX_GPIO_Init+0x10c>)
 8000738:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800073c:	6153      	str	r3, [r2, #20]
 800073e:	4b34      	ldr	r3, [pc, #208]	; (8000810 <MX_GPIO_Init+0x10c>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074a:	4b31      	ldr	r3, [pc, #196]	; (8000810 <MX_GPIO_Init+0x10c>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	4a30      	ldr	r2, [pc, #192]	; (8000810 <MX_GPIO_Init+0x10c>)
 8000750:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000754:	6153      	str	r3, [r2, #20]
 8000756:	4b2e      	ldr	r3, [pc, #184]	; (8000810 <MX_GPIO_Init+0x10c>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <MX_GPIO_Init+0x10c>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	4a2a      	ldr	r2, [pc, #168]	; (8000810 <MX_GPIO_Init+0x10c>)
 8000768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800076c:	6153      	str	r3, [r2, #20]
 800076e:	4b28      	ldr	r3, [pc, #160]	; (8000810 <MX_GPIO_Init+0x10c>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b25      	ldr	r3, [pc, #148]	; (8000810 <MX_GPIO_Init+0x10c>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	4a24      	ldr	r2, [pc, #144]	; (8000810 <MX_GPIO_Init+0x10c>)
 8000780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000784:	6153      	str	r3, [r2, #20]
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <MX_GPIO_Init+0x10c>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <MX_GPIO_Init+0x10c>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	4a1e      	ldr	r2, [pc, #120]	; (8000810 <MX_GPIO_Init+0x10c>)
 8000798:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800079c:	6153      	str	r3, [r2, #20]
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_GPIO_Init+0x10c>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80007aa:	2200      	movs	r2, #0
 80007ac:	f64f 7108 	movw	r1, #65288	; 0xff08
 80007b0:	4818      	ldr	r0, [pc, #96]	; (8000814 <MX_GPIO_Init+0x110>)
 80007b2:	f000 feb5 	bl	8001520 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80007b6:	2337      	movs	r3, #55	; 0x37
 80007b8:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007ba:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	4812      	ldr	r0, [pc, #72]	; (8000814 <MX_GPIO_Init+0x110>)
 80007cc:	f000 fd2e 	bl	800122c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80007d0:	f64f 7308 	movw	r3, #65288	; 0xff08
 80007d4:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	480a      	ldr	r0, [pc, #40]	; (8000814 <MX_GPIO_Init+0x110>)
 80007ea:	f000 fd1f 	bl	800122c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000804:	f000 fd12 	bl	800122c <HAL_GPIO_Init>

}
 8000808:	bf00      	nop
 800080a:	3730      	adds	r7, #48	; 0x30
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40021000 	.word	0x40021000
 8000814:	48001000 	.word	0x48001000

08000818 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000820:	1d39      	adds	r1, r7, #4
 8000822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000826:	2201      	movs	r2, #1
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <__io_putchar+0x20>)
 800082a:	f002 ff6d 	bl	8003708 <HAL_UART_Transmit>

  return ch;
 800082e:	687b      	ldr	r3, [r7, #4]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000200 	.word	0x20000200

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <HAL_MspInit+0x44>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <HAL_MspInit+0x44>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6193      	str	r3, [r2, #24]
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <HAL_MspInit+0x44>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_MspInit+0x44>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <HAL_MspInit+0x44>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000870:	61d3      	str	r3, [r2, #28]
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_MspInit+0x44>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800087e:	2007      	movs	r0, #7
 8000880:	f000 fc1c 	bl	80010bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40021000 	.word	0x40021000

08000890 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <HAL_RTC_MspInit+0x44>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d111      	bne.n	80008c6 <HAL_RTC_MspInit+0x36>
 80008a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008a6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	fa93 f3a3 	rbit	r3, r3
 80008ae:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80008b0:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008b2:	fab3 f383 	clz	r3, r3
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <HAL_RTC_MspInit+0x48>)
 80008bc:	4413      	add	r3, r2
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	461a      	mov	r2, r3
 80008c2:	2301      	movs	r3, #1
 80008c4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40002800 	.word	0x40002800
 80008d8:	10908100 	.word	0x10908100

080008dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008ec:	d113      	bne.n	8000916 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <HAL_TIM_Base_MspInit+0x44>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <HAL_TIM_Base_MspInit+0x44>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	61d3      	str	r3, [r2, #28]
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_TIM_Base_MspInit+0x44>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	201c      	movs	r0, #28
 800090c:	f000 fbe1 	bl	80010d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000910:	201c      	movs	r0, #28
 8000912:	f000 fbfa 	bl	800110a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000

08000924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b092      	sub	sp, #72	; 0x48
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a97      	ldr	r2, [pc, #604]	; (8000ba0 <HAL_UART_MspInit+0x27c>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d131      	bne.n	80009aa <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000946:	4b97      	ldr	r3, [pc, #604]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	4a96      	ldr	r2, [pc, #600]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 800094c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000950:	61d3      	str	r3, [r2, #28]
 8000952:	4b94      	ldr	r3, [pc, #592]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
 800095c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b91      	ldr	r3, [pc, #580]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	4a90      	ldr	r2, [pc, #576]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000968:	6153      	str	r3, [r2, #20]
 800096a:	4b8e      	ldr	r3, [pc, #568]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000976:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800097a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000988:	2305      	movs	r3, #5
 800098a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000990:	4619      	mov	r1, r3
 8000992:	4885      	ldr	r0, [pc, #532]	; (8000ba8 <HAL_UART_MspInit+0x284>)
 8000994:	f000 fc4a 	bl	800122c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	2034      	movs	r0, #52	; 0x34
 800099e:	f000 fb98 	bl	80010d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80009a2:	2034      	movs	r0, #52	; 0x34
 80009a4:	f000 fbb1 	bl	800110a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009a8:	e0f5      	b.n	8000b96 <HAL_UART_MspInit+0x272>
  else if(huart->Instance==UART5)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a7f      	ldr	r2, [pc, #508]	; (8000bac <HAL_UART_MspInit+0x288>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d14d      	bne.n	8000a50 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_UART5_CLK_ENABLE();
 80009b4:	4b7b      	ldr	r3, [pc, #492]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 80009b6:	69db      	ldr	r3, [r3, #28]
 80009b8:	4a7a      	ldr	r2, [pc, #488]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 80009ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009be:	61d3      	str	r3, [r2, #28]
 80009c0:	4b78      	ldr	r3, [pc, #480]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 80009c2:	69db      	ldr	r3, [r3, #28]
 80009c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80009ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009cc:	4b75      	ldr	r3, [pc, #468]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	4a74      	ldr	r2, [pc, #464]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 80009d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009d6:	6153      	str	r3, [r2, #20]
 80009d8:	4b72      	ldr	r3, [pc, #456]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
 80009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e4:	4b6f      	ldr	r3, [pc, #444]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	4a6e      	ldr	r2, [pc, #440]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 80009ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009ee:	6153      	str	r3, [r2, #20]
 80009f0:	4b6c      	ldr	r3, [pc, #432]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009f8:	623b      	str	r3, [r7, #32]
 80009fa:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a00:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000a0e:	2305      	movs	r3, #5
 8000a10:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a16:	4619      	mov	r1, r3
 8000a18:	4863      	ldr	r0, [pc, #396]	; (8000ba8 <HAL_UART_MspInit+0x284>)
 8000a1a:	f000 fc07 	bl	800122c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a1e:	2304      	movs	r3, #4
 8000a20:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000a2e:	2305      	movs	r3, #5
 8000a30:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a36:	4619      	mov	r1, r3
 8000a38:	485d      	ldr	r0, [pc, #372]	; (8000bb0 <HAL_UART_MspInit+0x28c>)
 8000a3a:	f000 fbf7 	bl	800122c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	2035      	movs	r0, #53	; 0x35
 8000a44:	f000 fb45 	bl	80010d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000a48:	2035      	movs	r0, #53	; 0x35
 8000a4a:	f000 fb5e 	bl	800110a <HAL_NVIC_EnableIRQ>
}
 8000a4e:	e0a2      	b.n	8000b96 <HAL_UART_MspInit+0x272>
  else if(huart->Instance==USART1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a57      	ldr	r2, [pc, #348]	; (8000bb4 <HAL_UART_MspInit+0x290>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d130      	bne.n	8000abc <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a5a:	4b52      	ldr	r3, [pc, #328]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	4a51      	ldr	r2, [pc, #324]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a64:	6193      	str	r3, [r2, #24]
 8000a66:	4b4f      	ldr	r3, [pc, #316]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6e:	61fb      	str	r3, [r7, #28]
 8000a70:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	4b4c      	ldr	r3, [pc, #304]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	4a4b      	ldr	r2, [pc, #300]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000a78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a7c:	6153      	str	r3, [r2, #20]
 8000a7e:	4b49      	ldr	r3, [pc, #292]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a86:	61bb      	str	r3, [r7, #24]
 8000a88:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a8a:	2330      	movs	r3, #48	; 0x30
 8000a8c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a9a:	2307      	movs	r3, #7
 8000a9c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4840      	ldr	r0, [pc, #256]	; (8000ba8 <HAL_UART_MspInit+0x284>)
 8000aa6:	f000 fbc1 	bl	800122c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	2025      	movs	r0, #37	; 0x25
 8000ab0:	f000 fb0f 	bl	80010d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ab4:	2025      	movs	r0, #37	; 0x25
 8000ab6:	f000 fb28 	bl	800110a <HAL_NVIC_EnableIRQ>
}
 8000aba:	e06c      	b.n	8000b96 <HAL_UART_MspInit+0x272>
  else if(huart->Instance==USART2)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a3d      	ldr	r2, [pc, #244]	; (8000bb8 <HAL_UART_MspInit+0x294>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d131      	bne.n	8000b2a <HAL_UART_MspInit+0x206>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac6:	4b37      	ldr	r3, [pc, #220]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	4a36      	ldr	r2, [pc, #216]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad0:	61d3      	str	r3, [r2, #28]
 8000ad2:	4b34      	ldr	r3, [pc, #208]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	4a30      	ldr	r2, [pc, #192]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	6153      	str	r3, [r2, #20]
 8000aea:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000af6:	230c      	movs	r3, #12
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b06:	2307      	movs	r3, #7
 8000b08:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b14:	f000 fb8a 	bl	800122c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2026      	movs	r0, #38	; 0x26
 8000b1e:	f000 fad8 	bl	80010d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b22:	2026      	movs	r0, #38	; 0x26
 8000b24:	f000 faf1 	bl	800110a <HAL_NVIC_EnableIRQ>
}
 8000b28:	e035      	b.n	8000b96 <HAL_UART_MspInit+0x272>
  else if(huart->Instance==USART3)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a23      	ldr	r2, [pc, #140]	; (8000bbc <HAL_UART_MspInit+0x298>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d130      	bne.n	8000b96 <HAL_UART_MspInit+0x272>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000b36:	69db      	ldr	r3, [r3, #28]
 8000b38:	4a1a      	ldr	r2, [pc, #104]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000b3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b3e:	61d3      	str	r3, [r2, #28]
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000b42:	69db      	ldr	r3, [r3, #28]
 8000b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000b4e:	695b      	ldr	r3, [r3, #20]
 8000b50:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000b52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b56:	6153      	str	r3, [r2, #20]
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_UART_MspInit+0x280>)
 8000b5a:	695b      	ldr	r3, [r3, #20]
 8000b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b76:	2307      	movs	r3, #7
 8000b78:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480f      	ldr	r0, [pc, #60]	; (8000bc0 <HAL_UART_MspInit+0x29c>)
 8000b82:	f000 fb53 	bl	800122c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2027      	movs	r0, #39	; 0x27
 8000b8c:	f000 faa1 	bl	80010d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b90:	2027      	movs	r0, #39	; 0x27
 8000b92:	f000 faba 	bl	800110a <HAL_NVIC_EnableIRQ>
}
 8000b96:	bf00      	nop
 8000b98:	3748      	adds	r7, #72	; 0x48
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40004c00 	.word	0x40004c00
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	48000800 	.word	0x48000800
 8000bac:	40005000 	.word	0x40005000
 8000bb0:	48000c00 	.word	0x48000c00
 8000bb4:	40013800 	.word	0x40013800
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	40004800 	.word	0x40004800
 8000bc0:	48000400 	.word	0x48000400

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <NMI_Handler+0x4>

08000bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c10:	f000 f964 	bl	8000edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <TIM2_IRQHandler+0x10>)
 8000c1e:	f002 f94d 	bl	8002ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000394 	.word	0x20000394

08000c2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <USART1_IRQHandler+0x10>)
 8000c32:	f002 fe37 	bl	80038a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000200 	.word	0x20000200

08000c40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <USART2_IRQHandler+0x10>)
 8000c46:	f002 fe2d 	bl	80038a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200003e0 	.word	0x200003e0

08000c54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <USART3_IRQHandler+0x10>)
 8000c5a:	f002 fe23 	bl	80038a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000009c 	.word	0x2000009c

08000c68 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <UART4_IRQHandler+0x10>)
 8000c6e:	f002 fe19 	bl	80038a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200002a8 	.word	0x200002a8

08000c7c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <UART5_IRQHandler+0x10>)
 8000c82:	f002 fe0f 	bl	80038a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000178 	.word	0x20000178

08000c90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	e00a      	b.n	8000cb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ca2:	f3af 8000 	nop.w
 8000ca6:	4601      	mov	r1, r0
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	60ba      	str	r2, [r7, #8]
 8000cae:	b2ca      	uxtb	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbf0      	blt.n	8000ca2 <_read+0x12>
	}

return len;
 8000cc0:	687b      	ldr	r3, [r7, #4]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	e009      	b.n	8000cf0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	60ba      	str	r2, [r7, #8]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fd97 	bl	8000818 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbf1      	blt.n	8000cdc <_write+0x12>
	}
	return len;
 8000cf8:	687b      	ldr	r3, [r7, #4]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_close>:

int _close(int file)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
	return -1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d2a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <_isatty>:

int _isatty(int file)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
	return 1;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
	return 0;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d74:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <_sbrk+0x5c>)
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <_sbrk+0x60>)
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <_sbrk+0x64>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <_sbrk+0x68>)
 8000d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d207      	bcs.n	8000dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d9c:	f004 f976 	bl	800508c <__errno>
 8000da0:	4603      	mov	r3, r0
 8000da2:	220c      	movs	r2, #12
 8000da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	e009      	b.n	8000dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <_sbrk+0x64>)
 8000dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2000a000 	.word	0x2000a000
 8000dcc:	00000400 	.word	0x00000400
 8000dd0:	2000008c 	.word	0x2000008c
 8000dd4:	20000bb0 	.word	0x20000bb0

08000dd8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <SystemInit+0x20>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <SystemInit+0x20>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e34 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e00:	f7ff ffea 	bl	8000dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e06:	490d      	ldr	r1, [pc, #52]	; (8000e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <LoopForever+0xe>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e1c:	4c0a      	ldr	r4, [pc, #40]	; (8000e48 <LoopForever+0x16>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f004 f935 	bl	8005098 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e2e:	f7ff fa4d 	bl	80002cc <main>

08000e32 <LoopForever>:

LoopForever:
    b LoopForever
 8000e32:	e7fe      	b.n	8000e32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e34:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e40:	08006134 	.word	0x08006134
  ldr r2, =_sbss
 8000e44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e48:	20000bb0 	.word	0x20000bb0

08000e4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC1_2_IRQHandler>
	...

08000e50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_Init+0x28>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <HAL_Init+0x28>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f000 f92b 	bl	80010bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e66:	2000      	movs	r0, #0
 8000e68:	f000 f808 	bl	8000e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e6c:	f7ff fcec 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40022000 	.word	0x40022000

08000e7c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_InitTick+0x54>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_InitTick+0x58>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f943 	bl	8001126 <HAL_SYSTICK_Config>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00e      	b.n	8000ec8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d80a      	bhi.n	8000ec6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f000 f90b 	bl	80010d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <HAL_InitTick+0x5c>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e000      	b.n	8000ec8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	20000004 	.word	0x20000004

08000edc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000754 	.word	0x20000754

08000f04 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000754 	.word	0x20000754

08000f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db0b      	blt.n	8000faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 021f 	and.w	r2, r3, #31
 8000f98:	4907      	ldr	r1, [pc, #28]	; (8000fb8 <__NVIC_EnableIRQ+0x38>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	490c      	ldr	r1, [pc, #48]	; (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	; (800100c <__NVIC_SetPriority+0x50>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	f04f 32ff 	mov.w	r2, #4294967295
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	f04f 31ff 	mov.w	r1, #4294967295
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	4313      	orrs	r3, r2
         );
}
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001088:	d301      	bcc.n	800108e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108a:	2301      	movs	r3, #1
 800108c:	e00f      	b.n	80010ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <SysTick_Config+0x40>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001096:	210f      	movs	r1, #15
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f7ff ff8e 	bl	8000fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <SysTick_Config+0x40>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <SysTick_Config+0x40>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	e000e010 	.word	0xe000e010

080010bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff29 	bl	8000f1c <__NVIC_SetPriorityGrouping>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e4:	f7ff ff3e 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff8e 	bl	8001010 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff5d 	bl	8000fbc <__NVIC_SetPriority>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff31 	bl	8000f80 <__NVIC_EnableIRQ>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffa2 	bl	8001078 <SysTick_Config>
 8001134:	4603      	mov	r3, r0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800114c:	2b02      	cmp	r3, #2
 800114e:	d008      	beq.n	8001162 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2204      	movs	r2, #4
 8001154:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e020      	b.n	80011a4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 020e 	bic.w	r2, r2, #14
 8001170:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 0201 	bic.w	r2, r2, #1
 8001180:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800118a:	2101      	movs	r1, #1
 800118c:	fa01 f202 	lsl.w	r2, r1, r2
 8001190:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d005      	beq.n	80011d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2204      	movs	r2, #4
 80011ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
 80011d0:	e027      	b.n	8001222 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 020e 	bic.w	r2, r2, #14
 80011e0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f022 0201 	bic.w	r2, r2, #1
 80011f0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011fa:	2101      	movs	r1, #1
 80011fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001200:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	4798      	blx	r3
    } 
  }
  return status;
 8001222:	7bfb      	ldrb	r3, [r7, #15]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800122c:	b480      	push	{r7}
 800122e:	b087      	sub	sp, #28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123a:	e154      	b.n	80014e6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2101      	movs	r1, #1
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	fa01 f303 	lsl.w	r3, r1, r3
 8001248:	4013      	ands	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 8146 	beq.w	80014e0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	2b01      	cmp	r3, #1
 800125e:	d005      	beq.n	800126c <HAL_GPIO_Init+0x40>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d130      	bne.n	80012ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	2203      	movs	r2, #3
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012a2:	2201      	movs	r2, #1
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	091b      	lsrs	r3, r3, #4
 80012b8:	f003 0201 	and.w	r2, r3, #1
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d017      	beq.n	800130a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	2203      	movs	r2, #3
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d123      	bne.n	800135e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	08da      	lsrs	r2, r3, #3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3208      	adds	r2, #8
 800131e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001322:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	220f      	movs	r2, #15
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	691a      	ldr	r2, [r3, #16]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	08da      	lsrs	r2, r3, #3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3208      	adds	r2, #8
 8001358:	6939      	ldr	r1, [r7, #16]
 800135a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	2203      	movs	r2, #3
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0203 	and.w	r2, r3, #3
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 80a0 	beq.w	80014e0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a0:	4b58      	ldr	r3, [pc, #352]	; (8001504 <HAL_GPIO_Init+0x2d8>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a57      	ldr	r2, [pc, #348]	; (8001504 <HAL_GPIO_Init+0x2d8>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b55      	ldr	r3, [pc, #340]	; (8001504 <HAL_GPIO_Init+0x2d8>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013b8:	4a53      	ldr	r2, [pc, #332]	; (8001508 <HAL_GPIO_Init+0x2dc>)
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	220f      	movs	r2, #15
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013e2:	d019      	beq.n	8001418 <HAL_GPIO_Init+0x1ec>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a49      	ldr	r2, [pc, #292]	; (800150c <HAL_GPIO_Init+0x2e0>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d013      	beq.n	8001414 <HAL_GPIO_Init+0x1e8>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a48      	ldr	r2, [pc, #288]	; (8001510 <HAL_GPIO_Init+0x2e4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d00d      	beq.n	8001410 <HAL_GPIO_Init+0x1e4>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a47      	ldr	r2, [pc, #284]	; (8001514 <HAL_GPIO_Init+0x2e8>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d007      	beq.n	800140c <HAL_GPIO_Init+0x1e0>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a46      	ldr	r2, [pc, #280]	; (8001518 <HAL_GPIO_Init+0x2ec>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d101      	bne.n	8001408 <HAL_GPIO_Init+0x1dc>
 8001404:	2304      	movs	r3, #4
 8001406:	e008      	b.n	800141a <HAL_GPIO_Init+0x1ee>
 8001408:	2305      	movs	r3, #5
 800140a:	e006      	b.n	800141a <HAL_GPIO_Init+0x1ee>
 800140c:	2303      	movs	r3, #3
 800140e:	e004      	b.n	800141a <HAL_GPIO_Init+0x1ee>
 8001410:	2302      	movs	r3, #2
 8001412:	e002      	b.n	800141a <HAL_GPIO_Init+0x1ee>
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <HAL_GPIO_Init+0x1ee>
 8001418:	2300      	movs	r3, #0
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	f002 0203 	and.w	r2, r2, #3
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	4093      	lsls	r3, r2
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800142a:	4937      	ldr	r1, [pc, #220]	; (8001508 <HAL_GPIO_Init+0x2dc>)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	3302      	adds	r3, #2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001438:	4b38      	ldr	r3, [pc, #224]	; (800151c <HAL_GPIO_Init+0x2f0>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800145c:	4a2f      	ldr	r2, [pc, #188]	; (800151c <HAL_GPIO_Init+0x2f0>)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001462:	4b2e      	ldr	r3, [pc, #184]	; (800151c <HAL_GPIO_Init+0x2f0>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001486:	4a25      	ldr	r2, [pc, #148]	; (800151c <HAL_GPIO_Init+0x2f0>)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800148c:	4b23      	ldr	r3, [pc, #140]	; (800151c <HAL_GPIO_Init+0x2f0>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014b0:	4a1a      	ldr	r2, [pc, #104]	; (800151c <HAL_GPIO_Init+0x2f0>)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <HAL_GPIO_Init+0x2f0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014da:	4a10      	ldr	r2, [pc, #64]	; (800151c <HAL_GPIO_Init+0x2f0>)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	3301      	adds	r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	fa22 f303 	lsr.w	r3, r2, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f47f aea3 	bne.w	800123c <HAL_GPIO_Init+0x10>
  }
}
 80014f6:	bf00      	nop
 80014f8:	bf00      	nop
 80014fa:	371c      	adds	r7, #28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	40021000 	.word	0x40021000
 8001508:	40010000 	.word	0x40010000
 800150c:	48000400 	.word	0x48000400
 8001510:	48000800 	.word	0x48000800
 8001514:	48000c00 	.word	0x48000c00
 8001518:	48001000 	.word	0x48001000
 800151c:	40010400 	.word	0x40010400

08001520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
 800152c:	4613      	mov	r3, r2
 800152e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001530:	787b      	ldrb	r3, [r7, #1]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800153c:	e002      	b.n	8001544 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001556:	af00      	add	r7, sp, #0
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	f000 bef4 	b.w	8002352 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 816a 	beq.w	800184e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800157a:	4bb3      	ldr	r3, [pc, #716]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b04      	cmp	r3, #4
 8001584:	d00c      	beq.n	80015a0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001586:	4bb0      	ldr	r3, [pc, #704]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b08      	cmp	r3, #8
 8001590:	d159      	bne.n	8001646 <HAL_RCC_OscConfig+0xf6>
 8001592:	4bad      	ldr	r3, [pc, #692]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159e:	d152      	bne.n	8001646 <HAL_RCC_OscConfig+0xf6>
 80015a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80015ac:	fa93 f3a3 	rbit	r3, r3
 80015b0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80015b4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b8:	fab3 f383 	clz	r3, r3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d102      	bne.n	80015d2 <HAL_RCC_OscConfig+0x82>
 80015cc:	4b9e      	ldr	r3, [pc, #632]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	e015      	b.n	80015fe <HAL_RCC_OscConfig+0xae>
 80015d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015d6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015da:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80015de:	fa93 f3a3 	rbit	r3, r3
 80015e2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80015e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015ea:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80015ee:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80015f2:	fa93 f3a3 	rbit	r3, r3
 80015f6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80015fa:	4b93      	ldr	r3, [pc, #588]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001602:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001606:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800160a:	fa92 f2a2 	rbit	r2, r2
 800160e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001612:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001616:	fab2 f282 	clz	r2, r2
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	f042 0220 	orr.w	r2, r2, #32
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	f002 021f 	and.w	r2, r2, #31
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	4013      	ands	r3, r2
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 810c 	beq.w	800184c <HAL_RCC_OscConfig+0x2fc>
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	f040 8106 	bne.w	800184c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	f000 be86 	b.w	8002352 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001650:	d106      	bne.n	8001660 <HAL_RCC_OscConfig+0x110>
 8001652:	4b7d      	ldr	r3, [pc, #500]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a7c      	ldr	r2, [pc, #496]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 8001658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e030      	b.n	80016c2 <HAL_RCC_OscConfig+0x172>
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10c      	bne.n	8001684 <HAL_RCC_OscConfig+0x134>
 800166a:	4b77      	ldr	r3, [pc, #476]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a76      	ldr	r2, [pc, #472]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 8001670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	4b74      	ldr	r3, [pc, #464]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a73      	ldr	r2, [pc, #460]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 800167c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e01e      	b.n	80016c2 <HAL_RCC_OscConfig+0x172>
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800168e:	d10c      	bne.n	80016aa <HAL_RCC_OscConfig+0x15a>
 8001690:	4b6d      	ldr	r3, [pc, #436]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a6c      	ldr	r2, [pc, #432]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 8001696:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b6a      	ldr	r3, [pc, #424]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a69      	ldr	r2, [pc, #420]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 80016a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	e00b      	b.n	80016c2 <HAL_RCC_OscConfig+0x172>
 80016aa:	4b67      	ldr	r3, [pc, #412]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a66      	ldr	r2, [pc, #408]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 80016b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	4b64      	ldr	r3, [pc, #400]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a63      	ldr	r2, [pc, #396]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 80016bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016c2:	4b61      	ldr	r3, [pc, #388]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	f023 020f 	bic.w	r2, r3, #15
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	495d      	ldr	r1, [pc, #372]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d059      	beq.n	8001794 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fc10 	bl	8000f04 <HAL_GetTick>
 80016e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e8:	e00a      	b.n	8001700 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ea:	f7ff fc0b 	bl	8000f04 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	; 0x64
 80016f8:	d902      	bls.n	8001700 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	f000 be29 	b.w	8002352 <HAL_RCC_OscConfig+0xe02>
 8001700:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001704:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001708:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800170c:	fa93 f3a3 	rbit	r3, r3
 8001710:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001714:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001718:	fab3 f383 	clz	r3, r3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	095b      	lsrs	r3, r3, #5
 8001720:	b2db      	uxtb	r3, r3
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b01      	cmp	r3, #1
 800172a:	d102      	bne.n	8001732 <HAL_RCC_OscConfig+0x1e2>
 800172c:	4b46      	ldr	r3, [pc, #280]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	e015      	b.n	800175e <HAL_RCC_OscConfig+0x20e>
 8001732:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001736:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800173e:	fa93 f3a3 	rbit	r3, r3
 8001742:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001746:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800174a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800174e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001752:	fa93 f3a3 	rbit	r3, r3
 8001756:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800175a:	4b3b      	ldr	r3, [pc, #236]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001762:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001766:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800176a:	fa92 f2a2 	rbit	r2, r2
 800176e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001772:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001776:	fab2 f282 	clz	r2, r2
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	f042 0220 	orr.w	r2, r2, #32
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	f002 021f 	and.w	r2, r2, #31
 8001786:	2101      	movs	r1, #1
 8001788:	fa01 f202 	lsl.w	r2, r1, r2
 800178c:	4013      	ands	r3, r2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0ab      	beq.n	80016ea <HAL_RCC_OscConfig+0x19a>
 8001792:	e05c      	b.n	800184e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fbb6 	bl	8000f04 <HAL_GetTick>
 8001798:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800179e:	f7ff fbb1 	bl	8000f04 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b64      	cmp	r3, #100	; 0x64
 80017ac:	d902      	bls.n	80017b4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	f000 bdcf 	b.w	8002352 <HAL_RCC_OscConfig+0xe02>
 80017b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017b8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80017c0:	fa93 f3a3 	rbit	r3, r3
 80017c4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80017c8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017cc:	fab3 f383 	clz	r3, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d102      	bne.n	80017e6 <HAL_RCC_OscConfig+0x296>
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	e015      	b.n	8001812 <HAL_RCC_OscConfig+0x2c2>
 80017e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80017f2:	fa93 f3a3 	rbit	r3, r3
 80017f6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80017fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017fe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001802:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001806:	fa93 f3a3 	rbit	r3, r3
 800180a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <HAL_RCC_OscConfig+0x2f8>)
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001816:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800181a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800181e:	fa92 f2a2 	rbit	r2, r2
 8001822:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001826:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800182a:	fab2 f282 	clz	r2, r2
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	f042 0220 	orr.w	r2, r2, #32
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	f002 021f 	and.w	r2, r2, #31
 800183a:	2101      	movs	r1, #1
 800183c:	fa01 f202 	lsl.w	r2, r1, r2
 8001840:	4013      	ands	r3, r2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1ab      	bne.n	800179e <HAL_RCC_OscConfig+0x24e>
 8001846:	e002      	b.n	800184e <HAL_RCC_OscConfig+0x2fe>
 8001848:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 816f 	beq.w	8001b3c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800185e:	4bd0      	ldr	r3, [pc, #832]	; (8001ba0 <HAL_RCC_OscConfig+0x650>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00b      	beq.n	8001882 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800186a:	4bcd      	ldr	r3, [pc, #820]	; (8001ba0 <HAL_RCC_OscConfig+0x650>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b08      	cmp	r3, #8
 8001874:	d16c      	bne.n	8001950 <HAL_RCC_OscConfig+0x400>
 8001876:	4bca      	ldr	r3, [pc, #808]	; (8001ba0 <HAL_RCC_OscConfig+0x650>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d166      	bne.n	8001950 <HAL_RCC_OscConfig+0x400>
 8001882:	2302      	movs	r3, #2
 8001884:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800188c:	fa93 f3a3 	rbit	r3, r3
 8001890:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001894:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001898:	fab3 f383 	clz	r3, r3
 800189c:	b2db      	uxtb	r3, r3
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d102      	bne.n	80018b2 <HAL_RCC_OscConfig+0x362>
 80018ac:	4bbc      	ldr	r3, [pc, #752]	; (8001ba0 <HAL_RCC_OscConfig+0x650>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	e013      	b.n	80018da <HAL_RCC_OscConfig+0x38a>
 80018b2:	2302      	movs	r3, #2
 80018b4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80018bc:	fa93 f3a3 	rbit	r3, r3
 80018c0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80018c4:	2302      	movs	r3, #2
 80018c6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80018ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80018ce:	fa93 f3a3 	rbit	r3, r3
 80018d2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80018d6:	4bb2      	ldr	r3, [pc, #712]	; (8001ba0 <HAL_RCC_OscConfig+0x650>)
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	2202      	movs	r2, #2
 80018dc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80018e0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80018e4:	fa92 f2a2 	rbit	r2, r2
 80018e8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80018ec:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80018f0:	fab2 f282 	clz	r2, r2
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	f042 0220 	orr.w	r2, r2, #32
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	f002 021f 	and.w	r2, r2, #31
 8001900:	2101      	movs	r1, #1
 8001902:	fa01 f202 	lsl.w	r2, r1, r2
 8001906:	4013      	ands	r3, r2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d007      	beq.n	800191c <HAL_RCC_OscConfig+0x3cc>
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d002      	beq.n	800191c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	f000 bd1b 	b.w	8002352 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191c:	4ba0      	ldr	r3, [pc, #640]	; (8001ba0 <HAL_RCC_OscConfig+0x650>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	21f8      	movs	r1, #248	; 0xf8
 800192c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001934:	fa91 f1a1 	rbit	r1, r1
 8001938:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800193c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001940:	fab1 f181 	clz	r1, r1
 8001944:	b2c9      	uxtb	r1, r1
 8001946:	408b      	lsls	r3, r1
 8001948:	4995      	ldr	r1, [pc, #596]	; (8001ba0 <HAL_RCC_OscConfig+0x650>)
 800194a:	4313      	orrs	r3, r2
 800194c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194e:	e0f5      	b.n	8001b3c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 8085 	beq.w	8001a66 <HAL_RCC_OscConfig+0x516>
 800195c:	2301      	movs	r3, #1
 800195e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001966:	fa93 f3a3 	rbit	r3, r3
 800196a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800196e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001972:	fab3 f383 	clz	r3, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800197c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	461a      	mov	r2, r3
 8001984:	2301      	movs	r3, #1
 8001986:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff fabc 	bl	8000f04 <HAL_GetTick>
 800198c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001990:	e00a      	b.n	80019a8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001992:	f7ff fab7 	bl	8000f04 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d902      	bls.n	80019a8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	f000 bcd5 	b.w	8002352 <HAL_RCC_OscConfig+0xe02>
 80019a8:	2302      	movs	r3, #2
 80019aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80019b2:	fa93 f3a3 	rbit	r3, r3
 80019b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80019ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019be:	fab3 f383 	clz	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	095b      	lsrs	r3, r3, #5
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d102      	bne.n	80019d8 <HAL_RCC_OscConfig+0x488>
 80019d2:	4b73      	ldr	r3, [pc, #460]	; (8001ba0 <HAL_RCC_OscConfig+0x650>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	e013      	b.n	8001a00 <HAL_RCC_OscConfig+0x4b0>
 80019d8:	2302      	movs	r3, #2
 80019da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80019ea:	2302      	movs	r3, #2
 80019ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80019f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80019f4:	fa93 f3a3 	rbit	r3, r3
 80019f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80019fc:	4b68      	ldr	r3, [pc, #416]	; (8001ba0 <HAL_RCC_OscConfig+0x650>)
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	2202      	movs	r2, #2
 8001a02:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001a06:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001a0a:	fa92 f2a2 	rbit	r2, r2
 8001a0e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001a12:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001a16:	fab2 f282 	clz	r2, r2
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	f042 0220 	orr.w	r2, r2, #32
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	f002 021f 	and.w	r2, r2, #31
 8001a26:	2101      	movs	r1, #1
 8001a28:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0af      	beq.n	8001992 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a32:	4b5b      	ldr	r3, [pc, #364]	; (8001ba0 <HAL_RCC_OscConfig+0x650>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	21f8      	movs	r1, #248	; 0xf8
 8001a42:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001a4a:	fa91 f1a1 	rbit	r1, r1
 8001a4e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001a52:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001a56:	fab1 f181 	clz	r1, r1
 8001a5a:	b2c9      	uxtb	r1, r1
 8001a5c:	408b      	lsls	r3, r1
 8001a5e:	4950      	ldr	r1, [pc, #320]	; (8001ba0 <HAL_RCC_OscConfig+0x650>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]
 8001a64:	e06a      	b.n	8001b3c <HAL_RCC_OscConfig+0x5ec>
 8001a66:	2301      	movs	r3, #1
 8001a68:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001a70:	fa93 f3a3 	rbit	r3, r3
 8001a74:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001a78:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	2300      	movs	r3, #0
 8001a90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7ff fa37 	bl	8000f04 <HAL_GetTick>
 8001a96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a9c:	f7ff fa32 	bl	8000f04 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d902      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	f000 bc50 	b.w	8002352 <HAL_RCC_OscConfig+0xe02>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001abc:	fa93 f3a3 	rbit	r3, r3
 8001ac0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001ac4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac8:	fab3 f383 	clz	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d102      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x592>
 8001adc:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <HAL_RCC_OscConfig+0x650>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	e013      	b.n	8001b0a <HAL_RCC_OscConfig+0x5ba>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001aec:	fa93 f3a3 	rbit	r3, r3
 8001af0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001af4:	2302      	movs	r3, #2
 8001af6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001afa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001afe:	fa93 f3a3 	rbit	r3, r3
 8001b02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001b06:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <HAL_RCC_OscConfig+0x650>)
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001b10:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001b14:	fa92 f2a2 	rbit	r2, r2
 8001b18:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001b1c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001b20:	fab2 f282 	clz	r2, r2
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	f042 0220 	orr.w	r2, r2, #32
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	f002 021f 	and.w	r2, r2, #31
 8001b30:	2101      	movs	r1, #1
 8001b32:	fa01 f202 	lsl.w	r2, r1, r2
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1af      	bne.n	8001a9c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 80da 	beq.w	8001d00 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d069      	beq.n	8001c2a <HAL_RCC_OscConfig+0x6da>
 8001b56:	2301      	movs	r3, #1
 8001b58:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b6c:	fab3 f383 	clz	r3, r3
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_OscConfig+0x654>)
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b80:	f7ff f9c0 	bl	8000f04 <HAL_GetTick>
 8001b84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b88:	e00e      	b.n	8001ba8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b8a:	f7ff f9bb 	bl	8000f04 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d906      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e3d9      	b.n	8002352 <HAL_RCC_OscConfig+0xe02>
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	10908120 	.word	0x10908120
 8001ba8:	2302      	movs	r3, #2
 8001baa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001bba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	fa93 f2a3 	rbit	r2, r3
 8001bcc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	fa93 f2a3 	rbit	r2, r3
 8001be4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001be8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bea:	4ba5      	ldr	r3, [pc, #660]	; (8001e80 <HAL_RCC_OscConfig+0x930>)
 8001bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001bf2:	2102      	movs	r1, #2
 8001bf4:	6019      	str	r1, [r3, #0]
 8001bf6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	fa93 f1a3 	rbit	r1, r3
 8001c00:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c04:	6019      	str	r1, [r3, #0]
  return result;
 8001c06:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0b0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x63a>
 8001c28:	e06a      	b.n	8001d00 <HAL_RCC_OscConfig+0x7b0>
 8001c2a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	fa93 f2a3 	rbit	r2, r3
 8001c3c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c40:	601a      	str	r2, [r3, #0]
  return result;
 8001c42:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c46:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4b8c      	ldr	r3, [pc, #560]	; (8001e84 <HAL_RCC_OscConfig+0x934>)
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	461a      	mov	r2, r3
 8001c58:	2300      	movs	r3, #0
 8001c5a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5c:	f7ff f952 	bl	8000f04 <HAL_GetTick>
 8001c60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c64:	e009      	b.n	8001c7a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c66:	f7ff f94d 	bl	8000f04 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e36b      	b.n	8002352 <HAL_RCC_OscConfig+0xe02>
 8001c7a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001c7e:	2202      	movs	r2, #2
 8001c80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c82:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	fa93 f2a3 	rbit	r2, r3
 8001c8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001c96:	2202      	movs	r2, #2
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	fa93 f2a3 	rbit	r2, r3
 8001ca4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001cae:	2202      	movs	r2, #2
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	fa93 f2a3 	rbit	r2, r3
 8001cbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cc0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc2:	4b6f      	ldr	r3, [pc, #444]	; (8001e80 <HAL_RCC_OscConfig+0x930>)
 8001cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001cca:	2102      	movs	r1, #2
 8001ccc:	6019      	str	r1, [r3, #0]
 8001cce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	fa93 f1a3 	rbit	r1, r3
 8001cd8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001cdc:	6019      	str	r1, [r3, #0]
  return result;
 8001cde:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	fab3 f383 	clz	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f003 031f 	and.w	r3, r3, #31
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1b2      	bne.n	8001c66 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8158 	beq.w	8001fc0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d16:	4b5a      	ldr	r3, [pc, #360]	; (8001e80 <HAL_RCC_OscConfig+0x930>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d112      	bne.n	8001d48 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	4b57      	ldr	r3, [pc, #348]	; (8001e80 <HAL_RCC_OscConfig+0x930>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	4a56      	ldr	r2, [pc, #344]	; (8001e80 <HAL_RCC_OscConfig+0x930>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	61d3      	str	r3, [r2, #28]
 8001d2e:	4b54      	ldr	r3, [pc, #336]	; (8001e80 <HAL_RCC_OscConfig+0x930>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d36:	f107 0308 	add.w	r3, r7, #8
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	f107 0308 	add.w	r3, r7, #8
 8001d40:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d42:	2301      	movs	r3, #1
 8001d44:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d48:	4b4f      	ldr	r3, [pc, #316]	; (8001e88 <HAL_RCC_OscConfig+0x938>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d11a      	bne.n	8001d8a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d54:	4b4c      	ldr	r3, [pc, #304]	; (8001e88 <HAL_RCC_OscConfig+0x938>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a4b      	ldr	r2, [pc, #300]	; (8001e88 <HAL_RCC_OscConfig+0x938>)
 8001d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d60:	f7ff f8d0 	bl	8000f04 <HAL_GetTick>
 8001d64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d68:	e009      	b.n	8001d7e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6a:	f7ff f8cb 	bl	8000f04 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	; 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e2e9      	b.n	8002352 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7e:	4b42      	ldr	r3, [pc, #264]	; (8001e88 <HAL_RCC_OscConfig+0x938>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0ef      	beq.n	8001d6a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d106      	bne.n	8001da2 <HAL_RCC_OscConfig+0x852>
 8001d94:	4b3a      	ldr	r3, [pc, #232]	; (8001e80 <HAL_RCC_OscConfig+0x930>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4a39      	ldr	r2, [pc, #228]	; (8001e80 <HAL_RCC_OscConfig+0x930>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6213      	str	r3, [r2, #32]
 8001da0:	e02f      	b.n	8001e02 <HAL_RCC_OscConfig+0x8b2>
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10c      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x876>
 8001dac:	4b34      	ldr	r3, [pc, #208]	; (8001e80 <HAL_RCC_OscConfig+0x930>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4a33      	ldr	r2, [pc, #204]	; (8001e80 <HAL_RCC_OscConfig+0x930>)
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	6213      	str	r3, [r2, #32]
 8001db8:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <HAL_RCC_OscConfig+0x930>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4a30      	ldr	r2, [pc, #192]	; (8001e80 <HAL_RCC_OscConfig+0x930>)
 8001dbe:	f023 0304 	bic.w	r3, r3, #4
 8001dc2:	6213      	str	r3, [r2, #32]
 8001dc4:	e01d      	b.n	8001e02 <HAL_RCC_OscConfig+0x8b2>
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	d10c      	bne.n	8001dea <HAL_RCC_OscConfig+0x89a>
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HAL_RCC_OscConfig+0x930>)
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4a2a      	ldr	r2, [pc, #168]	; (8001e80 <HAL_RCC_OscConfig+0x930>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6213      	str	r3, [r2, #32]
 8001ddc:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <HAL_RCC_OscConfig+0x930>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4a27      	ldr	r2, [pc, #156]	; (8001e80 <HAL_RCC_OscConfig+0x930>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6213      	str	r3, [r2, #32]
 8001de8:	e00b      	b.n	8001e02 <HAL_RCC_OscConfig+0x8b2>
 8001dea:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <HAL_RCC_OscConfig+0x930>)
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4a24      	ldr	r2, [pc, #144]	; (8001e80 <HAL_RCC_OscConfig+0x930>)
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	6213      	str	r3, [r2, #32]
 8001df6:	4b22      	ldr	r3, [pc, #136]	; (8001e80 <HAL_RCC_OscConfig+0x930>)
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	4a21      	ldr	r2, [pc, #132]	; (8001e80 <HAL_RCC_OscConfig+0x930>)
 8001dfc:	f023 0304 	bic.w	r3, r3, #4
 8001e00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d06b      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0c:	f7ff f87a 	bl	8000f04 <HAL_GetTick>
 8001e10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e14:	e00b      	b.n	8001e2e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7ff f875 	bl	8000f04 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e291      	b.n	8002352 <HAL_RCC_OscConfig+0xe02>
 8001e2e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001e32:	2202      	movs	r2, #2
 8001e34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	fa93 f2a3 	rbit	r2, r3
 8001e40:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	fa93 f2a3 	rbit	r2, r3
 8001e58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e5c:	601a      	str	r2, [r3, #0]
  return result;
 8001e5e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e64:	fab3 f383 	clz	r3, r3
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f043 0302 	orr.w	r3, r3, #2
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d109      	bne.n	8001e8c <HAL_RCC_OscConfig+0x93c>
 8001e78:	4b01      	ldr	r3, [pc, #4]	; (8001e80 <HAL_RCC_OscConfig+0x930>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	e014      	b.n	8001ea8 <HAL_RCC_OscConfig+0x958>
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	10908120 	.word	0x10908120
 8001e88:	40007000 	.word	0x40007000
 8001e8c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001e90:	2202      	movs	r2, #2
 8001e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	fa93 f2a3 	rbit	r2, r3
 8001e9e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	4bbb      	ldr	r3, [pc, #748]	; (8002194 <HAL_RCC_OscConfig+0xc44>)
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001eac:	2102      	movs	r1, #2
 8001eae:	6011      	str	r1, [r2, #0]
 8001eb0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	fa92 f1a2 	rbit	r1, r2
 8001eba:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001ebe:	6011      	str	r1, [r2, #0]
  return result;
 8001ec0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	fab2 f282 	clz	r2, r2
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	f002 021f 	and.w	r2, r2, #31
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d099      	beq.n	8001e16 <HAL_RCC_OscConfig+0x8c6>
 8001ee2:	e063      	b.n	8001fac <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee4:	f7ff f80e 	bl	8000f04 <HAL_GetTick>
 8001ee8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eec:	e00b      	b.n	8001f06 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eee:	f7ff f809 	bl	8000f04 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e225      	b.n	8002352 <HAL_RCC_OscConfig+0xe02>
 8001f06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	fa93 f2a3 	rbit	r2, r3
 8001f18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f22:	2202      	movs	r2, #2
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	fa93 f2a3 	rbit	r2, r3
 8001f30:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f34:	601a      	str	r2, [r3, #0]
  return result;
 8001f36:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f3a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	f043 0302 	orr.w	r3, r3, #2
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d102      	bne.n	8001f56 <HAL_RCC_OscConfig+0xa06>
 8001f50:	4b90      	ldr	r3, [pc, #576]	; (8002194 <HAL_RCC_OscConfig+0xc44>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	e00d      	b.n	8001f72 <HAL_RCC_OscConfig+0xa22>
 8001f56:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	fa93 f2a3 	rbit	r2, r3
 8001f68:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	4b89      	ldr	r3, [pc, #548]	; (8002194 <HAL_RCC_OscConfig+0xc44>)
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f76:	2102      	movs	r1, #2
 8001f78:	6011      	str	r1, [r2, #0]
 8001f7a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	fa92 f1a2 	rbit	r1, r2
 8001f84:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001f88:	6011      	str	r1, [r2, #0]
  return result;
 8001f8a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	fab2 f282 	clz	r2, r2
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	f002 021f 	and.w	r2, r2, #31
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1a0      	bne.n	8001eee <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fac:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d105      	bne.n	8001fc0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb4:	4b77      	ldr	r3, [pc, #476]	; (8002194 <HAL_RCC_OscConfig+0xc44>)
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	4a76      	ldr	r2, [pc, #472]	; (8002194 <HAL_RCC_OscConfig+0xc44>)
 8001fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 81c2 	beq.w	8002350 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fcc:	4b71      	ldr	r3, [pc, #452]	; (8002194 <HAL_RCC_OscConfig+0xc44>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	f000 819c 	beq.w	8002312 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	f040 8114 	bne.w	800220e <HAL_RCC_OscConfig+0xcbe>
 8001fe6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	fa93 f2a3 	rbit	r2, r3
 8001ffa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ffe:	601a      	str	r2, [r3, #0]
  return result;
 8002000:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002004:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002010:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	461a      	mov	r2, r3
 8002018:	2300      	movs	r3, #0
 800201a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7fe ff72 	bl	8000f04 <HAL_GetTick>
 8002020:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002024:	e009      	b.n	800203a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002026:	f7fe ff6d 	bl	8000f04 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e18b      	b.n	8002352 <HAL_RCC_OscConfig+0xe02>
 800203a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800203e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002042:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	fa93 f2a3 	rbit	r2, r3
 800204e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002052:	601a      	str	r2, [r3, #0]
  return result;
 8002054:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002058:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205a:	fab3 f383 	clz	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	095b      	lsrs	r3, r3, #5
 8002062:	b2db      	uxtb	r3, r3
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b01      	cmp	r3, #1
 800206c:	d102      	bne.n	8002074 <HAL_RCC_OscConfig+0xb24>
 800206e:	4b49      	ldr	r3, [pc, #292]	; (8002194 <HAL_RCC_OscConfig+0xc44>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	e01b      	b.n	80020ac <HAL_RCC_OscConfig+0xb5c>
 8002074:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002078:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800207c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	fa93 f2a3 	rbit	r2, r3
 8002088:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002092:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	fa93 f2a3 	rbit	r2, r3
 80020a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	4b3a      	ldr	r3, [pc, #232]	; (8002194 <HAL_RCC_OscConfig+0xc44>)
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80020b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020b4:	6011      	str	r1, [r2, #0]
 80020b6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	fa92 f1a2 	rbit	r1, r2
 80020c0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80020c4:	6011      	str	r1, [r2, #0]
  return result;
 80020c6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	fab2 f282 	clz	r2, r2
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	f042 0220 	orr.w	r2, r2, #32
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	f002 021f 	and.w	r2, r2, #31
 80020dc:	2101      	movs	r1, #1
 80020de:	fa01 f202 	lsl.w	r2, r1, r2
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d19e      	bne.n	8002026 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e8:	4b2a      	ldr	r3, [pc, #168]	; (8002194 <HAL_RCC_OscConfig+0xc44>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020f0:	1d3b      	adds	r3, r7, #4
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	430b      	orrs	r3, r1
 80020fe:	4925      	ldr	r1, [pc, #148]	; (8002194 <HAL_RCC_OscConfig+0xc44>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
 8002104:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002108:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800210c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	fa93 f2a3 	rbit	r2, r3
 8002118:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800211c:	601a      	str	r2, [r3, #0]
  return result;
 800211e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002122:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002124:	fab3 f383 	clz	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800212e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	461a      	mov	r2, r3
 8002136:	2301      	movs	r3, #1
 8002138:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213a:	f7fe fee3 	bl	8000f04 <HAL_GetTick>
 800213e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002142:	e009      	b.n	8002158 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002144:	f7fe fede 	bl	8000f04 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e0fc      	b.n	8002352 <HAL_RCC_OscConfig+0xe02>
 8002158:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800215c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	fa93 f2a3 	rbit	r2, r3
 800216c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002170:	601a      	str	r2, [r3, #0]
  return result;
 8002172:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002176:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002178:	fab3 f383 	clz	r3, r3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	b2db      	uxtb	r3, r3
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b01      	cmp	r3, #1
 800218a:	d105      	bne.n	8002198 <HAL_RCC_OscConfig+0xc48>
 800218c:	4b01      	ldr	r3, [pc, #4]	; (8002194 <HAL_RCC_OscConfig+0xc44>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	e01e      	b.n	80021d0 <HAL_RCC_OscConfig+0xc80>
 8002192:	bf00      	nop
 8002194:	40021000 	.word	0x40021000
 8002198:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800219c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	fa93 f2a3 	rbit	r2, r3
 80021ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	fa93 f2a3 	rbit	r2, r3
 80021c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	4b63      	ldr	r3, [pc, #396]	; (800235c <HAL_RCC_OscConfig+0xe0c>)
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021d8:	6011      	str	r1, [r2, #0]
 80021da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	fa92 f1a2 	rbit	r1, r2
 80021e4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80021e8:	6011      	str	r1, [r2, #0]
  return result;
 80021ea:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	fab2 f282 	clz	r2, r2
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	f042 0220 	orr.w	r2, r2, #32
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	f002 021f 	and.w	r2, r2, #31
 8002200:	2101      	movs	r1, #1
 8002202:	fa01 f202 	lsl.w	r2, r1, r2
 8002206:	4013      	ands	r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d09b      	beq.n	8002144 <HAL_RCC_OscConfig+0xbf4>
 800220c:	e0a0      	b.n	8002350 <HAL_RCC_OscConfig+0xe00>
 800220e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002212:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002216:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	fa93 f2a3 	rbit	r2, r3
 8002222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002226:	601a      	str	r2, [r3, #0]
  return result;
 8002228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800222c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002238:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	461a      	mov	r2, r3
 8002240:	2300      	movs	r3, #0
 8002242:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7fe fe5e 	bl	8000f04 <HAL_GetTick>
 8002248:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224c:	e009      	b.n	8002262 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224e:	f7fe fe59 	bl	8000f04 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e077      	b.n	8002352 <HAL_RCC_OscConfig+0xe02>
 8002262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002266:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800226a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	fa93 f2a3 	rbit	r2, r3
 8002276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227a:	601a      	str	r2, [r3, #0]
  return result;
 800227c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002280:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	095b      	lsrs	r3, r3, #5
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b01      	cmp	r3, #1
 8002294:	d102      	bne.n	800229c <HAL_RCC_OscConfig+0xd4c>
 8002296:	4b31      	ldr	r3, [pc, #196]	; (800235c <HAL_RCC_OscConfig+0xe0c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	e01b      	b.n	80022d4 <HAL_RCC_OscConfig+0xd84>
 800229c:	f107 0320 	add.w	r3, r7, #32
 80022a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	f107 0320 	add.w	r3, r7, #32
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	fa93 f2a3 	rbit	r2, r3
 80022b0:	f107 031c 	add.w	r3, r7, #28
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	f107 0318 	add.w	r3, r7, #24
 80022ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	f107 0318 	add.w	r3, r7, #24
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	fa93 f2a3 	rbit	r2, r3
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	4b22      	ldr	r3, [pc, #136]	; (800235c <HAL_RCC_OscConfig+0xe0c>)
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	f107 0210 	add.w	r2, r7, #16
 80022d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022dc:	6011      	str	r1, [r2, #0]
 80022de:	f107 0210 	add.w	r2, r7, #16
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	fa92 f1a2 	rbit	r1, r2
 80022e8:	f107 020c 	add.w	r2, r7, #12
 80022ec:	6011      	str	r1, [r2, #0]
  return result;
 80022ee:	f107 020c 	add.w	r2, r7, #12
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	fab2 f282 	clz	r2, r2
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	f042 0220 	orr.w	r2, r2, #32
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	f002 021f 	and.w	r2, r2, #31
 8002304:	2101      	movs	r1, #1
 8002306:	fa01 f202 	lsl.w	r2, r1, r2
 800230a:	4013      	ands	r3, r2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d19e      	bne.n	800224e <HAL_RCC_OscConfig+0xcfe>
 8002310:	e01e      	b.n	8002350 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e018      	b.n	8002352 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002320:	4b0e      	ldr	r3, [pc, #56]	; (800235c <HAL_RCC_OscConfig+0xe0c>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002328:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800232c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	429a      	cmp	r2, r3
 8002338:	d108      	bne.n	800234c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800233a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800233e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000

08002360 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b09e      	sub	sp, #120	; 0x78
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e162      	b.n	800263e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b90      	ldr	r3, [pc, #576]	; (80025bc <HAL_RCC_ClockConfig+0x25c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d910      	bls.n	80023a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b8d      	ldr	r3, [pc, #564]	; (80025bc <HAL_RCC_ClockConfig+0x25c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 0207 	bic.w	r2, r3, #7
 800238e:	498b      	ldr	r1, [pc, #556]	; (80025bc <HAL_RCC_ClockConfig+0x25c>)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b89      	ldr	r3, [pc, #548]	; (80025bc <HAL_RCC_ClockConfig+0x25c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e14a      	b.n	800263e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b4:	4b82      	ldr	r3, [pc, #520]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	497f      	ldr	r1, [pc, #508]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 80dc 	beq.w	800258c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d13c      	bne.n	8002456 <HAL_RCC_ClockConfig+0xf6>
 80023dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023e4:	fa93 f3a3 	rbit	r3, r3
 80023e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80023ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d102      	bne.n	8002406 <HAL_RCC_ClockConfig+0xa6>
 8002400:	4b6f      	ldr	r3, [pc, #444]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	e00f      	b.n	8002426 <HAL_RCC_ClockConfig+0xc6>
 8002406:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800240a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	667b      	str	r3, [r7, #100]	; 0x64
 8002414:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002418:	663b      	str	r3, [r7, #96]	; 0x60
 800241a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002422:	4b67      	ldr	r3, [pc, #412]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800242a:	65ba      	str	r2, [r7, #88]	; 0x58
 800242c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800242e:	fa92 f2a2 	rbit	r2, r2
 8002432:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002434:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002436:	fab2 f282 	clz	r2, r2
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	f042 0220 	orr.w	r2, r2, #32
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	f002 021f 	and.w	r2, r2, #31
 8002446:	2101      	movs	r1, #1
 8002448:	fa01 f202 	lsl.w	r2, r1, r2
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d17b      	bne.n	800254a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e0f3      	b.n	800263e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d13c      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x178>
 800245e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002462:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800246c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	095b      	lsrs	r3, r3, #5
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b01      	cmp	r3, #1
 8002480:	d102      	bne.n	8002488 <HAL_RCC_ClockConfig+0x128>
 8002482:	4b4f      	ldr	r3, [pc, #316]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	e00f      	b.n	80024a8 <HAL_RCC_ClockConfig+0x148>
 8002488:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800248c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	647b      	str	r3, [r7, #68]	; 0x44
 8002496:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800249a:	643b      	str	r3, [r7, #64]	; 0x40
 800249c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024a4:	4b46      	ldr	r3, [pc, #280]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80024ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024b0:	fa92 f2a2 	rbit	r2, r2
 80024b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80024b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024b8:	fab2 f282 	clz	r2, r2
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	f042 0220 	orr.w	r2, r2, #32
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	f002 021f 	and.w	r2, r2, #31
 80024c8:	2101      	movs	r1, #1
 80024ca:	fa01 f202 	lsl.w	r2, r1, r2
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d13a      	bne.n	800254a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0b2      	b.n	800263e <HAL_RCC_ClockConfig+0x2de>
 80024d8:	2302      	movs	r3, #2
 80024da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	095b      	lsrs	r3, r3, #5
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d102      	bne.n	8002500 <HAL_RCC_ClockConfig+0x1a0>
 80024fa:	4b31      	ldr	r3, [pc, #196]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	e00d      	b.n	800251c <HAL_RCC_ClockConfig+0x1bc>
 8002500:	2302      	movs	r3, #2
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
 800250c:	2302      	movs	r3, #2
 800250e:	623b      	str	r3, [r7, #32]
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	4b29      	ldr	r3, [pc, #164]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	2202      	movs	r2, #2
 800251e:	61ba      	str	r2, [r7, #24]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	fa92 f2a2 	rbit	r2, r2
 8002526:	617a      	str	r2, [r7, #20]
  return result;
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	fab2 f282 	clz	r2, r2
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	f042 0220 	orr.w	r2, r2, #32
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	f002 021f 	and.w	r2, r2, #31
 800253a:	2101      	movs	r1, #1
 800253c:	fa01 f202 	lsl.w	r2, r1, r2
 8002540:	4013      	ands	r3, r2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e079      	b.n	800263e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254a:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	491a      	ldr	r1, [pc, #104]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800255c:	f7fe fcd2 	bl	8000f04 <HAL_GetTick>
 8002560:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	e00a      	b.n	800257a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002564:	f7fe fcce 	bl	8000f04 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e061      	b.n	800263e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 020c 	and.w	r2, r3, #12
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	429a      	cmp	r2, r3
 800258a:	d1eb      	bne.n	8002564 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_ClockConfig+0x25c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d214      	bcs.n	80025c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <HAL_RCC_ClockConfig+0x25c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 0207 	bic.w	r2, r3, #7
 80025a2:	4906      	ldr	r1, [pc, #24]	; (80025bc <HAL_RCC_ClockConfig+0x25c>)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b04      	ldr	r3, [pc, #16]	; (80025bc <HAL_RCC_ClockConfig+0x25c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e040      	b.n	800263e <HAL_RCC_ClockConfig+0x2de>
 80025bc:	40022000 	.word	0x40022000
 80025c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_RCC_ClockConfig+0x2e8>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	491a      	ldr	r1, [pc, #104]	; (8002648 <HAL_RCC_ClockConfig+0x2e8>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_RCC_ClockConfig+0x2e8>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4912      	ldr	r1, [pc, #72]	; (8002648 <HAL_RCC_ClockConfig+0x2e8>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002602:	f000 f829 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 8002606:	4601      	mov	r1, r0
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <HAL_RCC_ClockConfig+0x2e8>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002610:	22f0      	movs	r2, #240	; 0xf0
 8002612:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	fa92 f2a2 	rbit	r2, r2
 800261a:	60fa      	str	r2, [r7, #12]
  return result;
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	fab2 f282 	clz	r2, r2
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	40d3      	lsrs	r3, r2
 8002626:	4a09      	ldr	r2, [pc, #36]	; (800264c <HAL_RCC_ClockConfig+0x2ec>)
 8002628:	5cd3      	ldrb	r3, [r2, r3]
 800262a:	fa21 f303 	lsr.w	r3, r1, r3
 800262e:	4a08      	ldr	r2, [pc, #32]	; (8002650 <HAL_RCC_ClockConfig+0x2f0>)
 8002630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002632:	4b08      	ldr	r3, [pc, #32]	; (8002654 <HAL_RCC_ClockConfig+0x2f4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fc20 	bl	8000e7c <HAL_InitTick>
  
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3778      	adds	r7, #120	; 0x78
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000
 800264c:	0800603c 	.word	0x0800603c
 8002650:	20000000 	.word	0x20000000
 8002654:	20000004 	.word	0x20000004

08002658 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002658:	b480      	push	{r7}
 800265a:	b08b      	sub	sp, #44	; 0x2c
 800265c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
 8002662:	2300      	movs	r3, #0
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	2300      	movs	r3, #0
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002672:	4b29      	ldr	r3, [pc, #164]	; (8002718 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b04      	cmp	r3, #4
 8002680:	d002      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0x30>
 8002682:	2b08      	cmp	r3, #8
 8002684:	d003      	beq.n	800268e <HAL_RCC_GetSysClockFreq+0x36>
 8002686:	e03c      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002688:	4b24      	ldr	r3, [pc, #144]	; (800271c <HAL_RCC_GetSysClockFreq+0xc4>)
 800268a:	623b      	str	r3, [r7, #32]
      break;
 800268c:	e03c      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002694:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002698:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	fa92 f2a2 	rbit	r2, r2
 80026a0:	607a      	str	r2, [r7, #4]
  return result;
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	fab2 f282 	clz	r2, r2
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	40d3      	lsrs	r3, r2
 80026ac:	4a1c      	ldr	r2, [pc, #112]	; (8002720 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026ae:	5cd3      	ldrb	r3, [r2, r3]
 80026b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80026b2:	4b19      	ldr	r3, [pc, #100]	; (8002718 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	220f      	movs	r2, #15
 80026bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	fa92 f2a2 	rbit	r2, r2
 80026c4:	60fa      	str	r2, [r7, #12]
  return result;
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	fab2 f282 	clz	r2, r2
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	40d3      	lsrs	r3, r2
 80026d0:	4a14      	ldr	r2, [pc, #80]	; (8002724 <HAL_RCC_GetSysClockFreq+0xcc>)
 80026d2:	5cd3      	ldrb	r3, [r2, r3]
 80026d4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026e0:	4a0e      	ldr	r2, [pc, #56]	; (800271c <HAL_RCC_GetSysClockFreq+0xc4>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	fb02 f303 	mul.w	r3, r2, r3
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
 80026f0:	e004      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	4a0c      	ldr	r2, [pc, #48]	; (8002728 <HAL_RCC_GetSysClockFreq+0xd0>)
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	623b      	str	r3, [r7, #32]
      break;
 8002700:	e002      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002704:	623b      	str	r3, [r7, #32]
      break;
 8002706:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002708:	6a3b      	ldr	r3, [r7, #32]
}
 800270a:	4618      	mov	r0, r3
 800270c:	372c      	adds	r7, #44	; 0x2c
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	007a1200 	.word	0x007a1200
 8002720:	08006054 	.word	0x08006054
 8002724:	08006064 	.word	0x08006064
 8002728:	003d0900 	.word	0x003d0900

0800272c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <HAL_RCC_GetHCLKFreq+0x14>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000000 	.word	0x20000000

08002744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800274a:	f7ff ffef 	bl	800272c <HAL_RCC_GetHCLKFreq>
 800274e:	4601      	mov	r1, r0
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002758:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800275c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	fa92 f2a2 	rbit	r2, r2
 8002764:	603a      	str	r2, [r7, #0]
  return result;
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	fab2 f282 	clz	r2, r2
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	40d3      	lsrs	r3, r2
 8002770:	4a04      	ldr	r2, [pc, #16]	; (8002784 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002772:	5cd3      	ldrb	r3, [r2, r3]
 8002774:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000
 8002784:	0800604c 	.word	0x0800604c

08002788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800278e:	f7ff ffcd 	bl	800272c <HAL_RCC_GetHCLKFreq>
 8002792:	4601      	mov	r1, r0
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800279c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80027a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	fa92 f2a2 	rbit	r2, r2
 80027a8:	603a      	str	r2, [r7, #0]
  return result;
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	fab2 f282 	clz	r2, r2
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	40d3      	lsrs	r3, r2
 80027b4:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80027b6:	5cd3      	ldrb	r3, [r2, r3]
 80027b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000
 80027c8:	0800604c 	.word	0x0800604c

080027cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b092      	sub	sp, #72	; 0x48
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80027dc:	2300      	movs	r3, #0
 80027de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 80d4 	beq.w	8002998 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f0:	4b4e      	ldr	r3, [pc, #312]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10e      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fc:	4b4b      	ldr	r3, [pc, #300]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	4a4a      	ldr	r2, [pc, #296]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002806:	61d3      	str	r3, [r2, #28]
 8002808:	4b48      	ldr	r3, [pc, #288]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002814:	2301      	movs	r3, #1
 8002816:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281a:	4b45      	ldr	r3, [pc, #276]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d118      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002826:	4b42      	ldr	r3, [pc, #264]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a41      	ldr	r2, [pc, #260]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800282c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002830:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002832:	f7fe fb67 	bl	8000f04 <HAL_GetTick>
 8002836:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002838:	e008      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283a:	f7fe fb63 	bl	8000f04 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b64      	cmp	r3, #100	; 0x64
 8002846:	d901      	bls.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e169      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284c:	4b38      	ldr	r3, [pc, #224]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002858:	4b34      	ldr	r3, [pc, #208]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002860:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 8084 	beq.w	8002972 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002872:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002874:	429a      	cmp	r2, r3
 8002876:	d07c      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002878:	4b2c      	ldr	r3, [pc, #176]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002880:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002882:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002886:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002892:	fab3 f383 	clz	r3, r3
 8002896:	b2db      	uxtb	r3, r3
 8002898:	461a      	mov	r2, r3
 800289a:	4b26      	ldr	r3, [pc, #152]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	461a      	mov	r2, r3
 80028a2:	2301      	movs	r3, #1
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ae:	fa93 f3a3 	rbit	r3, r3
 80028b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	461a      	mov	r2, r3
 80028be:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	461a      	mov	r2, r3
 80028c6:	2300      	movs	r3, #0
 80028c8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028ca:	4a18      	ldr	r2, [pc, #96]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d04b      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028da:	f7fe fb13 	bl	8000f04 <HAL_GetTick>
 80028de:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e0:	e00a      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e2:	f7fe fb0f 	bl	8000f04 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e113      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80028f8:	2302      	movs	r3, #2
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
 8002904:	2302      	movs	r3, #2
 8002906:	623b      	str	r3, [r7, #32]
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	fa93 f3a3 	rbit	r3, r3
 800290e:	61fb      	str	r3, [r7, #28]
  return result;
 8002910:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	b2db      	uxtb	r3, r3
 8002918:	095b      	lsrs	r3, r3, #5
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f043 0302 	orr.w	r3, r3, #2
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d108      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002926:	4b01      	ldr	r3, [pc, #4]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	e00d      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800292c:	40021000 	.word	0x40021000
 8002930:	40007000 	.word	0x40007000
 8002934:	10908100 	.word	0x10908100
 8002938:	2302      	movs	r3, #2
 800293a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	4b78      	ldr	r3, [pc, #480]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	2202      	movs	r2, #2
 800294a:	613a      	str	r2, [r7, #16]
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	fa92 f2a2 	rbit	r2, r2
 8002952:	60fa      	str	r2, [r7, #12]
  return result;
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	fab2 f282 	clz	r2, r2
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	f002 021f 	and.w	r2, r2, #31
 8002966:	2101      	movs	r1, #1
 8002968:	fa01 f202 	lsl.w	r2, r1, r2
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0b7      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002972:	4b6d      	ldr	r3, [pc, #436]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	496a      	ldr	r1, [pc, #424]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002980:	4313      	orrs	r3, r2
 8002982:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002984:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002988:	2b01      	cmp	r3, #1
 800298a:	d105      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800298c:	4b66      	ldr	r3, [pc, #408]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	4a65      	ldr	r2, [pc, #404]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002996:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029a4:	4b60      	ldr	r3, [pc, #384]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	f023 0203 	bic.w	r2, r3, #3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	495d      	ldr	r1, [pc, #372]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d008      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029c2:	4b59      	ldr	r3, [pc, #356]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	4956      	ldr	r1, [pc, #344]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029e0:	4b51      	ldr	r3, [pc, #324]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	494e      	ldr	r1, [pc, #312]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029fe:	4b4a      	ldr	r3, [pc, #296]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f023 0210 	bic.w	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	4947      	ldr	r1, [pc, #284]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002a1c:	4b42      	ldr	r3, [pc, #264]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a28:	493f      	ldr	r1, [pc, #252]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d008      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a3a:	4b3b      	ldr	r3, [pc, #236]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f023 0220 	bic.w	r2, r3, #32
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4938      	ldr	r1, [pc, #224]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a58:	4b33      	ldr	r3, [pc, #204]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	4930      	ldr	r1, [pc, #192]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a76:	4b2c      	ldr	r3, [pc, #176]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	4929      	ldr	r1, [pc, #164]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a94:	4b24      	ldr	r3, [pc, #144]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	4921      	ldr	r1, [pc, #132]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d008      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ab2:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	491a      	ldr	r1, [pc, #104]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002ad0:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	4912      	ldr	r1, [pc, #72]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d008      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	490b      	ldr	r1, [pc, #44]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b18:	4903      	ldr	r1, [pc, #12]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3748      	adds	r7, #72	; 0x48
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000

08002b2c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e073      	b.n	8002c2a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	7f5b      	ldrb	r3, [r3, #29]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d105      	bne.n	8002b58 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fd fe9c 	bl	8000890 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b10      	cmp	r3, #16
 8002b6a:	d055      	beq.n	8002c18 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	22ca      	movs	r2, #202	; 0xca
 8002b72:	625a      	str	r2, [r3, #36]	; 0x24
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2253      	movs	r2, #83	; 0x53
 8002b7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f87f 	bl	8002c80 <RTC_EnterInitMode>
 8002b82:	4603      	mov	r3, r0
 8002b84:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d12c      	bne.n	8002be6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b9e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6899      	ldr	r1, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68d2      	ldr	r2, [r2, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6919      	ldr	r1, [r3, #16]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	041a      	lsls	r2, r3, #16
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f886 	bl	8002cee <RTC_ExitInitMode>
 8002be2:	4603      	mov	r3, r0
 8002be4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d110      	bne.n	8002c0e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bfa:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	22ff      	movs	r2, #255	; 0xff
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24
 8002c16:	e001      	b.n	8002c1c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d102      	bne.n	8002c28 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a0d      	ldr	r2, [pc, #52]	; (8002c7c <HAL_RTC_WaitForSynchro+0x48>)
 8002c46:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c48:	f7fe f95c 	bl	8000f04 <HAL_GetTick>
 8002c4c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c4e:	e009      	b.n	8002c64 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c50:	f7fe f958 	bl	8000f04 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c5e:	d901      	bls.n	8002c64 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e007      	b.n	8002c74 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f003 0320 	and.w	r3, r3, #32
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0ee      	beq.n	8002c50 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	0001ff5f 	.word	0x0001ff5f

08002c80 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d122      	bne.n	8002ce4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cac:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cae:	f7fe f929 	bl	8000f04 <HAL_GetTick>
 8002cb2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002cb4:	e00c      	b.n	8002cd0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002cb6:	f7fe f925 	bl	8000f04 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cc4:	d904      	bls.n	8002cd0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2204      	movs	r2, #4
 8002cca:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d102      	bne.n	8002ce4 <RTC_EnterInitMode+0x64>
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d1e8      	bne.n	8002cb6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b084      	sub	sp, #16
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d08:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10a      	bne.n	8002d2e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff ff8b 	bl	8002c34 <HAL_RTC_WaitForSynchro>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d004      	beq.n	8002d2e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2204      	movs	r2, #4
 8002d28:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e049      	b.n	8002dde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fd fdbc 	bl	80008dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3304      	adds	r3, #4
 8002d74:	4619      	mov	r1, r3
 8002d76:	4610      	mov	r0, r2
 8002d78:	f000 fab0 	bl	80032dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d001      	beq.n	8002e00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e04a      	b.n	8002e96 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a21      	ldr	r2, [pc, #132]	; (8002ea4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d018      	beq.n	8002e54 <HAL_TIM_Base_Start_IT+0x6c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2a:	d013      	beq.n	8002e54 <HAL_TIM_Base_Start_IT+0x6c>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00e      	beq.n	8002e54 <HAL_TIM_Base_Start_IT+0x6c>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1c      	ldr	r2, [pc, #112]	; (8002eac <HAL_TIM_Base_Start_IT+0xc4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d009      	beq.n	8002e54 <HAL_TIM_Base_Start_IT+0x6c>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1a      	ldr	r2, [pc, #104]	; (8002eb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d004      	beq.n	8002e54 <HAL_TIM_Base_Start_IT+0x6c>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d115      	bne.n	8002e80 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b06      	cmp	r3, #6
 8002e64:	d015      	beq.n	8002e92 <HAL_TIM_Base_Start_IT+0xaa>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6c:	d011      	beq.n	8002e92 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 0201 	orr.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e7e:	e008      	b.n	8002e92 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	e000      	b.n	8002e94 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40012c00 	.word	0x40012c00
 8002ea8:	40000400 	.word	0x40000400
 8002eac:	40000800 	.word	0x40000800
 8002eb0:	40013400 	.word	0x40013400
 8002eb4:	40014000 	.word	0x40014000
 8002eb8:	00010007 	.word	0x00010007

08002ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d122      	bne.n	8002f18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d11b      	bne.n	8002f18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0202 	mvn.w	r2, #2
 8002ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f9ce 	bl	80032a0 <HAL_TIM_IC_CaptureCallback>
 8002f04:	e005      	b.n	8002f12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f9c0 	bl	800328c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f9d1 	bl	80032b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d122      	bne.n	8002f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d11b      	bne.n	8002f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f06f 0204 	mvn.w	r2, #4
 8002f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2202      	movs	r2, #2
 8002f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f9a4 	bl	80032a0 <HAL_TIM_IC_CaptureCallback>
 8002f58:	e005      	b.n	8002f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f996 	bl	800328c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f9a7 	bl	80032b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d122      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d11b      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0208 	mvn.w	r2, #8
 8002f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2204      	movs	r2, #4
 8002f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f97a 	bl	80032a0 <HAL_TIM_IC_CaptureCallback>
 8002fac:	e005      	b.n	8002fba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f96c 	bl	800328c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f97d 	bl	80032b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	2b10      	cmp	r3, #16
 8002fcc:	d122      	bne.n	8003014 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0310 	and.w	r3, r3, #16
 8002fd8:	2b10      	cmp	r3, #16
 8002fda:	d11b      	bne.n	8003014 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0210 	mvn.w	r2, #16
 8002fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2208      	movs	r2, #8
 8002fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f950 	bl	80032a0 <HAL_TIM_IC_CaptureCallback>
 8003000:	e005      	b.n	800300e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f942 	bl	800328c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f953 	bl	80032b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b01      	cmp	r3, #1
 8003020:	d10e      	bne.n	8003040 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b01      	cmp	r3, #1
 800302e:	d107      	bne.n	8003040 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0201 	mvn.w	r2, #1
 8003038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fd f918 	bl	8000270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304a:	2b80      	cmp	r3, #128	; 0x80
 800304c:	d10e      	bne.n	800306c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003058:	2b80      	cmp	r3, #128	; 0x80
 800305a:	d107      	bne.n	800306c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 faec 	bl	8003644 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800307a:	d10e      	bne.n	800309a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003086:	2b80      	cmp	r3, #128	; 0x80
 8003088:	d107      	bne.n	800309a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fadf 	bl	8003658 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a4:	2b40      	cmp	r3, #64	; 0x40
 80030a6:	d10e      	bne.n	80030c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b2:	2b40      	cmp	r3, #64	; 0x40
 80030b4:	d107      	bne.n	80030c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f901 	bl	80032c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d10e      	bne.n	80030f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b20      	cmp	r3, #32
 80030e0:	d107      	bne.n	80030f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f06f 0220 	mvn.w	r2, #32
 80030ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fa9f 	bl	8003630 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_TIM_ConfigClockSource+0x1c>
 8003112:	2302      	movs	r3, #2
 8003114:	e0b6      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x18a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2202      	movs	r2, #2
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003134:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003138:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003140:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003152:	d03e      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0xd8>
 8003154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003158:	f200 8087 	bhi.w	800326a <HAL_TIM_ConfigClockSource+0x170>
 800315c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003160:	f000 8086 	beq.w	8003270 <HAL_TIM_ConfigClockSource+0x176>
 8003164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003168:	d87f      	bhi.n	800326a <HAL_TIM_ConfigClockSource+0x170>
 800316a:	2b70      	cmp	r3, #112	; 0x70
 800316c:	d01a      	beq.n	80031a4 <HAL_TIM_ConfigClockSource+0xaa>
 800316e:	2b70      	cmp	r3, #112	; 0x70
 8003170:	d87b      	bhi.n	800326a <HAL_TIM_ConfigClockSource+0x170>
 8003172:	2b60      	cmp	r3, #96	; 0x60
 8003174:	d050      	beq.n	8003218 <HAL_TIM_ConfigClockSource+0x11e>
 8003176:	2b60      	cmp	r3, #96	; 0x60
 8003178:	d877      	bhi.n	800326a <HAL_TIM_ConfigClockSource+0x170>
 800317a:	2b50      	cmp	r3, #80	; 0x50
 800317c:	d03c      	beq.n	80031f8 <HAL_TIM_ConfigClockSource+0xfe>
 800317e:	2b50      	cmp	r3, #80	; 0x50
 8003180:	d873      	bhi.n	800326a <HAL_TIM_ConfigClockSource+0x170>
 8003182:	2b40      	cmp	r3, #64	; 0x40
 8003184:	d058      	beq.n	8003238 <HAL_TIM_ConfigClockSource+0x13e>
 8003186:	2b40      	cmp	r3, #64	; 0x40
 8003188:	d86f      	bhi.n	800326a <HAL_TIM_ConfigClockSource+0x170>
 800318a:	2b30      	cmp	r3, #48	; 0x30
 800318c:	d064      	beq.n	8003258 <HAL_TIM_ConfigClockSource+0x15e>
 800318e:	2b30      	cmp	r3, #48	; 0x30
 8003190:	d86b      	bhi.n	800326a <HAL_TIM_ConfigClockSource+0x170>
 8003192:	2b20      	cmp	r3, #32
 8003194:	d060      	beq.n	8003258 <HAL_TIM_ConfigClockSource+0x15e>
 8003196:	2b20      	cmp	r3, #32
 8003198:	d867      	bhi.n	800326a <HAL_TIM_ConfigClockSource+0x170>
 800319a:	2b00      	cmp	r3, #0
 800319c:	d05c      	beq.n	8003258 <HAL_TIM_ConfigClockSource+0x15e>
 800319e:	2b10      	cmp	r3, #16
 80031a0:	d05a      	beq.n	8003258 <HAL_TIM_ConfigClockSource+0x15e>
 80031a2:	e062      	b.n	800326a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	6899      	ldr	r1, [r3, #8]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f000 f99c 	bl	80034f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	609a      	str	r2, [r3, #8]
      break;
 80031d0:	e04f      	b.n	8003272 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	6899      	ldr	r1, [r3, #8]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f000 f985 	bl	80034f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031f4:	609a      	str	r2, [r3, #8]
      break;
 80031f6:	e03c      	b.n	8003272 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6818      	ldr	r0, [r3, #0]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	461a      	mov	r2, r3
 8003206:	f000 f8f9 	bl	80033fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2150      	movs	r1, #80	; 0x50
 8003210:	4618      	mov	r0, r3
 8003212:	f000 f952 	bl	80034ba <TIM_ITRx_SetConfig>
      break;
 8003216:	e02c      	b.n	8003272 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	461a      	mov	r2, r3
 8003226:	f000 f918 	bl	800345a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2160      	movs	r1, #96	; 0x60
 8003230:	4618      	mov	r0, r3
 8003232:	f000 f942 	bl	80034ba <TIM_ITRx_SetConfig>
      break;
 8003236:	e01c      	b.n	8003272 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	461a      	mov	r2, r3
 8003246:	f000 f8d9 	bl	80033fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2140      	movs	r1, #64	; 0x40
 8003250:	4618      	mov	r0, r3
 8003252:	f000 f932 	bl	80034ba <TIM_ITRx_SetConfig>
      break;
 8003256:	e00c      	b.n	8003272 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4619      	mov	r1, r3
 8003262:	4610      	mov	r0, r2
 8003264:	f000 f929 	bl	80034ba <TIM_ITRx_SetConfig>
      break;
 8003268:	e003      	b.n	8003272 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]
      break;
 800326e:	e000      	b.n	8003272 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003270:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003282:	7bfb      	ldrb	r3, [r7, #15]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a3c      	ldr	r2, [pc, #240]	; (80033e0 <TIM_Base_SetConfig+0x104>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00f      	beq.n	8003314 <TIM_Base_SetConfig+0x38>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fa:	d00b      	beq.n	8003314 <TIM_Base_SetConfig+0x38>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a39      	ldr	r2, [pc, #228]	; (80033e4 <TIM_Base_SetConfig+0x108>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d007      	beq.n	8003314 <TIM_Base_SetConfig+0x38>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a38      	ldr	r2, [pc, #224]	; (80033e8 <TIM_Base_SetConfig+0x10c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <TIM_Base_SetConfig+0x38>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a37      	ldr	r2, [pc, #220]	; (80033ec <TIM_Base_SetConfig+0x110>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d108      	bne.n	8003326 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a2d      	ldr	r2, [pc, #180]	; (80033e0 <TIM_Base_SetConfig+0x104>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d01b      	beq.n	8003366 <TIM_Base_SetConfig+0x8a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003334:	d017      	beq.n	8003366 <TIM_Base_SetConfig+0x8a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a2a      	ldr	r2, [pc, #168]	; (80033e4 <TIM_Base_SetConfig+0x108>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d013      	beq.n	8003366 <TIM_Base_SetConfig+0x8a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a29      	ldr	r2, [pc, #164]	; (80033e8 <TIM_Base_SetConfig+0x10c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00f      	beq.n	8003366 <TIM_Base_SetConfig+0x8a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a28      	ldr	r2, [pc, #160]	; (80033ec <TIM_Base_SetConfig+0x110>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00b      	beq.n	8003366 <TIM_Base_SetConfig+0x8a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a27      	ldr	r2, [pc, #156]	; (80033f0 <TIM_Base_SetConfig+0x114>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d007      	beq.n	8003366 <TIM_Base_SetConfig+0x8a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a26      	ldr	r2, [pc, #152]	; (80033f4 <TIM_Base_SetConfig+0x118>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d003      	beq.n	8003366 <TIM_Base_SetConfig+0x8a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a25      	ldr	r2, [pc, #148]	; (80033f8 <TIM_Base_SetConfig+0x11c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d108      	bne.n	8003378 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a10      	ldr	r2, [pc, #64]	; (80033e0 <TIM_Base_SetConfig+0x104>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00f      	beq.n	80033c4 <TIM_Base_SetConfig+0xe8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a11      	ldr	r2, [pc, #68]	; (80033ec <TIM_Base_SetConfig+0x110>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00b      	beq.n	80033c4 <TIM_Base_SetConfig+0xe8>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a10      	ldr	r2, [pc, #64]	; (80033f0 <TIM_Base_SetConfig+0x114>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d007      	beq.n	80033c4 <TIM_Base_SetConfig+0xe8>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a0f      	ldr	r2, [pc, #60]	; (80033f4 <TIM_Base_SetConfig+0x118>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d003      	beq.n	80033c4 <TIM_Base_SetConfig+0xe8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a0e      	ldr	r2, [pc, #56]	; (80033f8 <TIM_Base_SetConfig+0x11c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d103      	bne.n	80033cc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	615a      	str	r2, [r3, #20]
}
 80033d2:	bf00      	nop
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40012c00 	.word	0x40012c00
 80033e4:	40000400 	.word	0x40000400
 80033e8:	40000800 	.word	0x40000800
 80033ec:	40013400 	.word	0x40013400
 80033f0:	40014000 	.word	0x40014000
 80033f4:	40014400 	.word	0x40014400
 80033f8:	40014800 	.word	0x40014800

080033fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f023 0201 	bic.w	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f023 030a 	bic.w	r3, r3, #10
 8003438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	621a      	str	r2, [r3, #32]
}
 800344e:	bf00      	nop
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800345a:	b480      	push	{r7}
 800345c:	b087      	sub	sp, #28
 800345e:	af00      	add	r7, sp, #0
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f023 0210 	bic.w	r2, r3, #16
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003484:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	031b      	lsls	r3, r3, #12
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003496:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	621a      	str	r2, [r3, #32]
}
 80034ae:	bf00      	nop
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b085      	sub	sp, #20
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f043 0307 	orr.w	r3, r3, #7
 80034dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	609a      	str	r2, [r3, #8]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800350a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	021a      	lsls	r2, r3, #8
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	431a      	orrs	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4313      	orrs	r3, r2
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	609a      	str	r2, [r3, #8]
}
 8003524:	bf00      	nop
 8003526:	371c      	adds	r7, #28
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003544:	2302      	movs	r3, #2
 8003546:	e063      	b.n	8003610 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a2b      	ldr	r2, [pc, #172]	; (800361c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d004      	beq.n	800357c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a2a      	ldr	r2, [pc, #168]	; (8003620 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d108      	bne.n	800358e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003582:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003594:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a1b      	ldr	r2, [pc, #108]	; (800361c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d018      	beq.n	80035e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ba:	d013      	beq.n	80035e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a18      	ldr	r2, [pc, #96]	; (8003624 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00e      	beq.n	80035e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a17      	ldr	r2, [pc, #92]	; (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d009      	beq.n	80035e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a12      	ldr	r2, [pc, #72]	; (8003620 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d004      	beq.n	80035e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a13      	ldr	r2, [pc, #76]	; (800362c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d10c      	bne.n	80035fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	40012c00 	.word	0x40012c00
 8003620:	40013400 	.word	0x40013400
 8003624:	40000400 	.word	0x40000400
 8003628:	40000800 	.word	0x40000800
 800362c:	40014000 	.word	0x40014000

08003630 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e040      	b.n	8003700 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d106      	bne.n	8003694 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7fd f948 	bl	8000924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2224      	movs	r2, #36	; 0x24
 8003698:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0201 	bic.w	r2, r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fc00 	bl	8003eb0 <UART_SetConfig>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e022      	b.n	8003700 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fdc6 	bl	8004254 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 fe4d 	bl	8004398 <UART_CheckIdleState>
 80036fe:	4603      	mov	r3, r0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	; 0x28
 800370c:	af02      	add	r7, sp, #8
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	4613      	mov	r3, r2
 8003716:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800371c:	2b20      	cmp	r3, #32
 800371e:	d178      	bne.n	8003812 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_UART_Transmit+0x24>
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e071      	b.n	8003814 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2221      	movs	r2, #33	; 0x21
 800373c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800373e:	f7fd fbe1 	bl	8000f04 <HAL_GetTick>
 8003742:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	88fa      	ldrh	r2, [r7, #6]
 8003748:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	88fa      	ldrh	r2, [r7, #6]
 8003750:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375c:	d108      	bne.n	8003770 <HAL_UART_Transmit+0x68>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d104      	bne.n	8003770 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	61bb      	str	r3, [r7, #24]
 800376e:	e003      	b.n	8003778 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003774:	2300      	movs	r3, #0
 8003776:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003778:	e030      	b.n	80037dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2200      	movs	r2, #0
 8003782:	2180      	movs	r1, #128	; 0x80
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 feaf 	bl	80044e8 <UART_WaitOnFlagUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d004      	beq.n	800379a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e03c      	b.n	8003814 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10b      	bne.n	80037b8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	881a      	ldrh	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037ac:	b292      	uxth	r2, r2
 80037ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	3302      	adds	r3, #2
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	e008      	b.n	80037ca <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	781a      	ldrb	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	b292      	uxth	r2, r2
 80037c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	3301      	adds	r3, #1
 80037c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1c8      	bne.n	800377a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2200      	movs	r2, #0
 80037f0:	2140      	movs	r1, #64	; 0x40
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 fe78 	bl	80044e8 <UART_WaitOnFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d004      	beq.n	8003808 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2220      	movs	r2, #32
 8003802:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e005      	b.n	8003814 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	e000      	b.n	8003814 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003812:	2302      	movs	r3, #2
  }
}
 8003814:	4618      	mov	r0, r3
 8003816:	3720      	adds	r7, #32
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08a      	sub	sp, #40	; 0x28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	4613      	mov	r3, r2
 8003828:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003830:	2b20      	cmp	r3, #32
 8003832:	d132      	bne.n	800389a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <HAL_UART_Receive_IT+0x24>
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e02b      	b.n	800389c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d018      	beq.n	800388a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	613b      	str	r3, [r7, #16]
   return(result);
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	623b      	str	r3, [r7, #32]
 8003878:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	69f9      	ldr	r1, [r7, #28]
 800387c:	6a3a      	ldr	r2, [r7, #32]
 800387e:	e841 2300 	strex	r3, r2, [r1]
 8003882:	61bb      	str	r3, [r7, #24]
   return(result);
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e6      	bne.n	8003858 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	461a      	mov	r2, r3
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 fe91 	bl	80045b8 <UART_Start_Receive_IT>
 8003896:	4603      	mov	r3, r0
 8003898:	e000      	b.n	800389c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800389a:	2302      	movs	r3, #2
  }
}
 800389c:	4618      	mov	r0, r3
 800389e:	3728      	adds	r7, #40	; 0x28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b0ba      	sub	sp, #232	; 0xe8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80038ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80038d2:	4013      	ands	r3, r2
 80038d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80038d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d115      	bne.n	800390c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80038e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00f      	beq.n	800390c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d009      	beq.n	800390c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 82ab 	beq.w	8003e58 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	4798      	blx	r3
      }
      return;
 800390a:	e2a5      	b.n	8003e58 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800390c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8117 	beq.w	8003b44 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003922:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003926:	4b85      	ldr	r3, [pc, #532]	; (8003b3c <HAL_UART_IRQHandler+0x298>)
 8003928:	4013      	ands	r3, r2
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 810a 	beq.w	8003b44 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d011      	beq.n	8003960 <HAL_UART_IRQHandler+0xbc>
 800393c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00b      	beq.n	8003960 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2201      	movs	r2, #1
 800394e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003956:	f043 0201 	orr.w	r2, r3, #1
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d011      	beq.n	8003990 <HAL_UART_IRQHandler+0xec>
 800396c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00b      	beq.n	8003990 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2202      	movs	r2, #2
 800397e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003986:	f043 0204 	orr.w	r2, r3, #4
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d011      	beq.n	80039c0 <HAL_UART_IRQHandler+0x11c>
 800399c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00b      	beq.n	80039c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2204      	movs	r2, #4
 80039ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039b6:	f043 0202 	orr.w	r2, r3, #2
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d017      	beq.n	80039fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d105      	bne.n	80039e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80039d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00b      	beq.n	80039fc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2208      	movs	r2, #8
 80039ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f2:	f043 0208 	orr.w	r2, r3, #8
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d012      	beq.n	8003a2e <HAL_UART_IRQHandler+0x18a>
 8003a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00c      	beq.n	8003a2e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a24:	f043 0220 	orr.w	r2, r3, #32
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8211 	beq.w	8003e5c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00d      	beq.n	8003a62 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d007      	beq.n	8003a62 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a76:	2b40      	cmp	r3, #64	; 0x40
 8003a78:	d005      	beq.n	8003a86 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d04f      	beq.n	8003b26 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fe4a 	bl	8004720 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d141      	bne.n	8003b1e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
 8003aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ac6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003aca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ad2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ad6:	e841 2300 	strex	r3, r2, [r1]
 8003ada:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1d9      	bne.n	8003a9a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d013      	beq.n	8003b16 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af2:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <HAL_UART_IRQHandler+0x29c>)
 8003af4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fd fb58 	bl	80011b0 <HAL_DMA_Abort_IT>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d017      	beq.n	8003b36 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b10:	4610      	mov	r0, r2
 8003b12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b14:	e00f      	b.n	8003b36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f9b4 	bl	8003e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1c:	e00b      	b.n	8003b36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f9b0 	bl	8003e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b24:	e007      	b.n	8003b36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f9ac 	bl	8003e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003b34:	e192      	b.n	8003e5c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b36:	bf00      	nop
    return;
 8003b38:	e190      	b.n	8003e5c <HAL_UART_IRQHandler+0x5b8>
 8003b3a:	bf00      	nop
 8003b3c:	04000120 	.word	0x04000120
 8003b40:	080047e9 	.word	0x080047e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	f040 814b 	bne.w	8003de4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b52:	f003 0310 	and.w	r3, r3, #16
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 8144 	beq.w	8003de4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b60:	f003 0310 	and.w	r3, r3, #16
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 813d 	beq.w	8003de4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2210      	movs	r2, #16
 8003b70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7c:	2b40      	cmp	r3, #64	; 0x40
 8003b7e:	f040 80b5 	bne.w	8003cec <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b8e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 8164 	beq.w	8003e60 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	f080 815c 	bcs.w	8003e60 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	2b20      	cmp	r3, #32
 8003bba:	f000 8086 	beq.w	8003cca <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003be8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003bec:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003bf4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003bf8:	e841 2300 	strex	r3, r2, [r1]
 8003bfc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1da      	bne.n	8003bbe <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c12:	e853 3f00 	ldrex	r3, [r3]
 8003c16:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3308      	adds	r3, #8
 8003c28:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c2c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c30:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c34:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c38:	e841 2300 	strex	r3, r2, [r1]
 8003c3c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1e1      	bne.n	8003c08 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3308      	adds	r3, #8
 8003c4a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3308      	adds	r3, #8
 8003c64:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c68:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c6e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c70:	e841 2300 	strex	r3, r2, [r1]
 8003c74:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e3      	bne.n	8003c44 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9a:	f023 0310 	bic.w	r3, r3, #16
 8003c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cac:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cb4:	e841 2300 	strex	r3, r2, [r1]
 8003cb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e4      	bne.n	8003c8a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fd fa3a 	bl	800113e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2202      	movs	r2, #2
 8003cce:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f8d7 	bl	8003e98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cea:	e0b9      	b.n	8003e60 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 80ab 	beq.w	8003e64 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003d0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 80a6 	beq.w	8003e64 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	e853 3f00 	ldrex	r3, [r3]
 8003d24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d3c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d42:	e841 2300 	strex	r3, r2, [r1]
 8003d46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1e4      	bne.n	8003d18 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3308      	adds	r3, #8
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	e853 3f00 	ldrex	r3, [r3]
 8003d5c:	623b      	str	r3, [r7, #32]
   return(result);
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	f023 0301 	bic.w	r3, r3, #1
 8003d64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3308      	adds	r3, #8
 8003d6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d72:	633a      	str	r2, [r7, #48]	; 0x30
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e3      	bne.n	8003d4e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	e853 3f00 	ldrex	r3, [r3]
 8003da6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0310 	bic.w	r3, r3, #16
 8003dae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003dbc:	61fb      	str	r3, [r7, #28]
 8003dbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	69b9      	ldr	r1, [r7, #24]
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	617b      	str	r3, [r7, #20]
   return(result);
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e4      	bne.n	8003d9a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f85b 	bl	8003e98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003de2:	e03f      	b.n	8003e64 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00e      	beq.n	8003e0e <HAL_UART_IRQHandler+0x56a>
 8003df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 fed6 	bl	8004bb8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e0c:	e02d      	b.n	8003e6a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00e      	beq.n	8003e38 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d01c      	beq.n	8003e68 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	4798      	blx	r3
    }
    return;
 8003e36:	e017      	b.n	8003e68 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d012      	beq.n	8003e6a <HAL_UART_IRQHandler+0x5c6>
 8003e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00c      	beq.n	8003e6a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fcdf 	bl	8004814 <UART_EndTransmit_IT>
    return;
 8003e56:	e008      	b.n	8003e6a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003e58:	bf00      	nop
 8003e5a:	e006      	b.n	8003e6a <HAL_UART_IRQHandler+0x5c6>
    return;
 8003e5c:	bf00      	nop
 8003e5e:	e004      	b.n	8003e6a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003e60:	bf00      	nop
 8003e62:	e002      	b.n	8003e6a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003e64:	bf00      	nop
 8003e66:	e000      	b.n	8003e6a <HAL_UART_IRQHandler+0x5c6>
    return;
 8003e68:	bf00      	nop
  }

}
 8003e6a:	37e8      	adds	r7, #232	; 0xe8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ede:	f023 030c 	bic.w	r3, r3, #12
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	6979      	ldr	r1, [r7, #20]
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4aad      	ldr	r2, [pc, #692]	; (80041e0 <UART_SetConfig+0x330>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d120      	bne.n	8003f72 <UART_SetConfig+0xc2>
 8003f30:	4bac      	ldr	r3, [pc, #688]	; (80041e4 <UART_SetConfig+0x334>)
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	2b03      	cmp	r3, #3
 8003f3a:	d817      	bhi.n	8003f6c <UART_SetConfig+0xbc>
 8003f3c:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <UART_SetConfig+0x94>)
 8003f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f42:	bf00      	nop
 8003f44:	08003f55 	.word	0x08003f55
 8003f48:	08003f61 	.word	0x08003f61
 8003f4c:	08003f67 	.word	0x08003f67
 8003f50:	08003f5b 	.word	0x08003f5b
 8003f54:	2301      	movs	r3, #1
 8003f56:	77fb      	strb	r3, [r7, #31]
 8003f58:	e0b5      	b.n	80040c6 <UART_SetConfig+0x216>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	77fb      	strb	r3, [r7, #31]
 8003f5e:	e0b2      	b.n	80040c6 <UART_SetConfig+0x216>
 8003f60:	2304      	movs	r3, #4
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e0af      	b.n	80040c6 <UART_SetConfig+0x216>
 8003f66:	2308      	movs	r3, #8
 8003f68:	77fb      	strb	r3, [r7, #31]
 8003f6a:	e0ac      	b.n	80040c6 <UART_SetConfig+0x216>
 8003f6c:	2310      	movs	r3, #16
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e0a9      	b.n	80040c6 <UART_SetConfig+0x216>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a9c      	ldr	r2, [pc, #624]	; (80041e8 <UART_SetConfig+0x338>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d124      	bne.n	8003fc6 <UART_SetConfig+0x116>
 8003f7c:	4b99      	ldr	r3, [pc, #612]	; (80041e4 <UART_SetConfig+0x334>)
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f88:	d011      	beq.n	8003fae <UART_SetConfig+0xfe>
 8003f8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f8e:	d817      	bhi.n	8003fc0 <UART_SetConfig+0x110>
 8003f90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f94:	d011      	beq.n	8003fba <UART_SetConfig+0x10a>
 8003f96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f9a:	d811      	bhi.n	8003fc0 <UART_SetConfig+0x110>
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <UART_SetConfig+0xf8>
 8003fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa4:	d006      	beq.n	8003fb4 <UART_SetConfig+0x104>
 8003fa6:	e00b      	b.n	8003fc0 <UART_SetConfig+0x110>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	77fb      	strb	r3, [r7, #31]
 8003fac:	e08b      	b.n	80040c6 <UART_SetConfig+0x216>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	77fb      	strb	r3, [r7, #31]
 8003fb2:	e088      	b.n	80040c6 <UART_SetConfig+0x216>
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	77fb      	strb	r3, [r7, #31]
 8003fb8:	e085      	b.n	80040c6 <UART_SetConfig+0x216>
 8003fba:	2308      	movs	r3, #8
 8003fbc:	77fb      	strb	r3, [r7, #31]
 8003fbe:	e082      	b.n	80040c6 <UART_SetConfig+0x216>
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e07f      	b.n	80040c6 <UART_SetConfig+0x216>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a88      	ldr	r2, [pc, #544]	; (80041ec <UART_SetConfig+0x33c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d124      	bne.n	800401a <UART_SetConfig+0x16a>
 8003fd0:	4b84      	ldr	r3, [pc, #528]	; (80041e4 <UART_SetConfig+0x334>)
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003fd8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003fdc:	d011      	beq.n	8004002 <UART_SetConfig+0x152>
 8003fde:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003fe2:	d817      	bhi.n	8004014 <UART_SetConfig+0x164>
 8003fe4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003fe8:	d011      	beq.n	800400e <UART_SetConfig+0x15e>
 8003fea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003fee:	d811      	bhi.n	8004014 <UART_SetConfig+0x164>
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <UART_SetConfig+0x14c>
 8003ff4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ff8:	d006      	beq.n	8004008 <UART_SetConfig+0x158>
 8003ffa:	e00b      	b.n	8004014 <UART_SetConfig+0x164>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	77fb      	strb	r3, [r7, #31]
 8004000:	e061      	b.n	80040c6 <UART_SetConfig+0x216>
 8004002:	2302      	movs	r3, #2
 8004004:	77fb      	strb	r3, [r7, #31]
 8004006:	e05e      	b.n	80040c6 <UART_SetConfig+0x216>
 8004008:	2304      	movs	r3, #4
 800400a:	77fb      	strb	r3, [r7, #31]
 800400c:	e05b      	b.n	80040c6 <UART_SetConfig+0x216>
 800400e:	2308      	movs	r3, #8
 8004010:	77fb      	strb	r3, [r7, #31]
 8004012:	e058      	b.n	80040c6 <UART_SetConfig+0x216>
 8004014:	2310      	movs	r3, #16
 8004016:	77fb      	strb	r3, [r7, #31]
 8004018:	e055      	b.n	80040c6 <UART_SetConfig+0x216>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a74      	ldr	r2, [pc, #464]	; (80041f0 <UART_SetConfig+0x340>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d124      	bne.n	800406e <UART_SetConfig+0x1be>
 8004024:	4b6f      	ldr	r3, [pc, #444]	; (80041e4 <UART_SetConfig+0x334>)
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800402c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004030:	d011      	beq.n	8004056 <UART_SetConfig+0x1a6>
 8004032:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004036:	d817      	bhi.n	8004068 <UART_SetConfig+0x1b8>
 8004038:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800403c:	d011      	beq.n	8004062 <UART_SetConfig+0x1b2>
 800403e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004042:	d811      	bhi.n	8004068 <UART_SetConfig+0x1b8>
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <UART_SetConfig+0x1a0>
 8004048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800404c:	d006      	beq.n	800405c <UART_SetConfig+0x1ac>
 800404e:	e00b      	b.n	8004068 <UART_SetConfig+0x1b8>
 8004050:	2300      	movs	r3, #0
 8004052:	77fb      	strb	r3, [r7, #31]
 8004054:	e037      	b.n	80040c6 <UART_SetConfig+0x216>
 8004056:	2302      	movs	r3, #2
 8004058:	77fb      	strb	r3, [r7, #31]
 800405a:	e034      	b.n	80040c6 <UART_SetConfig+0x216>
 800405c:	2304      	movs	r3, #4
 800405e:	77fb      	strb	r3, [r7, #31]
 8004060:	e031      	b.n	80040c6 <UART_SetConfig+0x216>
 8004062:	2308      	movs	r3, #8
 8004064:	77fb      	strb	r3, [r7, #31]
 8004066:	e02e      	b.n	80040c6 <UART_SetConfig+0x216>
 8004068:	2310      	movs	r3, #16
 800406a:	77fb      	strb	r3, [r7, #31]
 800406c:	e02b      	b.n	80040c6 <UART_SetConfig+0x216>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a60      	ldr	r2, [pc, #384]	; (80041f4 <UART_SetConfig+0x344>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d124      	bne.n	80040c2 <UART_SetConfig+0x212>
 8004078:	4b5a      	ldr	r3, [pc, #360]	; (80041e4 <UART_SetConfig+0x334>)
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004080:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004084:	d011      	beq.n	80040aa <UART_SetConfig+0x1fa>
 8004086:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800408a:	d817      	bhi.n	80040bc <UART_SetConfig+0x20c>
 800408c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004090:	d011      	beq.n	80040b6 <UART_SetConfig+0x206>
 8004092:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004096:	d811      	bhi.n	80040bc <UART_SetConfig+0x20c>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <UART_SetConfig+0x1f4>
 800409c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040a0:	d006      	beq.n	80040b0 <UART_SetConfig+0x200>
 80040a2:	e00b      	b.n	80040bc <UART_SetConfig+0x20c>
 80040a4:	2300      	movs	r3, #0
 80040a6:	77fb      	strb	r3, [r7, #31]
 80040a8:	e00d      	b.n	80040c6 <UART_SetConfig+0x216>
 80040aa:	2302      	movs	r3, #2
 80040ac:	77fb      	strb	r3, [r7, #31]
 80040ae:	e00a      	b.n	80040c6 <UART_SetConfig+0x216>
 80040b0:	2304      	movs	r3, #4
 80040b2:	77fb      	strb	r3, [r7, #31]
 80040b4:	e007      	b.n	80040c6 <UART_SetConfig+0x216>
 80040b6:	2308      	movs	r3, #8
 80040b8:	77fb      	strb	r3, [r7, #31]
 80040ba:	e004      	b.n	80040c6 <UART_SetConfig+0x216>
 80040bc:	2310      	movs	r3, #16
 80040be:	77fb      	strb	r3, [r7, #31]
 80040c0:	e001      	b.n	80040c6 <UART_SetConfig+0x216>
 80040c2:	2310      	movs	r3, #16
 80040c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ce:	d15b      	bne.n	8004188 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80040d0:	7ffb      	ldrb	r3, [r7, #31]
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d827      	bhi.n	8004126 <UART_SetConfig+0x276>
 80040d6:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <UART_SetConfig+0x22c>)
 80040d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040dc:	08004101 	.word	0x08004101
 80040e0:	08004109 	.word	0x08004109
 80040e4:	08004111 	.word	0x08004111
 80040e8:	08004127 	.word	0x08004127
 80040ec:	08004117 	.word	0x08004117
 80040f0:	08004127 	.word	0x08004127
 80040f4:	08004127 	.word	0x08004127
 80040f8:	08004127 	.word	0x08004127
 80040fc:	0800411f 	.word	0x0800411f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004100:	f7fe fb20 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 8004104:	61b8      	str	r0, [r7, #24]
        break;
 8004106:	e013      	b.n	8004130 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004108:	f7fe fb3e 	bl	8002788 <HAL_RCC_GetPCLK2Freq>
 800410c:	61b8      	str	r0, [r7, #24]
        break;
 800410e:	e00f      	b.n	8004130 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004110:	4b39      	ldr	r3, [pc, #228]	; (80041f8 <UART_SetConfig+0x348>)
 8004112:	61bb      	str	r3, [r7, #24]
        break;
 8004114:	e00c      	b.n	8004130 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004116:	f7fe fa9f 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 800411a:	61b8      	str	r0, [r7, #24]
        break;
 800411c:	e008      	b.n	8004130 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800411e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004122:	61bb      	str	r3, [r7, #24]
        break;
 8004124:	e004      	b.n	8004130 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	77bb      	strb	r3, [r7, #30]
        break;
 800412e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 8083 	beq.w	800423e <UART_SetConfig+0x38e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	005a      	lsls	r2, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	085b      	lsrs	r3, r3, #1
 8004142:	441a      	add	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	fbb2 f3f3 	udiv	r3, r2, r3
 800414c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	2b0f      	cmp	r3, #15
 8004152:	d916      	bls.n	8004182 <UART_SetConfig+0x2d2>
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415a:	d212      	bcs.n	8004182 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	b29b      	uxth	r3, r3
 8004160:	f023 030f 	bic.w	r3, r3, #15
 8004164:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	085b      	lsrs	r3, r3, #1
 800416a:	b29b      	uxth	r3, r3
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	b29a      	uxth	r2, r3
 8004172:	89fb      	ldrh	r3, [r7, #14]
 8004174:	4313      	orrs	r3, r2
 8004176:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	89fa      	ldrh	r2, [r7, #14]
 800417e:	60da      	str	r2, [r3, #12]
 8004180:	e05d      	b.n	800423e <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	77bb      	strb	r3, [r7, #30]
 8004186:	e05a      	b.n	800423e <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004188:	7ffb      	ldrb	r3, [r7, #31]
 800418a:	2b08      	cmp	r3, #8
 800418c:	d836      	bhi.n	80041fc <UART_SetConfig+0x34c>
 800418e:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <UART_SetConfig+0x2e4>)
 8004190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004194:	080041b9 	.word	0x080041b9
 8004198:	080041c1 	.word	0x080041c1
 800419c:	080041c9 	.word	0x080041c9
 80041a0:	080041fd 	.word	0x080041fd
 80041a4:	080041cf 	.word	0x080041cf
 80041a8:	080041fd 	.word	0x080041fd
 80041ac:	080041fd 	.word	0x080041fd
 80041b0:	080041fd 	.word	0x080041fd
 80041b4:	080041d7 	.word	0x080041d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041b8:	f7fe fac4 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 80041bc:	61b8      	str	r0, [r7, #24]
        break;
 80041be:	e022      	b.n	8004206 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041c0:	f7fe fae2 	bl	8002788 <HAL_RCC_GetPCLK2Freq>
 80041c4:	61b8      	str	r0, [r7, #24]
        break;
 80041c6:	e01e      	b.n	8004206 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <UART_SetConfig+0x348>)
 80041ca:	61bb      	str	r3, [r7, #24]
        break;
 80041cc:	e01b      	b.n	8004206 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ce:	f7fe fa43 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 80041d2:	61b8      	str	r0, [r7, #24]
        break;
 80041d4:	e017      	b.n	8004206 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041da:	61bb      	str	r3, [r7, #24]
        break;
 80041dc:	e013      	b.n	8004206 <UART_SetConfig+0x356>
 80041de:	bf00      	nop
 80041e0:	40013800 	.word	0x40013800
 80041e4:	40021000 	.word	0x40021000
 80041e8:	40004400 	.word	0x40004400
 80041ec:	40004800 	.word	0x40004800
 80041f0:	40004c00 	.word	0x40004c00
 80041f4:	40005000 	.word	0x40005000
 80041f8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	77bb      	strb	r3, [r7, #30]
        break;
 8004204:	bf00      	nop
    }

    if (pclk != 0U)
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d018      	beq.n	800423e <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	085a      	lsrs	r2, r3, #1
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	441a      	add	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	fbb2 f3f3 	udiv	r3, r2, r3
 800421e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	2b0f      	cmp	r3, #15
 8004224:	d909      	bls.n	800423a <UART_SetConfig+0x38a>
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422c:	d205      	bcs.n	800423a <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	b29a      	uxth	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60da      	str	r2, [r3, #12]
 8004238:	e001      	b.n	800423e <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800424a:	7fbb      	ldrb	r3, [r7, #30]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3720      	adds	r7, #32
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00a      	beq.n	800427e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	f003 0310 	and.w	r3, r3, #16
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01a      	beq.n	800436a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004352:	d10a      	bne.n	800436a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	605a      	str	r2, [r3, #4]
  }
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b098      	sub	sp, #96	; 0x60
 800439c:	af02      	add	r7, sp, #8
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043a8:	f7fc fdac 	bl	8000f04 <HAL_GetTick>
 80043ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d12e      	bne.n	800441a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c4:	2200      	movs	r2, #0
 80043c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f88c 	bl	80044e8 <UART_WaitOnFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d021      	beq.n	800441a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ea:	653b      	str	r3, [r7, #80]	; 0x50
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f4:	647b      	str	r3, [r7, #68]	; 0x44
 80043f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e6      	bne.n	80043d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2220      	movs	r2, #32
 800440c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e062      	b.n	80044e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b04      	cmp	r3, #4
 8004426:	d149      	bne.n	80044bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004428:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004430:	2200      	movs	r2, #0
 8004432:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f856 	bl	80044e8 <UART_WaitOnFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d03c      	beq.n	80044bc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	623b      	str	r3, [r7, #32]
   return(result);
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004460:	633b      	str	r3, [r7, #48]	; 0x30
 8004462:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004468:	e841 2300 	strex	r3, r2, [r1]
 800446c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800446e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e6      	bne.n	8004442 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3308      	adds	r3, #8
 800447a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	e853 3f00 	ldrex	r3, [r3]
 8004482:	60fb      	str	r3, [r7, #12]
   return(result);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0301 	bic.w	r3, r3, #1
 800448a:	64bb      	str	r3, [r7, #72]	; 0x48
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3308      	adds	r3, #8
 8004492:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004494:	61fa      	str	r2, [r7, #28]
 8004496:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	69b9      	ldr	r1, [r7, #24]
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	617b      	str	r3, [r7, #20]
   return(result);
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e5      	bne.n	8004474 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e011      	b.n	80044e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3758      	adds	r7, #88	; 0x58
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	4613      	mov	r3, r2
 80044f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f8:	e049      	b.n	800458e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004500:	d045      	beq.n	800458e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004502:	f7fc fcff 	bl	8000f04 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	429a      	cmp	r2, r3
 8004510:	d302      	bcc.n	8004518 <UART_WaitOnFlagUntilTimeout+0x30>
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e048      	b.n	80045ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b00      	cmp	r3, #0
 8004528:	d031      	beq.n	800458e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b08      	cmp	r3, #8
 8004536:	d110      	bne.n	800455a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2208      	movs	r2, #8
 800453e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f8ed 	bl	8004720 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2208      	movs	r2, #8
 800454a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e029      	b.n	80045ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004568:	d111      	bne.n	800458e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004572:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f8d3 	bl	8004720 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2220      	movs	r2, #32
 800457e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e00f      	b.n	80045ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69da      	ldr	r2, [r3, #28]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4013      	ands	r3, r2
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	429a      	cmp	r2, r3
 800459c:	bf0c      	ite	eq
 800459e:	2301      	moveq	r3, #1
 80045a0:	2300      	movne	r3, #0
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	461a      	mov	r2, r3
 80045a6:	79fb      	ldrb	r3, [r7, #7]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d0a6      	beq.n	80044fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b097      	sub	sp, #92	; 0x5c
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	4613      	mov	r3, r2
 80045c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	88fa      	ldrh	r2, [r7, #6]
 80045d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	88fa      	ldrh	r2, [r7, #6]
 80045d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ea:	d10e      	bne.n	800460a <UART_Start_Receive_IT+0x52>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d105      	bne.n	8004600 <UART_Start_Receive_IT+0x48>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80045fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045fe:	e01a      	b.n	8004636 <UART_Start_Receive_IT+0x7e>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	22ff      	movs	r2, #255	; 0xff
 8004604:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004608:	e015      	b.n	8004636 <UART_Start_Receive_IT+0x7e>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10d      	bne.n	800462e <UART_Start_Receive_IT+0x76>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d104      	bne.n	8004624 <UART_Start_Receive_IT+0x6c>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	22ff      	movs	r2, #255	; 0xff
 800461e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004622:	e008      	b.n	8004636 <UART_Start_Receive_IT+0x7e>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	227f      	movs	r2, #127	; 0x7f
 8004628:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800462c:	e003      	b.n	8004636 <UART_Start_Receive_IT+0x7e>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2222      	movs	r2, #34	; 0x22
 8004642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3308      	adds	r3, #8
 800464c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004658:	f043 0301 	orr.w	r3, r3, #1
 800465c:	657b      	str	r3, [r7, #84]	; 0x54
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3308      	adds	r3, #8
 8004664:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004666:	64ba      	str	r2, [r7, #72]	; 0x48
 8004668:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800466c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800466e:	e841 2300 	strex	r3, r2, [r1]
 8004672:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1e5      	bne.n	8004646 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004682:	d107      	bne.n	8004694 <UART_Start_Receive_IT+0xdc>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d103      	bne.n	8004694 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a22      	ldr	r2, [pc, #136]	; (8004718 <UART_Start_Receive_IT+0x160>)
 8004690:	669a      	str	r2, [r3, #104]	; 0x68
 8004692:	e002      	b.n	800469a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4a21      	ldr	r2, [pc, #132]	; (800471c <UART_Start_Receive_IT+0x164>)
 8004698:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d019      	beq.n	80046d6 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046aa:	e853 3f00 	ldrex	r3, [r3]
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80046b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	461a      	mov	r2, r3
 80046be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c0:	637b      	str	r3, [r7, #52]	; 0x34
 80046c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046c8:	e841 2300 	strex	r3, r2, [r1]
 80046cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1e6      	bne.n	80046a2 <UART_Start_Receive_IT+0xea>
 80046d4:	e018      	b.n	8004708 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	e853 3f00 	ldrex	r3, [r3]
 80046e2:	613b      	str	r3, [r7, #16]
   return(result);
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f043 0320 	orr.w	r3, r3, #32
 80046ea:	653b      	str	r3, [r7, #80]	; 0x50
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f4:	623b      	str	r3, [r7, #32]
 80046f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f8:	69f9      	ldr	r1, [r7, #28]
 80046fa:	6a3a      	ldr	r2, [r7, #32]
 80046fc:	e841 2300 	strex	r3, r2, [r1]
 8004700:	61bb      	str	r3, [r7, #24]
   return(result);
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1e6      	bne.n	80046d6 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	375c      	adds	r7, #92	; 0x5c
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	08004a11 	.word	0x08004a11
 800471c:	08004869 	.word	0x08004869

08004720 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004720:	b480      	push	{r7}
 8004722:	b095      	sub	sp, #84	; 0x54
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800473c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004746:	643b      	str	r3, [r7, #64]	; 0x40
 8004748:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800474c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e6      	bne.n	8004728 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3308      	adds	r3, #8
 8004760:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	61fb      	str	r3, [r7, #28]
   return(result);
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	64bb      	str	r3, [r7, #72]	; 0x48
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3308      	adds	r3, #8
 8004778:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800477a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004782:	e841 2300 	strex	r3, r2, [r1]
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1e5      	bne.n	800475a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004792:	2b01      	cmp	r3, #1
 8004794:	d118      	bne.n	80047c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	e853 3f00 	ldrex	r3, [r3]
 80047a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f023 0310 	bic.w	r3, r3, #16
 80047aa:	647b      	str	r3, [r7, #68]	; 0x44
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	461a      	mov	r2, r3
 80047b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047b4:	61bb      	str	r3, [r7, #24]
 80047b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b8:	6979      	ldr	r1, [r7, #20]
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	e841 2300 	strex	r3, r2, [r1]
 80047c0:	613b      	str	r3, [r7, #16]
   return(result);
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1e6      	bne.n	8004796 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	669a      	str	r2, [r3, #104]	; 0x68
}
 80047dc:	bf00      	nop
 80047de:	3754      	adds	r7, #84	; 0x54
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f7ff fb3c 	bl	8003e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800480c:	bf00      	nop
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	60bb      	str	r3, [r7, #8]
   return(result);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004830:	61fb      	str	r3, [r7, #28]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	61bb      	str	r3, [r7, #24]
 800483c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	6979      	ldr	r1, [r7, #20]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	613b      	str	r3, [r7, #16]
   return(result);
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e6      	bne.n	800481c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7ff fb08 	bl	8003e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004860:	bf00      	nop
 8004862:	3720      	adds	r7, #32
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b09c      	sub	sp, #112	; 0x70
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004876:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004880:	2b22      	cmp	r3, #34	; 0x22
 8004882:	f040 80b9 	bne.w	80049f8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800488c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004890:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004894:	b2d9      	uxtb	r1, r3
 8004896:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800489a:	b2da      	uxtb	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a0:	400a      	ands	r2, r1
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f040 809c 	bne.w	8004a08 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048d8:	e853 3f00 	ldrex	r3, [r3]
 80048dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80048f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e6      	bne.n	80048d0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3308      	adds	r3, #8
 8004908:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	667b      	str	r3, [r7, #100]	; 0x64
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3308      	adds	r3, #8
 8004920:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004922:	647a      	str	r2, [r7, #68]	; 0x44
 8004924:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004928:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e5      	bne.n	8004902 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d018      	beq.n	800498a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	e853 3f00 	ldrex	r3, [r3]
 8004964:	623b      	str	r3, [r7, #32]
   return(result);
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800496c:	663b      	str	r3, [r7, #96]	; 0x60
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004976:	633b      	str	r3, [r7, #48]	; 0x30
 8004978:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800497c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e6      	bne.n	8004958 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498e:	2b01      	cmp	r3, #1
 8004990:	d12e      	bne.n	80049f0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f023 0310 	bic.w	r3, r3, #16
 80049ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	461a      	mov	r2, r3
 80049b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b6:	61fb      	str	r3, [r7, #28]
 80049b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ba:	69b9      	ldr	r1, [r7, #24]
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	617b      	str	r3, [r7, #20]
   return(result);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e6      	bne.n	8004998 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	d103      	bne.n	80049e0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2210      	movs	r2, #16
 80049de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80049e6:	4619      	mov	r1, r3
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff fa55 	bl	8003e98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049ee:	e00b      	b.n	8004a08 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7fb fc4d 	bl	8000290 <HAL_UART_RxCpltCallback>
}
 80049f6:	e007      	b.n	8004a08 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699a      	ldr	r2, [r3, #24]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0208 	orr.w	r2, r2, #8
 8004a06:	619a      	str	r2, [r3, #24]
}
 8004a08:	bf00      	nop
 8004a0a:	3770      	adds	r7, #112	; 0x70
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b09c      	sub	sp, #112	; 0x70
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a1e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a28:	2b22      	cmp	r3, #34	; 0x22
 8004a2a:	f040 80b9 	bne.w	8004ba0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a34:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004a3e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004a42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004a46:	4013      	ands	r3, r2
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a52:	1c9a      	adds	r2, r3, #2
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f040 809c 	bne.w	8004bb0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a8c:	667b      	str	r3, [r7, #100]	; 0x64
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a96:	657b      	str	r3, [r7, #84]	; 0x54
 8004a98:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e6      	bne.n	8004a78 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3308      	adds	r3, #8
 8004ab0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab4:	e853 3f00 	ldrex	r3, [r3]
 8004ab8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	f023 0301 	bic.w	r3, r3, #1
 8004ac0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3308      	adds	r3, #8
 8004ac8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004aca:	643a      	str	r2, [r7, #64]	; 0x40
 8004acc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ace:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ad0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ad2:	e841 2300 	strex	r3, r2, [r1]
 8004ad6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1e5      	bne.n	8004aaa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d018      	beq.n	8004b32 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	e853 3f00 	ldrex	r3, [r3]
 8004b0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b20:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e6      	bne.n	8004b00 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d12e      	bne.n	8004b98 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	e853 3f00 	ldrex	r3, [r3]
 8004b4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f023 0310 	bic.w	r3, r3, #16
 8004b54:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b5e:	61bb      	str	r3, [r7, #24]
 8004b60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	6979      	ldr	r1, [r7, #20]
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1e6      	bne.n	8004b40 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	f003 0310 	and.w	r3, r3, #16
 8004b7c:	2b10      	cmp	r3, #16
 8004b7e:	d103      	bne.n	8004b88 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2210      	movs	r2, #16
 8004b86:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b8e:	4619      	mov	r1, r3
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff f981 	bl	8003e98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b96:	e00b      	b.n	8004bb0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7fb fb79 	bl	8000290 <HAL_UART_RxCpltCallback>
}
 8004b9e:	e007      	b.n	8004bb0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699a      	ldr	r2, [r3, #24]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0208 	orr.w	r2, r2, #8
 8004bae:	619a      	str	r2, [r3, #24]
}
 8004bb0:	bf00      	nop
 8004bb2:	3770      	adds	r7, #112	; 0x70
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <_Clear_DrvPar>:
*/
/******************************************************************************/
/***                        TIMER FUNCTION FOR THE DRIVER                    **/
/******************************************************************************/
void _Clear_DrvPar(Cblk_parameter_t *_cblk)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	memset(_cblk,0,sizeof(Cblk_parameter_t));
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fa81 	bl	80050e0 <memset>
	_cblk->type = DR_NULL;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	711a      	strb	r2, [r3, #4]
	_cblk->active = false;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	761a      	strb	r2, [r3, #24]
	_cblk->para = 0;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	609a      	str	r2, [r3, #8]
	_cblk->private_systick = 0;
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_cblk->EventCallback_t = 0;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]
}
 8004c04:	bf00      	nop
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <Drv_RegisterTIMER>:
void Drv_RegisterTIMER(void)
{
 8004c0c:	b590      	push	{r4, r7, lr}
 8004c0e:	b08d      	sub	sp, #52	; 0x34
 8004c10:	af04      	add	r7, sp, #16
	Cblk_parameter_t cbkirq;
	_Clear_DrvPar(&cbkirq);
 8004c12:	463b      	mov	r3, r7
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff ffd9 	bl	8004bcc <_Clear_DrvPar>
	cbkirq.type = DR_TIMER_SYS;
 8004c1a:	2304      	movs	r3, #4
 8004c1c:	713b      	strb	r3, [r7, #4]
	Drv_RegisterIRQ_callback(cbkirq);
 8004c1e:	466c      	mov	r4, sp
 8004c20:	f107 0310 	add.w	r3, r7, #16
 8004c24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004c2a:	463b      	mov	r3, r7
 8004c2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c2e:	f000 f8d5 	bl	8004ddc <Drv_RegisterIRQ_callback>
}
 8004c32:	bf00      	nop
 8004c34:	3724      	adds	r7, #36	; 0x24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd90      	pop	{r4, r7, pc}
	...

08004c3c <DRV_TIMER_FNC>:
void DRV_TIMER_FNC(void *arg)
{
 8004c3c:	b4b0      	push	{r4, r5, r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<IRQ_MAX; i++)
 8004c44:	2300      	movs	r3, #0
 8004c46:	73fb      	strb	r3, [r7, #15]
 8004c48:	e07f      	b.n	8004d4a <DRV_TIMER_FNC+0x10e>
	{
		if(IRQ_Arr[i].type == DR_NULL) return;
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	4a44      	ldr	r2, [pc, #272]	; (8004d60 <DRV_TIMER_FNC+0x124>)
 8004c4e:	015b      	lsls	r3, r3, #5
 8004c50:	4413      	add	r3, r2
 8004c52:	3304      	adds	r3, #4
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d07c      	beq.n	8004d54 <DRV_TIMER_FNC+0x118>

		if((IRQ_Arr[i].type) == DR_TIMER)
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	4a40      	ldr	r2, [pc, #256]	; (8004d60 <DRV_TIMER_FNC+0x124>)
 8004c5e:	015b      	lsls	r3, r3, #5
 8004c60:	4413      	add	r3, r2
 8004c62:	3304      	adds	r3, #4
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b05      	cmp	r3, #5
 8004c68:	d16c      	bne.n	8004d44 <DRV_TIMER_FNC+0x108>
		{
			if(*(uint32_t*)IRQ_Arr[i].para != 0 && IRQ_Arr[i].para != 0)
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	4a3c      	ldr	r2, [pc, #240]	; (8004d60 <DRV_TIMER_FNC+0x124>)
 8004c6e:	015b      	lsls	r3, r3, #5
 8004c70:	4413      	add	r3, r2
 8004c72:	3308      	adds	r3, #8
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d04e      	beq.n	8004d1a <DRV_TIMER_FNC+0xde>
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	4a38      	ldr	r2, [pc, #224]	; (8004d60 <DRV_TIMER_FNC+0x124>)
 8004c80:	015b      	lsls	r3, r3, #5
 8004c82:	4413      	add	r3, r2
 8004c84:	3308      	adds	r3, #8
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d046      	beq.n	8004d1a <DRV_TIMER_FNC+0xde>
			{
				if(++IRQ_Arr[i].private_systick >= (*(uint32_t*)IRQ_Arr[i].para) / DRV_TIMER_PERIOD)
 8004c8c:	7bf9      	ldrb	r1, [r7, #15]
 8004c8e:	4a34      	ldr	r2, [pc, #208]	; (8004d60 <DRV_TIMER_FNC+0x124>)
 8004c90:	014b      	lsls	r3, r1, #5
 8004c92:	4413      	add	r3, r2
 8004c94:	3310      	adds	r3, #16
 8004c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9a:	1c54      	adds	r4, r2, #1
 8004c9c:	f143 0500 	adc.w	r5, r3, #0
 8004ca0:	4a2f      	ldr	r2, [pc, #188]	; (8004d60 <DRV_TIMER_FNC+0x124>)
 8004ca2:	014b      	lsls	r3, r1, #5
 8004ca4:	4413      	add	r3, r2
 8004ca6:	3310      	adds	r3, #16
 8004ca8:	e9c3 4500 	strd	r4, r5, [r3]
 8004cac:	4a2c      	ldr	r2, [pc, #176]	; (8004d60 <DRV_TIMER_FNC+0x124>)
 8004cae:	014b      	lsls	r3, r1, #5
 8004cb0:	4413      	add	r3, r2
 8004cb2:	3310      	adds	r3, #16
 8004cb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
 8004cba:	4a29      	ldr	r2, [pc, #164]	; (8004d60 <DRV_TIMER_FNC+0x124>)
 8004cbc:	015b      	lsls	r3, r3, #5
 8004cbe:	4413      	add	r3, r2
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a27      	ldr	r2, [pc, #156]	; (8004d64 <DRV_TIMER_FNC+0x128>)
 8004cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ccc:	099b      	lsrs	r3, r3, #6
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	4299      	cmp	r1, r3
 8004cd6:	bf08      	it	eq
 8004cd8:	4290      	cmpeq	r0, r2
 8004cda:	d333      	bcc.n	8004d44 <DRV_TIMER_FNC+0x108>
				{
					if(IRQ_Arr[i].active == false)
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
 8004cde:	4a20      	ldr	r2, [pc, #128]	; (8004d60 <DRV_TIMER_FNC+0x124>)
 8004ce0:	015b      	lsls	r3, r3, #5
 8004ce2:	4413      	add	r3, r2
 8004ce4:	3318      	adds	r3, #24
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	f083 0301 	eor.w	r3, r3, #1
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d006      	beq.n	8004d00 <DRV_TIMER_FNC+0xc4>
					{
						IRQ_Arr[i].active = true;
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
 8004cf4:	4a1a      	ldr	r2, [pc, #104]	; (8004d60 <DRV_TIMER_FNC+0x124>)
 8004cf6:	015b      	lsls	r3, r3, #5
 8004cf8:	4413      	add	r3, r2
 8004cfa:	3318      	adds	r3, #24
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	701a      	strb	r2, [r3, #0]
					}
					IRQ_Arr[i].private_systick = 0;
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	4a17      	ldr	r2, [pc, #92]	; (8004d60 <DRV_TIMER_FNC+0x124>)
 8004d04:	015b      	lsls	r3, r3, #5
 8004d06:	4413      	add	r3, r2
 8004d08:	f103 0110 	add.w	r1, r3, #16
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	e9c1 2300 	strd	r2, r3, [r1]
				if(++IRQ_Arr[i].private_systick >= (*(uint32_t*)IRQ_Arr[i].para) / DRV_TIMER_PERIOD)
 8004d18:	e014      	b.n	8004d44 <DRV_TIMER_FNC+0x108>
				}
			}
			else if(!(*(uint32_t*)IRQ_Arr[i].para))
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	4a10      	ldr	r2, [pc, #64]	; (8004d60 <DRV_TIMER_FNC+0x124>)
 8004d1e:	015b      	lsls	r3, r3, #5
 8004d20:	4413      	add	r3, r2
 8004d22:	3308      	adds	r3, #8
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10b      	bne.n	8004d44 <DRV_TIMER_FNC+0x108>
			{
				IRQ_Arr[i].private_systick = 0;
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	4a0c      	ldr	r2, [pc, #48]	; (8004d60 <DRV_TIMER_FNC+0x124>)
 8004d30:	015b      	lsls	r3, r3, #5
 8004d32:	4413      	add	r3, r2
 8004d34:	f103 0110 	add.w	r1, r3, #16
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t i=0; i<IRQ_MAX; i++)
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	3301      	adds	r3, #1
 8004d48:	73fb      	strb	r3, [r7, #15]
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	2b13      	cmp	r3, #19
 8004d4e:	f67f af7c 	bls.w	8004c4a <DRV_TIMER_FNC+0xe>
 8004d52:	e000      	b.n	8004d56 <DRV_TIMER_FNC+0x11a>
		if(IRQ_Arr[i].type == DR_NULL) return;
 8004d54:	bf00      	nop
			}
		}
	}
}
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bcb0      	pop	{r4, r5, r7}
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000758 	.word	0x20000758
 8004d64:	10624dd3 	.word	0x10624dd3

08004d68 <DRV_RUN>:

void DRV_RUN(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<IRQ_MAX; i++)
 8004d6e:	2300      	movs	r3, #0
 8004d70:	71fb      	strb	r3, [r7, #7]
 8004d72:	e028      	b.n	8004dc6 <DRV_RUN+0x5e>
	{
		if(IRQ_Arr[i].type == DR_NULL) return;
 8004d74:	79fb      	ldrb	r3, [r7, #7]
 8004d76:	4a18      	ldr	r2, [pc, #96]	; (8004dd8 <DRV_RUN+0x70>)
 8004d78:	015b      	lsls	r3, r3, #5
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d024      	beq.n	8004dce <DRV_RUN+0x66>
		if(IRQ_Arr[i].active && IRQ_Arr[i].type == DR_TIMER)
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	4a14      	ldr	r2, [pc, #80]	; (8004dd8 <DRV_RUN+0x70>)
 8004d88:	015b      	lsls	r3, r3, #5
 8004d8a:	4413      	add	r3, r2
 8004d8c:	3318      	adds	r3, #24
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d015      	beq.n	8004dc0 <DRV_RUN+0x58>
 8004d94:	79fb      	ldrb	r3, [r7, #7]
 8004d96:	4a10      	ldr	r2, [pc, #64]	; (8004dd8 <DRV_RUN+0x70>)
 8004d98:	015b      	lsls	r3, r3, #5
 8004d9a:	4413      	add	r3, r2
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b05      	cmp	r3, #5
 8004da2:	d10d      	bne.n	8004dc0 <DRV_RUN+0x58>
		{
			IRQ_Arr[i].EventCallback_t(0);
 8004da4:	79fb      	ldrb	r3, [r7, #7]
 8004da6:	4a0c      	ldr	r2, [pc, #48]	; (8004dd8 <DRV_RUN+0x70>)
 8004da8:	015b      	lsls	r3, r3, #5
 8004daa:	4413      	add	r3, r2
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2000      	movs	r0, #0
 8004db0:	4798      	blx	r3
			IRQ_Arr[i].active=false;
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	4a08      	ldr	r2, [pc, #32]	; (8004dd8 <DRV_RUN+0x70>)
 8004db6:	015b      	lsls	r3, r3, #5
 8004db8:	4413      	add	r3, r2
 8004dba:	3318      	adds	r3, #24
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<IRQ_MAX; i++)
 8004dc0:	79fb      	ldrb	r3, [r7, #7]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	71fb      	strb	r3, [r7, #7]
 8004dc6:	79fb      	ldrb	r3, [r7, #7]
 8004dc8:	2b13      	cmp	r3, #19
 8004dca:	d9d3      	bls.n	8004d74 <DRV_RUN+0xc>
 8004dcc:	e000      	b.n	8004dd0 <DRV_RUN+0x68>
		if(IRQ_Arr[i].type == DR_NULL) return;
 8004dce:	bf00      	nop
		}
	}
}
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000758 	.word	0x20000758

08004ddc <Drv_RegisterIRQ_callback>:
/******************************************************************************/
/***                 INTERRUPT FUNCTIONS FOR THE DRIVER                      **/
/******************************************************************************/
bool Drv_RegisterIRQ_callback(Cblk_parameter_t cbk)
{
 8004ddc:	b084      	sub	sp, #16
 8004dde:	b5b0      	push	{r4, r5, r7, lr}
 8004de0:	b082      	sub	sp, #8
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	f107 0418 	add.w	r4, r7, #24
 8004de8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t i;
	for(i=0;i<IRQ_MAX;i++)
 8004dec:	2300      	movs	r3, #0
 8004dee:	71fb      	strb	r3, [r7, #7]
 8004df0:	e020      	b.n	8004e34 <Drv_RegisterIRQ_callback+0x58>
	{
		if(IRQ_Arr[i].type == DR_NULL)
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	4a15      	ldr	r2, [pc, #84]	; (8004e4c <Drv_RegisterIRQ_callback+0x70>)
 8004df6:	015b      	lsls	r3, r3, #5
 8004df8:	4413      	add	r3, r2
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d115      	bne.n	8004e2e <Drv_RegisterIRQ_callback+0x52>
		{
			_Clear_DrvPar(&IRQ_Arr[i]);
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	015b      	lsls	r3, r3, #5
 8004e06:	4a11      	ldr	r2, [pc, #68]	; (8004e4c <Drv_RegisterIRQ_callback+0x70>)
 8004e08:	4413      	add	r3, r2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff fede 	bl	8004bcc <_Clear_DrvPar>
			IRQ_Arr[i] = cbk;
 8004e10:	79fb      	ldrb	r3, [r7, #7]
 8004e12:	4a0e      	ldr	r2, [pc, #56]	; (8004e4c <Drv_RegisterIRQ_callback+0x70>)
 8004e14:	015b      	lsls	r3, r3, #5
 8004e16:	4413      	add	r3, r2
 8004e18:	461d      	mov	r5, r3
 8004e1a:	f107 0418 	add.w	r4, r7, #24
 8004e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004e26:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			return true;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e006      	b.n	8004e3c <Drv_RegisterIRQ_callback+0x60>
	for(i=0;i<IRQ_MAX;i++)
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	3301      	adds	r3, #1
 8004e32:	71fb      	strb	r3, [r7, #7]
 8004e34:	79fb      	ldrb	r3, [r7, #7]
 8004e36:	2b13      	cmp	r3, #19
 8004e38:	d9db      	bls.n	8004df2 <Drv_RegisterIRQ_callback+0x16>
		}
	}
	return false;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8004e46:	b004      	add	sp, #16
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	20000758 	.word	0x20000758

08004e50 <UART_IRQ>:
    \param[in]  none
    \param[out] none
    \retval     none
*/
void UART_IRQ(uint32_t _uart, uint8_t _char)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i=0; i<IRQ_MAX; i++)
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	73fb      	strb	r3, [r7, #15]
 8004e60:	e024      	b.n	8004eac <UART_IRQ+0x5c>
	{
		if(IRQ_Arr[i].type == DR_NULL)
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
 8004e64:	4a15      	ldr	r2, [pc, #84]	; (8004ebc <UART_IRQ+0x6c>)
 8004e66:	015b      	lsls	r3, r3, #5
 8004e68:	4413      	add	r3, r2
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d020      	beq.n	8004eb4 <UART_IRQ+0x64>
		{
			return;
		}

		if(IRQ_Arr[i].type == DR_UART)
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	4a11      	ldr	r2, [pc, #68]	; (8004ebc <UART_IRQ+0x6c>)
 8004e76:	015b      	lsls	r3, r3, #5
 8004e78:	4413      	add	r3, r2
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d111      	bne.n	8004ea6 <UART_IRQ+0x56>
		{
			if(_uart == *(uint32_t*)IRQ_Arr[i].para)
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
 8004e84:	4a0d      	ldr	r2, [pc, #52]	; (8004ebc <UART_IRQ+0x6c>)
 8004e86:	015b      	lsls	r3, r3, #5
 8004e88:	4413      	add	r3, r2
 8004e8a:	3308      	adds	r3, #8
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d107      	bne.n	8004ea6 <UART_IRQ+0x56>
			{
				IRQ_Arr[i].EventCallback_t(&_char);         // IRQ_Arr[i].para
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
 8004e98:	4a08      	ldr	r2, [pc, #32]	; (8004ebc <UART_IRQ+0x6c>)
 8004e9a:	015b      	lsls	r3, r3, #5
 8004e9c:	4413      	add	r3, r2
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	1cfa      	adds	r2, r7, #3
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	4798      	blx	r3
	for(uint8_t i=0; i<IRQ_MAX; i++)
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	73fb      	strb	r3, [r7, #15]
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
 8004eae:	2b13      	cmp	r3, #19
 8004eb0:	d9d7      	bls.n	8004e62 <UART_IRQ+0x12>
 8004eb2:	e000      	b.n	8004eb6 <UART_IRQ+0x66>
			return;
 8004eb4:	bf00      	nop
			}
		}
	}
}
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000758 	.word	0x20000758

08004ec0 <test_cbk>:
/******************************************************************************/
/***                      Processing functions Callback                      **/
/******************************************************************************/
/******************************************************************************/
void test_cbk(void * arg)                 // callback to period timer
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
	static uint32_t check_counter = 0;
	if(check_counter != 0)
 8004ec8:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <test_cbk+0x54>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d017      	beq.n	8004f00 <test_cbk+0x40>
	{
		LOGA(INF, "Call timer: %ld\r\n", DRV_GETTICK() - check_counter);
 8004ed0:	4811      	ldr	r0, [pc, #68]	; (8004f18 <test_cbk+0x58>)
 8004ed2:	f000 f90d 	bl	80050f0 <iprintf>
 8004ed6:	bf00      	nop
 8004ed8:	f7fc f814 	bl	8000f04 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <test_cbk+0x54>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	222e      	movs	r2, #46	; 0x2e
 8004ee6:	490d      	ldr	r1, [pc, #52]	; (8004f1c <test_cbk+0x5c>)
 8004ee8:	480d      	ldr	r0, [pc, #52]	; (8004f20 <test_cbk+0x60>)
 8004eea:	f000 f901 	bl	80050f0 <iprintf>
 8004eee:	480d      	ldr	r0, [pc, #52]	; (8004f24 <test_cbk+0x64>)
 8004ef0:	f000 f8fe 	bl	80050f0 <iprintf>
		check_counter = DRV_GETTICK();
 8004ef4:	f7fc f806 	bl	8000f04 <HAL_GetTick>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	4a06      	ldr	r2, [pc, #24]	; (8004f14 <test_cbk+0x54>)
 8004efc:	6013      	str	r3, [r2, #0]
	}
	else
	{
		check_counter = DRV_GETTICK();
	}
}
 8004efe:	e004      	b.n	8004f0a <test_cbk+0x4a>
		check_counter = DRV_GETTICK();
 8004f00:	f7fc f800 	bl	8000f04 <HAL_GetTick>
 8004f04:	4603      	mov	r3, r0
 8004f06:	4a03      	ldr	r2, [pc, #12]	; (8004f14 <test_cbk+0x54>)
 8004f08:	6013      	str	r3, [r2, #0]
}
 8004f0a:	bf00      	nop
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000090 	.word	0x20000090
 8004f18:	08005fdc 	.word	0x08005fdc
 8004f1c:	08006074 	.word	0x08006074
 8004f20:	08005fe4 	.word	0x08005fe4
 8004f24:	08006004 	.word	0x08006004

08004f28 <test_uart_cbk>:

void test_uart_cbk(void * arg)         // callback to usart interrupt
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
	if(TEST_CBK.usart.rx.idx < sizeof(TEST_CBK.usart.rx.rcv) - 1)
 8004f30:	4b0e      	ldr	r3, [pc, #56]	; (8004f6c <test_uart_cbk+0x44>)
 8004f32:	8b1b      	ldrh	r3, [r3, #24]
 8004f34:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 8004f38:	d80b      	bhi.n	8004f52 <test_uart_cbk+0x2a>
	{
		TEST_CBK.usart.rx.rcv[TEST_CBK.usart.rx.idx++] = *(uint8_t *) arg;
 8004f3a:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <test_uart_cbk+0x44>)
 8004f3c:	8b1b      	ldrh	r3, [r3, #24]
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	b291      	uxth	r1, r2
 8004f42:	4a0a      	ldr	r2, [pc, #40]	; (8004f6c <test_uart_cbk+0x44>)
 8004f44:	8311      	strh	r1, [r2, #24]
 8004f46:	4619      	mov	r1, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	781a      	ldrb	r2, [r3, #0]
 8004f4c:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <test_uart_cbk+0x44>)
 8004f4e:	440b      	add	r3, r1
 8004f50:	769a      	strb	r2, [r3, #26]
	}
	TEST_CBK.usart.rx.rxtime = DRV_GETTICK();
 8004f52:	f7fb ffd7 	bl	8000f04 <HAL_GetTick>
 8004f56:	4603      	mov	r3, r0
 8004f58:	461a      	mov	r2, r3
 8004f5a:	f04f 0300 	mov.w	r3, #0
 8004f5e:	4903      	ldr	r1, [pc, #12]	; (8004f6c <test_uart_cbk+0x44>)
 8004f60:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
}
 8004f64:	bf00      	nop
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	200009d8 	.word	0x200009d8

08004f70 <run_test_callback>:
/******************************************************************************/
/***                            MainRun functions                            **/
/******************************************************************************/
/******************************************************************************/
void run_test_callback(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
	if(TEST_CBK.usart.rx.idx > 1 && abs((int)(DRV_GETTICK() - TEST_CBK.usart.rx.rxtime)) > RX_TIMEOUT)
 8004f74:	4b14      	ldr	r3, [pc, #80]	; (8004fc8 <run_test_callback+0x58>)
 8004f76:	8b1b      	ldrh	r3, [r3, #24]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d922      	bls.n	8004fc2 <run_test_callback+0x52>
 8004f7c:	f7fb ffc2 	bl	8000f04 <HAL_GetTick>
 8004f80:	4601      	mov	r1, r0
 8004f82:	4b11      	ldr	r3, [pc, #68]	; (8004fc8 <run_test_callback+0x58>)
 8004f84:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 8004f88:	4613      	mov	r3, r2
 8004f8a:	1acb      	subs	r3, r1, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bfb8      	it	lt
 8004f90:	425b      	neglt	r3, r3
 8004f92:	2b96      	cmp	r3, #150	; 0x96
 8004f94:	dd15      	ble.n	8004fc2 <run_test_callback+0x52>
	{
		LOGA(GPS, "Data: %s\r\n", TEST_CBK.usart.rx.rcv);
 8004f96:	480d      	ldr	r0, [pc, #52]	; (8004fcc <run_test_callback+0x5c>)
 8004f98:	f000 f8aa 	bl	80050f0 <iprintf>
 8004f9c:	bf00      	nop
 8004f9e:	4b0c      	ldr	r3, [pc, #48]	; (8004fd0 <run_test_callback+0x60>)
 8004fa0:	2248      	movs	r2, #72	; 0x48
 8004fa2:	490c      	ldr	r1, [pc, #48]	; (8004fd4 <run_test_callback+0x64>)
 8004fa4:	480c      	ldr	r0, [pc, #48]	; (8004fd8 <run_test_callback+0x68>)
 8004fa6:	f000 f8a3 	bl	80050f0 <iprintf>
 8004faa:	480c      	ldr	r0, [pc, #48]	; (8004fdc <run_test_callback+0x6c>)
 8004fac:	f000 f8a0 	bl	80050f0 <iprintf>

		memset(&TEST_CBK.usart.rx.rcv, 0x00, sizeof(TEST_CBK.usart.rx.rcv));
 8004fb0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4806      	ldr	r0, [pc, #24]	; (8004fd0 <run_test_callback+0x60>)
 8004fb8:	f000 f892 	bl	80050e0 <memset>
		TEST_CBK.usart.rx.idx = 0;
 8004fbc:	4b02      	ldr	r3, [pc, #8]	; (8004fc8 <run_test_callback+0x58>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	831a      	strh	r2, [r3, #24]
	}
}
 8004fc2:	bf00      	nop
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	200009d8 	.word	0x200009d8
 8004fcc:	0800600c 	.word	0x0800600c
 8004fd0:	200009f2 	.word	0x200009f2
 8004fd4:	08006080 	.word	0x08006080
 8004fd8:	08006014 	.word	0x08006014
 8004fdc:	08006004 	.word	0x08006004

08004fe0 <init_test_callback>:
/******************************************************************************/
/***                            Public functions                             **/
/******************************************************************************/
/******************************************************************************/
void init_test_callback(void)
{
 8004fe0:	b590      	push	{r4, r7, lr}
 8004fe2:	b095      	sub	sp, #84	; 0x54
 8004fe4:	af04      	add	r7, sp, #16
	memset(&TEST_CBK, 0x00, sizeof(TEST_CBK));
 8004fe6:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 8004fea:	2100      	movs	r1, #0
 8004fec:	4820      	ldr	r0, [pc, #128]	; (8005070 <init_test_callback+0x90>)
 8004fee:	f000 f877 	bl	80050e0 <memset>

	Cblk_parameter_t test_callback;

	TEST_CBK.tim.time_refesh = 6000;
 8004ff2:	4b1f      	ldr	r3, [pc, #124]	; (8005070 <init_test_callback+0x90>)
 8004ff4:	f241 7270 	movw	r2, #6000	; 0x1770
 8004ff8:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8

	_Clear_DrvPar(&test_callback);
 8004ffc:	f107 0320 	add.w	r3, r7, #32
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff fde3 	bl	8004bcc <_Clear_DrvPar>
	test_callback.type = DR_TIMER;
 8005006:	2305      	movs	r3, #5
 8005008:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	test_callback.para = &TEST_CBK.tim.time_refesh;
 800500c:	4b19      	ldr	r3, [pc, #100]	; (8005074 <init_test_callback+0x94>)
 800500e:	62bb      	str	r3, [r7, #40]	; 0x28
	test_callback.EventCallback_t = &test_cbk;
 8005010:	4b19      	ldr	r3, [pc, #100]	; (8005078 <init_test_callback+0x98>)
 8005012:	623b      	str	r3, [r7, #32]
	Drv_RegisterIRQ_callback(test_callback);
 8005014:	466c      	mov	r4, sp
 8005016:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800501a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800501c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005020:	f107 0320 	add.w	r3, r7, #32
 8005024:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005026:	f7ff fed9 	bl	8004ddc <Drv_RegisterIRQ_callback>




	Cblk_parameter_t test_uart;
	TEST_CBK.usart.peri.uart.rcu_uart = RCU_USART1;
 800502a:	4b11      	ldr	r3, [pc, #68]	; (8005070 <init_test_callback+0x90>)
 800502c:	4a13      	ldr	r2, [pc, #76]	; (800507c <init_test_callback+0x9c>)
 800502e:	601a      	str	r2, [r3, #0]

	_Clear_DrvPar(&test_uart);
 8005030:	463b      	mov	r3, r7
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff fdca 	bl	8004bcc <_Clear_DrvPar>
	test_uart.type = DR_UART;
 8005038:	2301      	movs	r3, #1
 800503a:	713b      	strb	r3, [r7, #4]
	test_uart.para = &TEST_CBK.usart.peri.uart.rcu_uart;
 800503c:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <init_test_callback+0x90>)
 800503e:	60bb      	str	r3, [r7, #8]
	test_uart.EventCallback_t = &test_uart_cbk;
 8005040:	4b0f      	ldr	r3, [pc, #60]	; (8005080 <init_test_callback+0xa0>)
 8005042:	603b      	str	r3, [r7, #0]
	Drv_RegisterIRQ_callback(test_uart);
 8005044:	466c      	mov	r4, sp
 8005046:	f107 0310 	add.w	r3, r7, #16
 800504a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800504c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005050:	463b      	mov	r3, r7
 8005052:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005054:	f7ff fec2 	bl	8004ddc <Drv_RegisterIRQ_callback>

	TEST_CBK.init = &init_test_callback;
 8005058:	4b05      	ldr	r3, [pc, #20]	; (8005070 <init_test_callback+0x90>)
 800505a:	4a0a      	ldr	r2, [pc, #40]	; (8005084 <init_test_callback+0xa4>)
 800505c:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	TEST_CBK.run = &run_test_callback;
 8005060:	4b03      	ldr	r3, [pc, #12]	; (8005070 <init_test_callback+0x90>)
 8005062:	4a09      	ldr	r2, [pc, #36]	; (8005088 <init_test_callback+0xa8>)
 8005064:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
}
 8005068:	bf00      	nop
 800506a:	3744      	adds	r7, #68	; 0x44
 800506c:	46bd      	mov	sp, r7
 800506e:	bd90      	pop	{r4, r7, pc}
 8005070:	200009d8 	.word	0x200009d8
 8005074:	20000b90 	.word	0x20000b90
 8005078:	08004ec1 	.word	0x08004ec1
 800507c:	40013800 	.word	0x40013800
 8005080:	08004f29 	.word	0x08004f29
 8005084:	08004fe1 	.word	0x08004fe1
 8005088:	08004f71 	.word	0x08004f71

0800508c <__errno>:
 800508c:	4b01      	ldr	r3, [pc, #4]	; (8005094 <__errno+0x8>)
 800508e:	6818      	ldr	r0, [r3, #0]
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	2000000c 	.word	0x2000000c

08005098 <__libc_init_array>:
 8005098:	b570      	push	{r4, r5, r6, lr}
 800509a:	4d0d      	ldr	r5, [pc, #52]	; (80050d0 <__libc_init_array+0x38>)
 800509c:	4c0d      	ldr	r4, [pc, #52]	; (80050d4 <__libc_init_array+0x3c>)
 800509e:	1b64      	subs	r4, r4, r5
 80050a0:	10a4      	asrs	r4, r4, #2
 80050a2:	2600      	movs	r6, #0
 80050a4:	42a6      	cmp	r6, r4
 80050a6:	d109      	bne.n	80050bc <__libc_init_array+0x24>
 80050a8:	4d0b      	ldr	r5, [pc, #44]	; (80050d8 <__libc_init_array+0x40>)
 80050aa:	4c0c      	ldr	r4, [pc, #48]	; (80050dc <__libc_init_array+0x44>)
 80050ac:	f000 ff76 	bl	8005f9c <_init>
 80050b0:	1b64      	subs	r4, r4, r5
 80050b2:	10a4      	asrs	r4, r4, #2
 80050b4:	2600      	movs	r6, #0
 80050b6:	42a6      	cmp	r6, r4
 80050b8:	d105      	bne.n	80050c6 <__libc_init_array+0x2e>
 80050ba:	bd70      	pop	{r4, r5, r6, pc}
 80050bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80050c0:	4798      	blx	r3
 80050c2:	3601      	adds	r6, #1
 80050c4:	e7ee      	b.n	80050a4 <__libc_init_array+0xc>
 80050c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ca:	4798      	blx	r3
 80050cc:	3601      	adds	r6, #1
 80050ce:	e7f2      	b.n	80050b6 <__libc_init_array+0x1e>
 80050d0:	0800612c 	.word	0x0800612c
 80050d4:	0800612c 	.word	0x0800612c
 80050d8:	0800612c 	.word	0x0800612c
 80050dc:	08006130 	.word	0x08006130

080050e0 <memset>:
 80050e0:	4402      	add	r2, r0
 80050e2:	4603      	mov	r3, r0
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d100      	bne.n	80050ea <memset+0xa>
 80050e8:	4770      	bx	lr
 80050ea:	f803 1b01 	strb.w	r1, [r3], #1
 80050ee:	e7f9      	b.n	80050e4 <memset+0x4>

080050f0 <iprintf>:
 80050f0:	b40f      	push	{r0, r1, r2, r3}
 80050f2:	4b0a      	ldr	r3, [pc, #40]	; (800511c <iprintf+0x2c>)
 80050f4:	b513      	push	{r0, r1, r4, lr}
 80050f6:	681c      	ldr	r4, [r3, #0]
 80050f8:	b124      	cbz	r4, 8005104 <iprintf+0x14>
 80050fa:	69a3      	ldr	r3, [r4, #24]
 80050fc:	b913      	cbnz	r3, 8005104 <iprintf+0x14>
 80050fe:	4620      	mov	r0, r4
 8005100:	f000 f9e8 	bl	80054d4 <__sinit>
 8005104:	ab05      	add	r3, sp, #20
 8005106:	9a04      	ldr	r2, [sp, #16]
 8005108:	68a1      	ldr	r1, [r4, #8]
 800510a:	9301      	str	r3, [sp, #4]
 800510c:	4620      	mov	r0, r4
 800510e:	f000 fbb9 	bl	8005884 <_vfiprintf_r>
 8005112:	b002      	add	sp, #8
 8005114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005118:	b004      	add	sp, #16
 800511a:	4770      	bx	lr
 800511c:	2000000c 	.word	0x2000000c

08005120 <__swbuf_r>:
 8005120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005122:	460e      	mov	r6, r1
 8005124:	4614      	mov	r4, r2
 8005126:	4605      	mov	r5, r0
 8005128:	b118      	cbz	r0, 8005132 <__swbuf_r+0x12>
 800512a:	6983      	ldr	r3, [r0, #24]
 800512c:	b90b      	cbnz	r3, 8005132 <__swbuf_r+0x12>
 800512e:	f000 f9d1 	bl	80054d4 <__sinit>
 8005132:	4b21      	ldr	r3, [pc, #132]	; (80051b8 <__swbuf_r+0x98>)
 8005134:	429c      	cmp	r4, r3
 8005136:	d12b      	bne.n	8005190 <__swbuf_r+0x70>
 8005138:	686c      	ldr	r4, [r5, #4]
 800513a:	69a3      	ldr	r3, [r4, #24]
 800513c:	60a3      	str	r3, [r4, #8]
 800513e:	89a3      	ldrh	r3, [r4, #12]
 8005140:	071a      	lsls	r2, r3, #28
 8005142:	d52f      	bpl.n	80051a4 <__swbuf_r+0x84>
 8005144:	6923      	ldr	r3, [r4, #16]
 8005146:	b36b      	cbz	r3, 80051a4 <__swbuf_r+0x84>
 8005148:	6923      	ldr	r3, [r4, #16]
 800514a:	6820      	ldr	r0, [r4, #0]
 800514c:	1ac0      	subs	r0, r0, r3
 800514e:	6963      	ldr	r3, [r4, #20]
 8005150:	b2f6      	uxtb	r6, r6
 8005152:	4283      	cmp	r3, r0
 8005154:	4637      	mov	r7, r6
 8005156:	dc04      	bgt.n	8005162 <__swbuf_r+0x42>
 8005158:	4621      	mov	r1, r4
 800515a:	4628      	mov	r0, r5
 800515c:	f000 f926 	bl	80053ac <_fflush_r>
 8005160:	bb30      	cbnz	r0, 80051b0 <__swbuf_r+0x90>
 8005162:	68a3      	ldr	r3, [r4, #8]
 8005164:	3b01      	subs	r3, #1
 8005166:	60a3      	str	r3, [r4, #8]
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	6022      	str	r2, [r4, #0]
 800516e:	701e      	strb	r6, [r3, #0]
 8005170:	6963      	ldr	r3, [r4, #20]
 8005172:	3001      	adds	r0, #1
 8005174:	4283      	cmp	r3, r0
 8005176:	d004      	beq.n	8005182 <__swbuf_r+0x62>
 8005178:	89a3      	ldrh	r3, [r4, #12]
 800517a:	07db      	lsls	r3, r3, #31
 800517c:	d506      	bpl.n	800518c <__swbuf_r+0x6c>
 800517e:	2e0a      	cmp	r6, #10
 8005180:	d104      	bne.n	800518c <__swbuf_r+0x6c>
 8005182:	4621      	mov	r1, r4
 8005184:	4628      	mov	r0, r5
 8005186:	f000 f911 	bl	80053ac <_fflush_r>
 800518a:	b988      	cbnz	r0, 80051b0 <__swbuf_r+0x90>
 800518c:	4638      	mov	r0, r7
 800518e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005190:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <__swbuf_r+0x9c>)
 8005192:	429c      	cmp	r4, r3
 8005194:	d101      	bne.n	800519a <__swbuf_r+0x7a>
 8005196:	68ac      	ldr	r4, [r5, #8]
 8005198:	e7cf      	b.n	800513a <__swbuf_r+0x1a>
 800519a:	4b09      	ldr	r3, [pc, #36]	; (80051c0 <__swbuf_r+0xa0>)
 800519c:	429c      	cmp	r4, r3
 800519e:	bf08      	it	eq
 80051a0:	68ec      	ldreq	r4, [r5, #12]
 80051a2:	e7ca      	b.n	800513a <__swbuf_r+0x1a>
 80051a4:	4621      	mov	r1, r4
 80051a6:	4628      	mov	r0, r5
 80051a8:	f000 f80c 	bl	80051c4 <__swsetup_r>
 80051ac:	2800      	cmp	r0, #0
 80051ae:	d0cb      	beq.n	8005148 <__swbuf_r+0x28>
 80051b0:	f04f 37ff 	mov.w	r7, #4294967295
 80051b4:	e7ea      	b.n	800518c <__swbuf_r+0x6c>
 80051b6:	bf00      	nop
 80051b8:	080060b8 	.word	0x080060b8
 80051bc:	080060d8 	.word	0x080060d8
 80051c0:	08006098 	.word	0x08006098

080051c4 <__swsetup_r>:
 80051c4:	4b32      	ldr	r3, [pc, #200]	; (8005290 <__swsetup_r+0xcc>)
 80051c6:	b570      	push	{r4, r5, r6, lr}
 80051c8:	681d      	ldr	r5, [r3, #0]
 80051ca:	4606      	mov	r6, r0
 80051cc:	460c      	mov	r4, r1
 80051ce:	b125      	cbz	r5, 80051da <__swsetup_r+0x16>
 80051d0:	69ab      	ldr	r3, [r5, #24]
 80051d2:	b913      	cbnz	r3, 80051da <__swsetup_r+0x16>
 80051d4:	4628      	mov	r0, r5
 80051d6:	f000 f97d 	bl	80054d4 <__sinit>
 80051da:	4b2e      	ldr	r3, [pc, #184]	; (8005294 <__swsetup_r+0xd0>)
 80051dc:	429c      	cmp	r4, r3
 80051de:	d10f      	bne.n	8005200 <__swsetup_r+0x3c>
 80051e0:	686c      	ldr	r4, [r5, #4]
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051e8:	0719      	lsls	r1, r3, #28
 80051ea:	d42c      	bmi.n	8005246 <__swsetup_r+0x82>
 80051ec:	06dd      	lsls	r5, r3, #27
 80051ee:	d411      	bmi.n	8005214 <__swsetup_r+0x50>
 80051f0:	2309      	movs	r3, #9
 80051f2:	6033      	str	r3, [r6, #0]
 80051f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051f8:	81a3      	strh	r3, [r4, #12]
 80051fa:	f04f 30ff 	mov.w	r0, #4294967295
 80051fe:	e03e      	b.n	800527e <__swsetup_r+0xba>
 8005200:	4b25      	ldr	r3, [pc, #148]	; (8005298 <__swsetup_r+0xd4>)
 8005202:	429c      	cmp	r4, r3
 8005204:	d101      	bne.n	800520a <__swsetup_r+0x46>
 8005206:	68ac      	ldr	r4, [r5, #8]
 8005208:	e7eb      	b.n	80051e2 <__swsetup_r+0x1e>
 800520a:	4b24      	ldr	r3, [pc, #144]	; (800529c <__swsetup_r+0xd8>)
 800520c:	429c      	cmp	r4, r3
 800520e:	bf08      	it	eq
 8005210:	68ec      	ldreq	r4, [r5, #12]
 8005212:	e7e6      	b.n	80051e2 <__swsetup_r+0x1e>
 8005214:	0758      	lsls	r0, r3, #29
 8005216:	d512      	bpl.n	800523e <__swsetup_r+0x7a>
 8005218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800521a:	b141      	cbz	r1, 800522e <__swsetup_r+0x6a>
 800521c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005220:	4299      	cmp	r1, r3
 8005222:	d002      	beq.n	800522a <__swsetup_r+0x66>
 8005224:	4630      	mov	r0, r6
 8005226:	f000 fa59 	bl	80056dc <_free_r>
 800522a:	2300      	movs	r3, #0
 800522c:	6363      	str	r3, [r4, #52]	; 0x34
 800522e:	89a3      	ldrh	r3, [r4, #12]
 8005230:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005234:	81a3      	strh	r3, [r4, #12]
 8005236:	2300      	movs	r3, #0
 8005238:	6063      	str	r3, [r4, #4]
 800523a:	6923      	ldr	r3, [r4, #16]
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	89a3      	ldrh	r3, [r4, #12]
 8005240:	f043 0308 	orr.w	r3, r3, #8
 8005244:	81a3      	strh	r3, [r4, #12]
 8005246:	6923      	ldr	r3, [r4, #16]
 8005248:	b94b      	cbnz	r3, 800525e <__swsetup_r+0x9a>
 800524a:	89a3      	ldrh	r3, [r4, #12]
 800524c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005254:	d003      	beq.n	800525e <__swsetup_r+0x9a>
 8005256:	4621      	mov	r1, r4
 8005258:	4630      	mov	r0, r6
 800525a:	f000 f9ff 	bl	800565c <__smakebuf_r>
 800525e:	89a0      	ldrh	r0, [r4, #12]
 8005260:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005264:	f010 0301 	ands.w	r3, r0, #1
 8005268:	d00a      	beq.n	8005280 <__swsetup_r+0xbc>
 800526a:	2300      	movs	r3, #0
 800526c:	60a3      	str	r3, [r4, #8]
 800526e:	6963      	ldr	r3, [r4, #20]
 8005270:	425b      	negs	r3, r3
 8005272:	61a3      	str	r3, [r4, #24]
 8005274:	6923      	ldr	r3, [r4, #16]
 8005276:	b943      	cbnz	r3, 800528a <__swsetup_r+0xc6>
 8005278:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800527c:	d1ba      	bne.n	80051f4 <__swsetup_r+0x30>
 800527e:	bd70      	pop	{r4, r5, r6, pc}
 8005280:	0781      	lsls	r1, r0, #30
 8005282:	bf58      	it	pl
 8005284:	6963      	ldrpl	r3, [r4, #20]
 8005286:	60a3      	str	r3, [r4, #8]
 8005288:	e7f4      	b.n	8005274 <__swsetup_r+0xb0>
 800528a:	2000      	movs	r0, #0
 800528c:	e7f7      	b.n	800527e <__swsetup_r+0xba>
 800528e:	bf00      	nop
 8005290:	2000000c 	.word	0x2000000c
 8005294:	080060b8 	.word	0x080060b8
 8005298:	080060d8 	.word	0x080060d8
 800529c:	08006098 	.word	0x08006098

080052a0 <__sflush_r>:
 80052a0:	898a      	ldrh	r2, [r1, #12]
 80052a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052a6:	4605      	mov	r5, r0
 80052a8:	0710      	lsls	r0, r2, #28
 80052aa:	460c      	mov	r4, r1
 80052ac:	d458      	bmi.n	8005360 <__sflush_r+0xc0>
 80052ae:	684b      	ldr	r3, [r1, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	dc05      	bgt.n	80052c0 <__sflush_r+0x20>
 80052b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	dc02      	bgt.n	80052c0 <__sflush_r+0x20>
 80052ba:	2000      	movs	r0, #0
 80052bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052c2:	2e00      	cmp	r6, #0
 80052c4:	d0f9      	beq.n	80052ba <__sflush_r+0x1a>
 80052c6:	2300      	movs	r3, #0
 80052c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052cc:	682f      	ldr	r7, [r5, #0]
 80052ce:	602b      	str	r3, [r5, #0]
 80052d0:	d032      	beq.n	8005338 <__sflush_r+0x98>
 80052d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	075a      	lsls	r2, r3, #29
 80052d8:	d505      	bpl.n	80052e6 <__sflush_r+0x46>
 80052da:	6863      	ldr	r3, [r4, #4]
 80052dc:	1ac0      	subs	r0, r0, r3
 80052de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052e0:	b10b      	cbz	r3, 80052e6 <__sflush_r+0x46>
 80052e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052e4:	1ac0      	subs	r0, r0, r3
 80052e6:	2300      	movs	r3, #0
 80052e8:	4602      	mov	r2, r0
 80052ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052ec:	6a21      	ldr	r1, [r4, #32]
 80052ee:	4628      	mov	r0, r5
 80052f0:	47b0      	blx	r6
 80052f2:	1c43      	adds	r3, r0, #1
 80052f4:	89a3      	ldrh	r3, [r4, #12]
 80052f6:	d106      	bne.n	8005306 <__sflush_r+0x66>
 80052f8:	6829      	ldr	r1, [r5, #0]
 80052fa:	291d      	cmp	r1, #29
 80052fc:	d82c      	bhi.n	8005358 <__sflush_r+0xb8>
 80052fe:	4a2a      	ldr	r2, [pc, #168]	; (80053a8 <__sflush_r+0x108>)
 8005300:	40ca      	lsrs	r2, r1
 8005302:	07d6      	lsls	r6, r2, #31
 8005304:	d528      	bpl.n	8005358 <__sflush_r+0xb8>
 8005306:	2200      	movs	r2, #0
 8005308:	6062      	str	r2, [r4, #4]
 800530a:	04d9      	lsls	r1, r3, #19
 800530c:	6922      	ldr	r2, [r4, #16]
 800530e:	6022      	str	r2, [r4, #0]
 8005310:	d504      	bpl.n	800531c <__sflush_r+0x7c>
 8005312:	1c42      	adds	r2, r0, #1
 8005314:	d101      	bne.n	800531a <__sflush_r+0x7a>
 8005316:	682b      	ldr	r3, [r5, #0]
 8005318:	b903      	cbnz	r3, 800531c <__sflush_r+0x7c>
 800531a:	6560      	str	r0, [r4, #84]	; 0x54
 800531c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800531e:	602f      	str	r7, [r5, #0]
 8005320:	2900      	cmp	r1, #0
 8005322:	d0ca      	beq.n	80052ba <__sflush_r+0x1a>
 8005324:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005328:	4299      	cmp	r1, r3
 800532a:	d002      	beq.n	8005332 <__sflush_r+0x92>
 800532c:	4628      	mov	r0, r5
 800532e:	f000 f9d5 	bl	80056dc <_free_r>
 8005332:	2000      	movs	r0, #0
 8005334:	6360      	str	r0, [r4, #52]	; 0x34
 8005336:	e7c1      	b.n	80052bc <__sflush_r+0x1c>
 8005338:	6a21      	ldr	r1, [r4, #32]
 800533a:	2301      	movs	r3, #1
 800533c:	4628      	mov	r0, r5
 800533e:	47b0      	blx	r6
 8005340:	1c41      	adds	r1, r0, #1
 8005342:	d1c7      	bne.n	80052d4 <__sflush_r+0x34>
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0c4      	beq.n	80052d4 <__sflush_r+0x34>
 800534a:	2b1d      	cmp	r3, #29
 800534c:	d001      	beq.n	8005352 <__sflush_r+0xb2>
 800534e:	2b16      	cmp	r3, #22
 8005350:	d101      	bne.n	8005356 <__sflush_r+0xb6>
 8005352:	602f      	str	r7, [r5, #0]
 8005354:	e7b1      	b.n	80052ba <__sflush_r+0x1a>
 8005356:	89a3      	ldrh	r3, [r4, #12]
 8005358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800535c:	81a3      	strh	r3, [r4, #12]
 800535e:	e7ad      	b.n	80052bc <__sflush_r+0x1c>
 8005360:	690f      	ldr	r7, [r1, #16]
 8005362:	2f00      	cmp	r7, #0
 8005364:	d0a9      	beq.n	80052ba <__sflush_r+0x1a>
 8005366:	0793      	lsls	r3, r2, #30
 8005368:	680e      	ldr	r6, [r1, #0]
 800536a:	bf08      	it	eq
 800536c:	694b      	ldreq	r3, [r1, #20]
 800536e:	600f      	str	r7, [r1, #0]
 8005370:	bf18      	it	ne
 8005372:	2300      	movne	r3, #0
 8005374:	eba6 0807 	sub.w	r8, r6, r7
 8005378:	608b      	str	r3, [r1, #8]
 800537a:	f1b8 0f00 	cmp.w	r8, #0
 800537e:	dd9c      	ble.n	80052ba <__sflush_r+0x1a>
 8005380:	6a21      	ldr	r1, [r4, #32]
 8005382:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005384:	4643      	mov	r3, r8
 8005386:	463a      	mov	r2, r7
 8005388:	4628      	mov	r0, r5
 800538a:	47b0      	blx	r6
 800538c:	2800      	cmp	r0, #0
 800538e:	dc06      	bgt.n	800539e <__sflush_r+0xfe>
 8005390:	89a3      	ldrh	r3, [r4, #12]
 8005392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005396:	81a3      	strh	r3, [r4, #12]
 8005398:	f04f 30ff 	mov.w	r0, #4294967295
 800539c:	e78e      	b.n	80052bc <__sflush_r+0x1c>
 800539e:	4407      	add	r7, r0
 80053a0:	eba8 0800 	sub.w	r8, r8, r0
 80053a4:	e7e9      	b.n	800537a <__sflush_r+0xda>
 80053a6:	bf00      	nop
 80053a8:	20400001 	.word	0x20400001

080053ac <_fflush_r>:
 80053ac:	b538      	push	{r3, r4, r5, lr}
 80053ae:	690b      	ldr	r3, [r1, #16]
 80053b0:	4605      	mov	r5, r0
 80053b2:	460c      	mov	r4, r1
 80053b4:	b913      	cbnz	r3, 80053bc <_fflush_r+0x10>
 80053b6:	2500      	movs	r5, #0
 80053b8:	4628      	mov	r0, r5
 80053ba:	bd38      	pop	{r3, r4, r5, pc}
 80053bc:	b118      	cbz	r0, 80053c6 <_fflush_r+0x1a>
 80053be:	6983      	ldr	r3, [r0, #24]
 80053c0:	b90b      	cbnz	r3, 80053c6 <_fflush_r+0x1a>
 80053c2:	f000 f887 	bl	80054d4 <__sinit>
 80053c6:	4b14      	ldr	r3, [pc, #80]	; (8005418 <_fflush_r+0x6c>)
 80053c8:	429c      	cmp	r4, r3
 80053ca:	d11b      	bne.n	8005404 <_fflush_r+0x58>
 80053cc:	686c      	ldr	r4, [r5, #4]
 80053ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0ef      	beq.n	80053b6 <_fflush_r+0xa>
 80053d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053d8:	07d0      	lsls	r0, r2, #31
 80053da:	d404      	bmi.n	80053e6 <_fflush_r+0x3a>
 80053dc:	0599      	lsls	r1, r3, #22
 80053de:	d402      	bmi.n	80053e6 <_fflush_r+0x3a>
 80053e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053e2:	f000 f915 	bl	8005610 <__retarget_lock_acquire_recursive>
 80053e6:	4628      	mov	r0, r5
 80053e8:	4621      	mov	r1, r4
 80053ea:	f7ff ff59 	bl	80052a0 <__sflush_r>
 80053ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053f0:	07da      	lsls	r2, r3, #31
 80053f2:	4605      	mov	r5, r0
 80053f4:	d4e0      	bmi.n	80053b8 <_fflush_r+0xc>
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	059b      	lsls	r3, r3, #22
 80053fa:	d4dd      	bmi.n	80053b8 <_fflush_r+0xc>
 80053fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053fe:	f000 f908 	bl	8005612 <__retarget_lock_release_recursive>
 8005402:	e7d9      	b.n	80053b8 <_fflush_r+0xc>
 8005404:	4b05      	ldr	r3, [pc, #20]	; (800541c <_fflush_r+0x70>)
 8005406:	429c      	cmp	r4, r3
 8005408:	d101      	bne.n	800540e <_fflush_r+0x62>
 800540a:	68ac      	ldr	r4, [r5, #8]
 800540c:	e7df      	b.n	80053ce <_fflush_r+0x22>
 800540e:	4b04      	ldr	r3, [pc, #16]	; (8005420 <_fflush_r+0x74>)
 8005410:	429c      	cmp	r4, r3
 8005412:	bf08      	it	eq
 8005414:	68ec      	ldreq	r4, [r5, #12]
 8005416:	e7da      	b.n	80053ce <_fflush_r+0x22>
 8005418:	080060b8 	.word	0x080060b8
 800541c:	080060d8 	.word	0x080060d8
 8005420:	08006098 	.word	0x08006098

08005424 <std>:
 8005424:	2300      	movs	r3, #0
 8005426:	b510      	push	{r4, lr}
 8005428:	4604      	mov	r4, r0
 800542a:	e9c0 3300 	strd	r3, r3, [r0]
 800542e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005432:	6083      	str	r3, [r0, #8]
 8005434:	8181      	strh	r1, [r0, #12]
 8005436:	6643      	str	r3, [r0, #100]	; 0x64
 8005438:	81c2      	strh	r2, [r0, #14]
 800543a:	6183      	str	r3, [r0, #24]
 800543c:	4619      	mov	r1, r3
 800543e:	2208      	movs	r2, #8
 8005440:	305c      	adds	r0, #92	; 0x5c
 8005442:	f7ff fe4d 	bl	80050e0 <memset>
 8005446:	4b05      	ldr	r3, [pc, #20]	; (800545c <std+0x38>)
 8005448:	6263      	str	r3, [r4, #36]	; 0x24
 800544a:	4b05      	ldr	r3, [pc, #20]	; (8005460 <std+0x3c>)
 800544c:	62a3      	str	r3, [r4, #40]	; 0x28
 800544e:	4b05      	ldr	r3, [pc, #20]	; (8005464 <std+0x40>)
 8005450:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005452:	4b05      	ldr	r3, [pc, #20]	; (8005468 <std+0x44>)
 8005454:	6224      	str	r4, [r4, #32]
 8005456:	6323      	str	r3, [r4, #48]	; 0x30
 8005458:	bd10      	pop	{r4, pc}
 800545a:	bf00      	nop
 800545c:	08005e2d 	.word	0x08005e2d
 8005460:	08005e4f 	.word	0x08005e4f
 8005464:	08005e87 	.word	0x08005e87
 8005468:	08005eab 	.word	0x08005eab

0800546c <_cleanup_r>:
 800546c:	4901      	ldr	r1, [pc, #4]	; (8005474 <_cleanup_r+0x8>)
 800546e:	f000 b8af 	b.w	80055d0 <_fwalk_reent>
 8005472:	bf00      	nop
 8005474:	080053ad 	.word	0x080053ad

08005478 <__sfmoreglue>:
 8005478:	b570      	push	{r4, r5, r6, lr}
 800547a:	1e4a      	subs	r2, r1, #1
 800547c:	2568      	movs	r5, #104	; 0x68
 800547e:	4355      	muls	r5, r2
 8005480:	460e      	mov	r6, r1
 8005482:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005486:	f000 f979 	bl	800577c <_malloc_r>
 800548a:	4604      	mov	r4, r0
 800548c:	b140      	cbz	r0, 80054a0 <__sfmoreglue+0x28>
 800548e:	2100      	movs	r1, #0
 8005490:	e9c0 1600 	strd	r1, r6, [r0]
 8005494:	300c      	adds	r0, #12
 8005496:	60a0      	str	r0, [r4, #8]
 8005498:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800549c:	f7ff fe20 	bl	80050e0 <memset>
 80054a0:	4620      	mov	r0, r4
 80054a2:	bd70      	pop	{r4, r5, r6, pc}

080054a4 <__sfp_lock_acquire>:
 80054a4:	4801      	ldr	r0, [pc, #4]	; (80054ac <__sfp_lock_acquire+0x8>)
 80054a6:	f000 b8b3 	b.w	8005610 <__retarget_lock_acquire_recursive>
 80054aa:	bf00      	nop
 80054ac:	20000ba8 	.word	0x20000ba8

080054b0 <__sfp_lock_release>:
 80054b0:	4801      	ldr	r0, [pc, #4]	; (80054b8 <__sfp_lock_release+0x8>)
 80054b2:	f000 b8ae 	b.w	8005612 <__retarget_lock_release_recursive>
 80054b6:	bf00      	nop
 80054b8:	20000ba8 	.word	0x20000ba8

080054bc <__sinit_lock_acquire>:
 80054bc:	4801      	ldr	r0, [pc, #4]	; (80054c4 <__sinit_lock_acquire+0x8>)
 80054be:	f000 b8a7 	b.w	8005610 <__retarget_lock_acquire_recursive>
 80054c2:	bf00      	nop
 80054c4:	20000ba3 	.word	0x20000ba3

080054c8 <__sinit_lock_release>:
 80054c8:	4801      	ldr	r0, [pc, #4]	; (80054d0 <__sinit_lock_release+0x8>)
 80054ca:	f000 b8a2 	b.w	8005612 <__retarget_lock_release_recursive>
 80054ce:	bf00      	nop
 80054d0:	20000ba3 	.word	0x20000ba3

080054d4 <__sinit>:
 80054d4:	b510      	push	{r4, lr}
 80054d6:	4604      	mov	r4, r0
 80054d8:	f7ff fff0 	bl	80054bc <__sinit_lock_acquire>
 80054dc:	69a3      	ldr	r3, [r4, #24]
 80054de:	b11b      	cbz	r3, 80054e8 <__sinit+0x14>
 80054e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054e4:	f7ff bff0 	b.w	80054c8 <__sinit_lock_release>
 80054e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80054ec:	6523      	str	r3, [r4, #80]	; 0x50
 80054ee:	4b13      	ldr	r3, [pc, #76]	; (800553c <__sinit+0x68>)
 80054f0:	4a13      	ldr	r2, [pc, #76]	; (8005540 <__sinit+0x6c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80054f6:	42a3      	cmp	r3, r4
 80054f8:	bf04      	itt	eq
 80054fa:	2301      	moveq	r3, #1
 80054fc:	61a3      	streq	r3, [r4, #24]
 80054fe:	4620      	mov	r0, r4
 8005500:	f000 f820 	bl	8005544 <__sfp>
 8005504:	6060      	str	r0, [r4, #4]
 8005506:	4620      	mov	r0, r4
 8005508:	f000 f81c 	bl	8005544 <__sfp>
 800550c:	60a0      	str	r0, [r4, #8]
 800550e:	4620      	mov	r0, r4
 8005510:	f000 f818 	bl	8005544 <__sfp>
 8005514:	2200      	movs	r2, #0
 8005516:	60e0      	str	r0, [r4, #12]
 8005518:	2104      	movs	r1, #4
 800551a:	6860      	ldr	r0, [r4, #4]
 800551c:	f7ff ff82 	bl	8005424 <std>
 8005520:	68a0      	ldr	r0, [r4, #8]
 8005522:	2201      	movs	r2, #1
 8005524:	2109      	movs	r1, #9
 8005526:	f7ff ff7d 	bl	8005424 <std>
 800552a:	68e0      	ldr	r0, [r4, #12]
 800552c:	2202      	movs	r2, #2
 800552e:	2112      	movs	r1, #18
 8005530:	f7ff ff78 	bl	8005424 <std>
 8005534:	2301      	movs	r3, #1
 8005536:	61a3      	str	r3, [r4, #24]
 8005538:	e7d2      	b.n	80054e0 <__sinit+0xc>
 800553a:	bf00      	nop
 800553c:	08006094 	.word	0x08006094
 8005540:	0800546d 	.word	0x0800546d

08005544 <__sfp>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	4607      	mov	r7, r0
 8005548:	f7ff ffac 	bl	80054a4 <__sfp_lock_acquire>
 800554c:	4b1e      	ldr	r3, [pc, #120]	; (80055c8 <__sfp+0x84>)
 800554e:	681e      	ldr	r6, [r3, #0]
 8005550:	69b3      	ldr	r3, [r6, #24]
 8005552:	b913      	cbnz	r3, 800555a <__sfp+0x16>
 8005554:	4630      	mov	r0, r6
 8005556:	f7ff ffbd 	bl	80054d4 <__sinit>
 800555a:	3648      	adds	r6, #72	; 0x48
 800555c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005560:	3b01      	subs	r3, #1
 8005562:	d503      	bpl.n	800556c <__sfp+0x28>
 8005564:	6833      	ldr	r3, [r6, #0]
 8005566:	b30b      	cbz	r3, 80055ac <__sfp+0x68>
 8005568:	6836      	ldr	r6, [r6, #0]
 800556a:	e7f7      	b.n	800555c <__sfp+0x18>
 800556c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005570:	b9d5      	cbnz	r5, 80055a8 <__sfp+0x64>
 8005572:	4b16      	ldr	r3, [pc, #88]	; (80055cc <__sfp+0x88>)
 8005574:	60e3      	str	r3, [r4, #12]
 8005576:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800557a:	6665      	str	r5, [r4, #100]	; 0x64
 800557c:	f000 f847 	bl	800560e <__retarget_lock_init_recursive>
 8005580:	f7ff ff96 	bl	80054b0 <__sfp_lock_release>
 8005584:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005588:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800558c:	6025      	str	r5, [r4, #0]
 800558e:	61a5      	str	r5, [r4, #24]
 8005590:	2208      	movs	r2, #8
 8005592:	4629      	mov	r1, r5
 8005594:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005598:	f7ff fda2 	bl	80050e0 <memset>
 800559c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80055a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80055a4:	4620      	mov	r0, r4
 80055a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055a8:	3468      	adds	r4, #104	; 0x68
 80055aa:	e7d9      	b.n	8005560 <__sfp+0x1c>
 80055ac:	2104      	movs	r1, #4
 80055ae:	4638      	mov	r0, r7
 80055b0:	f7ff ff62 	bl	8005478 <__sfmoreglue>
 80055b4:	4604      	mov	r4, r0
 80055b6:	6030      	str	r0, [r6, #0]
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d1d5      	bne.n	8005568 <__sfp+0x24>
 80055bc:	f7ff ff78 	bl	80054b0 <__sfp_lock_release>
 80055c0:	230c      	movs	r3, #12
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	e7ee      	b.n	80055a4 <__sfp+0x60>
 80055c6:	bf00      	nop
 80055c8:	08006094 	.word	0x08006094
 80055cc:	ffff0001 	.word	0xffff0001

080055d0 <_fwalk_reent>:
 80055d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055d4:	4606      	mov	r6, r0
 80055d6:	4688      	mov	r8, r1
 80055d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80055dc:	2700      	movs	r7, #0
 80055de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055e2:	f1b9 0901 	subs.w	r9, r9, #1
 80055e6:	d505      	bpl.n	80055f4 <_fwalk_reent+0x24>
 80055e8:	6824      	ldr	r4, [r4, #0]
 80055ea:	2c00      	cmp	r4, #0
 80055ec:	d1f7      	bne.n	80055de <_fwalk_reent+0xe>
 80055ee:	4638      	mov	r0, r7
 80055f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055f4:	89ab      	ldrh	r3, [r5, #12]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d907      	bls.n	800560a <_fwalk_reent+0x3a>
 80055fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055fe:	3301      	adds	r3, #1
 8005600:	d003      	beq.n	800560a <_fwalk_reent+0x3a>
 8005602:	4629      	mov	r1, r5
 8005604:	4630      	mov	r0, r6
 8005606:	47c0      	blx	r8
 8005608:	4307      	orrs	r7, r0
 800560a:	3568      	adds	r5, #104	; 0x68
 800560c:	e7e9      	b.n	80055e2 <_fwalk_reent+0x12>

0800560e <__retarget_lock_init_recursive>:
 800560e:	4770      	bx	lr

08005610 <__retarget_lock_acquire_recursive>:
 8005610:	4770      	bx	lr

08005612 <__retarget_lock_release_recursive>:
 8005612:	4770      	bx	lr

08005614 <__swhatbuf_r>:
 8005614:	b570      	push	{r4, r5, r6, lr}
 8005616:	460e      	mov	r6, r1
 8005618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800561c:	2900      	cmp	r1, #0
 800561e:	b096      	sub	sp, #88	; 0x58
 8005620:	4614      	mov	r4, r2
 8005622:	461d      	mov	r5, r3
 8005624:	da07      	bge.n	8005636 <__swhatbuf_r+0x22>
 8005626:	2300      	movs	r3, #0
 8005628:	602b      	str	r3, [r5, #0]
 800562a:	89b3      	ldrh	r3, [r6, #12]
 800562c:	061a      	lsls	r2, r3, #24
 800562e:	d410      	bmi.n	8005652 <__swhatbuf_r+0x3e>
 8005630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005634:	e00e      	b.n	8005654 <__swhatbuf_r+0x40>
 8005636:	466a      	mov	r2, sp
 8005638:	f000 fc5e 	bl	8005ef8 <_fstat_r>
 800563c:	2800      	cmp	r0, #0
 800563e:	dbf2      	blt.n	8005626 <__swhatbuf_r+0x12>
 8005640:	9a01      	ldr	r2, [sp, #4]
 8005642:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005646:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800564a:	425a      	negs	r2, r3
 800564c:	415a      	adcs	r2, r3
 800564e:	602a      	str	r2, [r5, #0]
 8005650:	e7ee      	b.n	8005630 <__swhatbuf_r+0x1c>
 8005652:	2340      	movs	r3, #64	; 0x40
 8005654:	2000      	movs	r0, #0
 8005656:	6023      	str	r3, [r4, #0]
 8005658:	b016      	add	sp, #88	; 0x58
 800565a:	bd70      	pop	{r4, r5, r6, pc}

0800565c <__smakebuf_r>:
 800565c:	898b      	ldrh	r3, [r1, #12]
 800565e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005660:	079d      	lsls	r5, r3, #30
 8005662:	4606      	mov	r6, r0
 8005664:	460c      	mov	r4, r1
 8005666:	d507      	bpl.n	8005678 <__smakebuf_r+0x1c>
 8005668:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	6123      	str	r3, [r4, #16]
 8005670:	2301      	movs	r3, #1
 8005672:	6163      	str	r3, [r4, #20]
 8005674:	b002      	add	sp, #8
 8005676:	bd70      	pop	{r4, r5, r6, pc}
 8005678:	ab01      	add	r3, sp, #4
 800567a:	466a      	mov	r2, sp
 800567c:	f7ff ffca 	bl	8005614 <__swhatbuf_r>
 8005680:	9900      	ldr	r1, [sp, #0]
 8005682:	4605      	mov	r5, r0
 8005684:	4630      	mov	r0, r6
 8005686:	f000 f879 	bl	800577c <_malloc_r>
 800568a:	b948      	cbnz	r0, 80056a0 <__smakebuf_r+0x44>
 800568c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005690:	059a      	lsls	r2, r3, #22
 8005692:	d4ef      	bmi.n	8005674 <__smakebuf_r+0x18>
 8005694:	f023 0303 	bic.w	r3, r3, #3
 8005698:	f043 0302 	orr.w	r3, r3, #2
 800569c:	81a3      	strh	r3, [r4, #12]
 800569e:	e7e3      	b.n	8005668 <__smakebuf_r+0xc>
 80056a0:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <__smakebuf_r+0x7c>)
 80056a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	6020      	str	r0, [r4, #0]
 80056a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ac:	81a3      	strh	r3, [r4, #12]
 80056ae:	9b00      	ldr	r3, [sp, #0]
 80056b0:	6163      	str	r3, [r4, #20]
 80056b2:	9b01      	ldr	r3, [sp, #4]
 80056b4:	6120      	str	r0, [r4, #16]
 80056b6:	b15b      	cbz	r3, 80056d0 <__smakebuf_r+0x74>
 80056b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056bc:	4630      	mov	r0, r6
 80056be:	f000 fc2d 	bl	8005f1c <_isatty_r>
 80056c2:	b128      	cbz	r0, 80056d0 <__smakebuf_r+0x74>
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	f023 0303 	bic.w	r3, r3, #3
 80056ca:	f043 0301 	orr.w	r3, r3, #1
 80056ce:	81a3      	strh	r3, [r4, #12]
 80056d0:	89a0      	ldrh	r0, [r4, #12]
 80056d2:	4305      	orrs	r5, r0
 80056d4:	81a5      	strh	r5, [r4, #12]
 80056d6:	e7cd      	b.n	8005674 <__smakebuf_r+0x18>
 80056d8:	0800546d 	.word	0x0800546d

080056dc <_free_r>:
 80056dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056de:	2900      	cmp	r1, #0
 80056e0:	d048      	beq.n	8005774 <_free_r+0x98>
 80056e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056e6:	9001      	str	r0, [sp, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f1a1 0404 	sub.w	r4, r1, #4
 80056ee:	bfb8      	it	lt
 80056f0:	18e4      	addlt	r4, r4, r3
 80056f2:	f000 fc35 	bl	8005f60 <__malloc_lock>
 80056f6:	4a20      	ldr	r2, [pc, #128]	; (8005778 <_free_r+0x9c>)
 80056f8:	9801      	ldr	r0, [sp, #4]
 80056fa:	6813      	ldr	r3, [r2, #0]
 80056fc:	4615      	mov	r5, r2
 80056fe:	b933      	cbnz	r3, 800570e <_free_r+0x32>
 8005700:	6063      	str	r3, [r4, #4]
 8005702:	6014      	str	r4, [r2, #0]
 8005704:	b003      	add	sp, #12
 8005706:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800570a:	f000 bc2f 	b.w	8005f6c <__malloc_unlock>
 800570e:	42a3      	cmp	r3, r4
 8005710:	d90b      	bls.n	800572a <_free_r+0x4e>
 8005712:	6821      	ldr	r1, [r4, #0]
 8005714:	1862      	adds	r2, r4, r1
 8005716:	4293      	cmp	r3, r2
 8005718:	bf04      	itt	eq
 800571a:	681a      	ldreq	r2, [r3, #0]
 800571c:	685b      	ldreq	r3, [r3, #4]
 800571e:	6063      	str	r3, [r4, #4]
 8005720:	bf04      	itt	eq
 8005722:	1852      	addeq	r2, r2, r1
 8005724:	6022      	streq	r2, [r4, #0]
 8005726:	602c      	str	r4, [r5, #0]
 8005728:	e7ec      	b.n	8005704 <_free_r+0x28>
 800572a:	461a      	mov	r2, r3
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	b10b      	cbz	r3, 8005734 <_free_r+0x58>
 8005730:	42a3      	cmp	r3, r4
 8005732:	d9fa      	bls.n	800572a <_free_r+0x4e>
 8005734:	6811      	ldr	r1, [r2, #0]
 8005736:	1855      	adds	r5, r2, r1
 8005738:	42a5      	cmp	r5, r4
 800573a:	d10b      	bne.n	8005754 <_free_r+0x78>
 800573c:	6824      	ldr	r4, [r4, #0]
 800573e:	4421      	add	r1, r4
 8005740:	1854      	adds	r4, r2, r1
 8005742:	42a3      	cmp	r3, r4
 8005744:	6011      	str	r1, [r2, #0]
 8005746:	d1dd      	bne.n	8005704 <_free_r+0x28>
 8005748:	681c      	ldr	r4, [r3, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	6053      	str	r3, [r2, #4]
 800574e:	4421      	add	r1, r4
 8005750:	6011      	str	r1, [r2, #0]
 8005752:	e7d7      	b.n	8005704 <_free_r+0x28>
 8005754:	d902      	bls.n	800575c <_free_r+0x80>
 8005756:	230c      	movs	r3, #12
 8005758:	6003      	str	r3, [r0, #0]
 800575a:	e7d3      	b.n	8005704 <_free_r+0x28>
 800575c:	6825      	ldr	r5, [r4, #0]
 800575e:	1961      	adds	r1, r4, r5
 8005760:	428b      	cmp	r3, r1
 8005762:	bf04      	itt	eq
 8005764:	6819      	ldreq	r1, [r3, #0]
 8005766:	685b      	ldreq	r3, [r3, #4]
 8005768:	6063      	str	r3, [r4, #4]
 800576a:	bf04      	itt	eq
 800576c:	1949      	addeq	r1, r1, r5
 800576e:	6021      	streq	r1, [r4, #0]
 8005770:	6054      	str	r4, [r2, #4]
 8005772:	e7c7      	b.n	8005704 <_free_r+0x28>
 8005774:	b003      	add	sp, #12
 8005776:	bd30      	pop	{r4, r5, pc}
 8005778:	20000094 	.word	0x20000094

0800577c <_malloc_r>:
 800577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577e:	1ccd      	adds	r5, r1, #3
 8005780:	f025 0503 	bic.w	r5, r5, #3
 8005784:	3508      	adds	r5, #8
 8005786:	2d0c      	cmp	r5, #12
 8005788:	bf38      	it	cc
 800578a:	250c      	movcc	r5, #12
 800578c:	2d00      	cmp	r5, #0
 800578e:	4606      	mov	r6, r0
 8005790:	db01      	blt.n	8005796 <_malloc_r+0x1a>
 8005792:	42a9      	cmp	r1, r5
 8005794:	d903      	bls.n	800579e <_malloc_r+0x22>
 8005796:	230c      	movs	r3, #12
 8005798:	6033      	str	r3, [r6, #0]
 800579a:	2000      	movs	r0, #0
 800579c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800579e:	f000 fbdf 	bl	8005f60 <__malloc_lock>
 80057a2:	4921      	ldr	r1, [pc, #132]	; (8005828 <_malloc_r+0xac>)
 80057a4:	680a      	ldr	r2, [r1, #0]
 80057a6:	4614      	mov	r4, r2
 80057a8:	b99c      	cbnz	r4, 80057d2 <_malloc_r+0x56>
 80057aa:	4f20      	ldr	r7, [pc, #128]	; (800582c <_malloc_r+0xb0>)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	b923      	cbnz	r3, 80057ba <_malloc_r+0x3e>
 80057b0:	4621      	mov	r1, r4
 80057b2:	4630      	mov	r0, r6
 80057b4:	f000 fb2a 	bl	8005e0c <_sbrk_r>
 80057b8:	6038      	str	r0, [r7, #0]
 80057ba:	4629      	mov	r1, r5
 80057bc:	4630      	mov	r0, r6
 80057be:	f000 fb25 	bl	8005e0c <_sbrk_r>
 80057c2:	1c43      	adds	r3, r0, #1
 80057c4:	d123      	bne.n	800580e <_malloc_r+0x92>
 80057c6:	230c      	movs	r3, #12
 80057c8:	6033      	str	r3, [r6, #0]
 80057ca:	4630      	mov	r0, r6
 80057cc:	f000 fbce 	bl	8005f6c <__malloc_unlock>
 80057d0:	e7e3      	b.n	800579a <_malloc_r+0x1e>
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	1b5b      	subs	r3, r3, r5
 80057d6:	d417      	bmi.n	8005808 <_malloc_r+0x8c>
 80057d8:	2b0b      	cmp	r3, #11
 80057da:	d903      	bls.n	80057e4 <_malloc_r+0x68>
 80057dc:	6023      	str	r3, [r4, #0]
 80057de:	441c      	add	r4, r3
 80057e0:	6025      	str	r5, [r4, #0]
 80057e2:	e004      	b.n	80057ee <_malloc_r+0x72>
 80057e4:	6863      	ldr	r3, [r4, #4]
 80057e6:	42a2      	cmp	r2, r4
 80057e8:	bf0c      	ite	eq
 80057ea:	600b      	streq	r3, [r1, #0]
 80057ec:	6053      	strne	r3, [r2, #4]
 80057ee:	4630      	mov	r0, r6
 80057f0:	f000 fbbc 	bl	8005f6c <__malloc_unlock>
 80057f4:	f104 000b 	add.w	r0, r4, #11
 80057f8:	1d23      	adds	r3, r4, #4
 80057fa:	f020 0007 	bic.w	r0, r0, #7
 80057fe:	1ac2      	subs	r2, r0, r3
 8005800:	d0cc      	beq.n	800579c <_malloc_r+0x20>
 8005802:	1a1b      	subs	r3, r3, r0
 8005804:	50a3      	str	r3, [r4, r2]
 8005806:	e7c9      	b.n	800579c <_malloc_r+0x20>
 8005808:	4622      	mov	r2, r4
 800580a:	6864      	ldr	r4, [r4, #4]
 800580c:	e7cc      	b.n	80057a8 <_malloc_r+0x2c>
 800580e:	1cc4      	adds	r4, r0, #3
 8005810:	f024 0403 	bic.w	r4, r4, #3
 8005814:	42a0      	cmp	r0, r4
 8005816:	d0e3      	beq.n	80057e0 <_malloc_r+0x64>
 8005818:	1a21      	subs	r1, r4, r0
 800581a:	4630      	mov	r0, r6
 800581c:	f000 faf6 	bl	8005e0c <_sbrk_r>
 8005820:	3001      	adds	r0, #1
 8005822:	d1dd      	bne.n	80057e0 <_malloc_r+0x64>
 8005824:	e7cf      	b.n	80057c6 <_malloc_r+0x4a>
 8005826:	bf00      	nop
 8005828:	20000094 	.word	0x20000094
 800582c:	20000098 	.word	0x20000098

08005830 <__sfputc_r>:
 8005830:	6893      	ldr	r3, [r2, #8]
 8005832:	3b01      	subs	r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	b410      	push	{r4}
 8005838:	6093      	str	r3, [r2, #8]
 800583a:	da08      	bge.n	800584e <__sfputc_r+0x1e>
 800583c:	6994      	ldr	r4, [r2, #24]
 800583e:	42a3      	cmp	r3, r4
 8005840:	db01      	blt.n	8005846 <__sfputc_r+0x16>
 8005842:	290a      	cmp	r1, #10
 8005844:	d103      	bne.n	800584e <__sfputc_r+0x1e>
 8005846:	f85d 4b04 	ldr.w	r4, [sp], #4
 800584a:	f7ff bc69 	b.w	8005120 <__swbuf_r>
 800584e:	6813      	ldr	r3, [r2, #0]
 8005850:	1c58      	adds	r0, r3, #1
 8005852:	6010      	str	r0, [r2, #0]
 8005854:	7019      	strb	r1, [r3, #0]
 8005856:	4608      	mov	r0, r1
 8005858:	f85d 4b04 	ldr.w	r4, [sp], #4
 800585c:	4770      	bx	lr

0800585e <__sfputs_r>:
 800585e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005860:	4606      	mov	r6, r0
 8005862:	460f      	mov	r7, r1
 8005864:	4614      	mov	r4, r2
 8005866:	18d5      	adds	r5, r2, r3
 8005868:	42ac      	cmp	r4, r5
 800586a:	d101      	bne.n	8005870 <__sfputs_r+0x12>
 800586c:	2000      	movs	r0, #0
 800586e:	e007      	b.n	8005880 <__sfputs_r+0x22>
 8005870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005874:	463a      	mov	r2, r7
 8005876:	4630      	mov	r0, r6
 8005878:	f7ff ffda 	bl	8005830 <__sfputc_r>
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	d1f3      	bne.n	8005868 <__sfputs_r+0xa>
 8005880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005884 <_vfiprintf_r>:
 8005884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005888:	460d      	mov	r5, r1
 800588a:	b09d      	sub	sp, #116	; 0x74
 800588c:	4614      	mov	r4, r2
 800588e:	4698      	mov	r8, r3
 8005890:	4606      	mov	r6, r0
 8005892:	b118      	cbz	r0, 800589c <_vfiprintf_r+0x18>
 8005894:	6983      	ldr	r3, [r0, #24]
 8005896:	b90b      	cbnz	r3, 800589c <_vfiprintf_r+0x18>
 8005898:	f7ff fe1c 	bl	80054d4 <__sinit>
 800589c:	4b89      	ldr	r3, [pc, #548]	; (8005ac4 <_vfiprintf_r+0x240>)
 800589e:	429d      	cmp	r5, r3
 80058a0:	d11b      	bne.n	80058da <_vfiprintf_r+0x56>
 80058a2:	6875      	ldr	r5, [r6, #4]
 80058a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058a6:	07d9      	lsls	r1, r3, #31
 80058a8:	d405      	bmi.n	80058b6 <_vfiprintf_r+0x32>
 80058aa:	89ab      	ldrh	r3, [r5, #12]
 80058ac:	059a      	lsls	r2, r3, #22
 80058ae:	d402      	bmi.n	80058b6 <_vfiprintf_r+0x32>
 80058b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058b2:	f7ff fead 	bl	8005610 <__retarget_lock_acquire_recursive>
 80058b6:	89ab      	ldrh	r3, [r5, #12]
 80058b8:	071b      	lsls	r3, r3, #28
 80058ba:	d501      	bpl.n	80058c0 <_vfiprintf_r+0x3c>
 80058bc:	692b      	ldr	r3, [r5, #16]
 80058be:	b9eb      	cbnz	r3, 80058fc <_vfiprintf_r+0x78>
 80058c0:	4629      	mov	r1, r5
 80058c2:	4630      	mov	r0, r6
 80058c4:	f7ff fc7e 	bl	80051c4 <__swsetup_r>
 80058c8:	b1c0      	cbz	r0, 80058fc <_vfiprintf_r+0x78>
 80058ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058cc:	07dc      	lsls	r4, r3, #31
 80058ce:	d50e      	bpl.n	80058ee <_vfiprintf_r+0x6a>
 80058d0:	f04f 30ff 	mov.w	r0, #4294967295
 80058d4:	b01d      	add	sp, #116	; 0x74
 80058d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058da:	4b7b      	ldr	r3, [pc, #492]	; (8005ac8 <_vfiprintf_r+0x244>)
 80058dc:	429d      	cmp	r5, r3
 80058de:	d101      	bne.n	80058e4 <_vfiprintf_r+0x60>
 80058e0:	68b5      	ldr	r5, [r6, #8]
 80058e2:	e7df      	b.n	80058a4 <_vfiprintf_r+0x20>
 80058e4:	4b79      	ldr	r3, [pc, #484]	; (8005acc <_vfiprintf_r+0x248>)
 80058e6:	429d      	cmp	r5, r3
 80058e8:	bf08      	it	eq
 80058ea:	68f5      	ldreq	r5, [r6, #12]
 80058ec:	e7da      	b.n	80058a4 <_vfiprintf_r+0x20>
 80058ee:	89ab      	ldrh	r3, [r5, #12]
 80058f0:	0598      	lsls	r0, r3, #22
 80058f2:	d4ed      	bmi.n	80058d0 <_vfiprintf_r+0x4c>
 80058f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058f6:	f7ff fe8c 	bl	8005612 <__retarget_lock_release_recursive>
 80058fa:	e7e9      	b.n	80058d0 <_vfiprintf_r+0x4c>
 80058fc:	2300      	movs	r3, #0
 80058fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005900:	2320      	movs	r3, #32
 8005902:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005906:	f8cd 800c 	str.w	r8, [sp, #12]
 800590a:	2330      	movs	r3, #48	; 0x30
 800590c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005ad0 <_vfiprintf_r+0x24c>
 8005910:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005914:	f04f 0901 	mov.w	r9, #1
 8005918:	4623      	mov	r3, r4
 800591a:	469a      	mov	sl, r3
 800591c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005920:	b10a      	cbz	r2, 8005926 <_vfiprintf_r+0xa2>
 8005922:	2a25      	cmp	r2, #37	; 0x25
 8005924:	d1f9      	bne.n	800591a <_vfiprintf_r+0x96>
 8005926:	ebba 0b04 	subs.w	fp, sl, r4
 800592a:	d00b      	beq.n	8005944 <_vfiprintf_r+0xc0>
 800592c:	465b      	mov	r3, fp
 800592e:	4622      	mov	r2, r4
 8005930:	4629      	mov	r1, r5
 8005932:	4630      	mov	r0, r6
 8005934:	f7ff ff93 	bl	800585e <__sfputs_r>
 8005938:	3001      	adds	r0, #1
 800593a:	f000 80aa 	beq.w	8005a92 <_vfiprintf_r+0x20e>
 800593e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005940:	445a      	add	r2, fp
 8005942:	9209      	str	r2, [sp, #36]	; 0x24
 8005944:	f89a 3000 	ldrb.w	r3, [sl]
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 80a2 	beq.w	8005a92 <_vfiprintf_r+0x20e>
 800594e:	2300      	movs	r3, #0
 8005950:	f04f 32ff 	mov.w	r2, #4294967295
 8005954:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005958:	f10a 0a01 	add.w	sl, sl, #1
 800595c:	9304      	str	r3, [sp, #16]
 800595e:	9307      	str	r3, [sp, #28]
 8005960:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005964:	931a      	str	r3, [sp, #104]	; 0x68
 8005966:	4654      	mov	r4, sl
 8005968:	2205      	movs	r2, #5
 800596a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800596e:	4858      	ldr	r0, [pc, #352]	; (8005ad0 <_vfiprintf_r+0x24c>)
 8005970:	f7fa fc2e 	bl	80001d0 <memchr>
 8005974:	9a04      	ldr	r2, [sp, #16]
 8005976:	b9d8      	cbnz	r0, 80059b0 <_vfiprintf_r+0x12c>
 8005978:	06d1      	lsls	r1, r2, #27
 800597a:	bf44      	itt	mi
 800597c:	2320      	movmi	r3, #32
 800597e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005982:	0713      	lsls	r3, r2, #28
 8005984:	bf44      	itt	mi
 8005986:	232b      	movmi	r3, #43	; 0x2b
 8005988:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800598c:	f89a 3000 	ldrb.w	r3, [sl]
 8005990:	2b2a      	cmp	r3, #42	; 0x2a
 8005992:	d015      	beq.n	80059c0 <_vfiprintf_r+0x13c>
 8005994:	9a07      	ldr	r2, [sp, #28]
 8005996:	4654      	mov	r4, sl
 8005998:	2000      	movs	r0, #0
 800599a:	f04f 0c0a 	mov.w	ip, #10
 800599e:	4621      	mov	r1, r4
 80059a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059a4:	3b30      	subs	r3, #48	; 0x30
 80059a6:	2b09      	cmp	r3, #9
 80059a8:	d94e      	bls.n	8005a48 <_vfiprintf_r+0x1c4>
 80059aa:	b1b0      	cbz	r0, 80059da <_vfiprintf_r+0x156>
 80059ac:	9207      	str	r2, [sp, #28]
 80059ae:	e014      	b.n	80059da <_vfiprintf_r+0x156>
 80059b0:	eba0 0308 	sub.w	r3, r0, r8
 80059b4:	fa09 f303 	lsl.w	r3, r9, r3
 80059b8:	4313      	orrs	r3, r2
 80059ba:	9304      	str	r3, [sp, #16]
 80059bc:	46a2      	mov	sl, r4
 80059be:	e7d2      	b.n	8005966 <_vfiprintf_r+0xe2>
 80059c0:	9b03      	ldr	r3, [sp, #12]
 80059c2:	1d19      	adds	r1, r3, #4
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	9103      	str	r1, [sp, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	bfbb      	ittet	lt
 80059cc:	425b      	neglt	r3, r3
 80059ce:	f042 0202 	orrlt.w	r2, r2, #2
 80059d2:	9307      	strge	r3, [sp, #28]
 80059d4:	9307      	strlt	r3, [sp, #28]
 80059d6:	bfb8      	it	lt
 80059d8:	9204      	strlt	r2, [sp, #16]
 80059da:	7823      	ldrb	r3, [r4, #0]
 80059dc:	2b2e      	cmp	r3, #46	; 0x2e
 80059de:	d10c      	bne.n	80059fa <_vfiprintf_r+0x176>
 80059e0:	7863      	ldrb	r3, [r4, #1]
 80059e2:	2b2a      	cmp	r3, #42	; 0x2a
 80059e4:	d135      	bne.n	8005a52 <_vfiprintf_r+0x1ce>
 80059e6:	9b03      	ldr	r3, [sp, #12]
 80059e8:	1d1a      	adds	r2, r3, #4
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	9203      	str	r2, [sp, #12]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	bfb8      	it	lt
 80059f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80059f6:	3402      	adds	r4, #2
 80059f8:	9305      	str	r3, [sp, #20]
 80059fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005ae0 <_vfiprintf_r+0x25c>
 80059fe:	7821      	ldrb	r1, [r4, #0]
 8005a00:	2203      	movs	r2, #3
 8005a02:	4650      	mov	r0, sl
 8005a04:	f7fa fbe4 	bl	80001d0 <memchr>
 8005a08:	b140      	cbz	r0, 8005a1c <_vfiprintf_r+0x198>
 8005a0a:	2340      	movs	r3, #64	; 0x40
 8005a0c:	eba0 000a 	sub.w	r0, r0, sl
 8005a10:	fa03 f000 	lsl.w	r0, r3, r0
 8005a14:	9b04      	ldr	r3, [sp, #16]
 8005a16:	4303      	orrs	r3, r0
 8005a18:	3401      	adds	r4, #1
 8005a1a:	9304      	str	r3, [sp, #16]
 8005a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a20:	482c      	ldr	r0, [pc, #176]	; (8005ad4 <_vfiprintf_r+0x250>)
 8005a22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a26:	2206      	movs	r2, #6
 8005a28:	f7fa fbd2 	bl	80001d0 <memchr>
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	d03f      	beq.n	8005ab0 <_vfiprintf_r+0x22c>
 8005a30:	4b29      	ldr	r3, [pc, #164]	; (8005ad8 <_vfiprintf_r+0x254>)
 8005a32:	bb1b      	cbnz	r3, 8005a7c <_vfiprintf_r+0x1f8>
 8005a34:	9b03      	ldr	r3, [sp, #12]
 8005a36:	3307      	adds	r3, #7
 8005a38:	f023 0307 	bic.w	r3, r3, #7
 8005a3c:	3308      	adds	r3, #8
 8005a3e:	9303      	str	r3, [sp, #12]
 8005a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a42:	443b      	add	r3, r7
 8005a44:	9309      	str	r3, [sp, #36]	; 0x24
 8005a46:	e767      	b.n	8005918 <_vfiprintf_r+0x94>
 8005a48:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a4c:	460c      	mov	r4, r1
 8005a4e:	2001      	movs	r0, #1
 8005a50:	e7a5      	b.n	800599e <_vfiprintf_r+0x11a>
 8005a52:	2300      	movs	r3, #0
 8005a54:	3401      	adds	r4, #1
 8005a56:	9305      	str	r3, [sp, #20]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	f04f 0c0a 	mov.w	ip, #10
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a64:	3a30      	subs	r2, #48	; 0x30
 8005a66:	2a09      	cmp	r2, #9
 8005a68:	d903      	bls.n	8005a72 <_vfiprintf_r+0x1ee>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0c5      	beq.n	80059fa <_vfiprintf_r+0x176>
 8005a6e:	9105      	str	r1, [sp, #20]
 8005a70:	e7c3      	b.n	80059fa <_vfiprintf_r+0x176>
 8005a72:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a76:	4604      	mov	r4, r0
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e7f0      	b.n	8005a5e <_vfiprintf_r+0x1da>
 8005a7c:	ab03      	add	r3, sp, #12
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	462a      	mov	r2, r5
 8005a82:	4b16      	ldr	r3, [pc, #88]	; (8005adc <_vfiprintf_r+0x258>)
 8005a84:	a904      	add	r1, sp, #16
 8005a86:	4630      	mov	r0, r6
 8005a88:	f3af 8000 	nop.w
 8005a8c:	4607      	mov	r7, r0
 8005a8e:	1c78      	adds	r0, r7, #1
 8005a90:	d1d6      	bne.n	8005a40 <_vfiprintf_r+0x1bc>
 8005a92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a94:	07d9      	lsls	r1, r3, #31
 8005a96:	d405      	bmi.n	8005aa4 <_vfiprintf_r+0x220>
 8005a98:	89ab      	ldrh	r3, [r5, #12]
 8005a9a:	059a      	lsls	r2, r3, #22
 8005a9c:	d402      	bmi.n	8005aa4 <_vfiprintf_r+0x220>
 8005a9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005aa0:	f7ff fdb7 	bl	8005612 <__retarget_lock_release_recursive>
 8005aa4:	89ab      	ldrh	r3, [r5, #12]
 8005aa6:	065b      	lsls	r3, r3, #25
 8005aa8:	f53f af12 	bmi.w	80058d0 <_vfiprintf_r+0x4c>
 8005aac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005aae:	e711      	b.n	80058d4 <_vfiprintf_r+0x50>
 8005ab0:	ab03      	add	r3, sp, #12
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	462a      	mov	r2, r5
 8005ab6:	4b09      	ldr	r3, [pc, #36]	; (8005adc <_vfiprintf_r+0x258>)
 8005ab8:	a904      	add	r1, sp, #16
 8005aba:	4630      	mov	r0, r6
 8005abc:	f000 f880 	bl	8005bc0 <_printf_i>
 8005ac0:	e7e4      	b.n	8005a8c <_vfiprintf_r+0x208>
 8005ac2:	bf00      	nop
 8005ac4:	080060b8 	.word	0x080060b8
 8005ac8:	080060d8 	.word	0x080060d8
 8005acc:	08006098 	.word	0x08006098
 8005ad0:	080060f8 	.word	0x080060f8
 8005ad4:	08006102 	.word	0x08006102
 8005ad8:	00000000 	.word	0x00000000
 8005adc:	0800585f 	.word	0x0800585f
 8005ae0:	080060fe 	.word	0x080060fe

08005ae4 <_printf_common>:
 8005ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae8:	4616      	mov	r6, r2
 8005aea:	4699      	mov	r9, r3
 8005aec:	688a      	ldr	r2, [r1, #8]
 8005aee:	690b      	ldr	r3, [r1, #16]
 8005af0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005af4:	4293      	cmp	r3, r2
 8005af6:	bfb8      	it	lt
 8005af8:	4613      	movlt	r3, r2
 8005afa:	6033      	str	r3, [r6, #0]
 8005afc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b00:	4607      	mov	r7, r0
 8005b02:	460c      	mov	r4, r1
 8005b04:	b10a      	cbz	r2, 8005b0a <_printf_common+0x26>
 8005b06:	3301      	adds	r3, #1
 8005b08:	6033      	str	r3, [r6, #0]
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	0699      	lsls	r1, r3, #26
 8005b0e:	bf42      	ittt	mi
 8005b10:	6833      	ldrmi	r3, [r6, #0]
 8005b12:	3302      	addmi	r3, #2
 8005b14:	6033      	strmi	r3, [r6, #0]
 8005b16:	6825      	ldr	r5, [r4, #0]
 8005b18:	f015 0506 	ands.w	r5, r5, #6
 8005b1c:	d106      	bne.n	8005b2c <_printf_common+0x48>
 8005b1e:	f104 0a19 	add.w	sl, r4, #25
 8005b22:	68e3      	ldr	r3, [r4, #12]
 8005b24:	6832      	ldr	r2, [r6, #0]
 8005b26:	1a9b      	subs	r3, r3, r2
 8005b28:	42ab      	cmp	r3, r5
 8005b2a:	dc26      	bgt.n	8005b7a <_printf_common+0x96>
 8005b2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b30:	1e13      	subs	r3, r2, #0
 8005b32:	6822      	ldr	r2, [r4, #0]
 8005b34:	bf18      	it	ne
 8005b36:	2301      	movne	r3, #1
 8005b38:	0692      	lsls	r2, r2, #26
 8005b3a:	d42b      	bmi.n	8005b94 <_printf_common+0xb0>
 8005b3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b40:	4649      	mov	r1, r9
 8005b42:	4638      	mov	r0, r7
 8005b44:	47c0      	blx	r8
 8005b46:	3001      	adds	r0, #1
 8005b48:	d01e      	beq.n	8005b88 <_printf_common+0xa4>
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	68e5      	ldr	r5, [r4, #12]
 8005b4e:	6832      	ldr	r2, [r6, #0]
 8005b50:	f003 0306 	and.w	r3, r3, #6
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	bf08      	it	eq
 8005b58:	1aad      	subeq	r5, r5, r2
 8005b5a:	68a3      	ldr	r3, [r4, #8]
 8005b5c:	6922      	ldr	r2, [r4, #16]
 8005b5e:	bf0c      	ite	eq
 8005b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b64:	2500      	movne	r5, #0
 8005b66:	4293      	cmp	r3, r2
 8005b68:	bfc4      	itt	gt
 8005b6a:	1a9b      	subgt	r3, r3, r2
 8005b6c:	18ed      	addgt	r5, r5, r3
 8005b6e:	2600      	movs	r6, #0
 8005b70:	341a      	adds	r4, #26
 8005b72:	42b5      	cmp	r5, r6
 8005b74:	d11a      	bne.n	8005bac <_printf_common+0xc8>
 8005b76:	2000      	movs	r0, #0
 8005b78:	e008      	b.n	8005b8c <_printf_common+0xa8>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	4652      	mov	r2, sl
 8005b7e:	4649      	mov	r1, r9
 8005b80:	4638      	mov	r0, r7
 8005b82:	47c0      	blx	r8
 8005b84:	3001      	adds	r0, #1
 8005b86:	d103      	bne.n	8005b90 <_printf_common+0xac>
 8005b88:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b90:	3501      	adds	r5, #1
 8005b92:	e7c6      	b.n	8005b22 <_printf_common+0x3e>
 8005b94:	18e1      	adds	r1, r4, r3
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	2030      	movs	r0, #48	; 0x30
 8005b9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b9e:	4422      	add	r2, r4
 8005ba0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ba4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ba8:	3302      	adds	r3, #2
 8005baa:	e7c7      	b.n	8005b3c <_printf_common+0x58>
 8005bac:	2301      	movs	r3, #1
 8005bae:	4622      	mov	r2, r4
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	47c0      	blx	r8
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	d0e6      	beq.n	8005b88 <_printf_common+0xa4>
 8005bba:	3601      	adds	r6, #1
 8005bbc:	e7d9      	b.n	8005b72 <_printf_common+0x8e>
	...

08005bc0 <_printf_i>:
 8005bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc4:	460c      	mov	r4, r1
 8005bc6:	4691      	mov	r9, r2
 8005bc8:	7e27      	ldrb	r7, [r4, #24]
 8005bca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005bcc:	2f78      	cmp	r7, #120	; 0x78
 8005bce:	4680      	mov	r8, r0
 8005bd0:	469a      	mov	sl, r3
 8005bd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bd6:	d807      	bhi.n	8005be8 <_printf_i+0x28>
 8005bd8:	2f62      	cmp	r7, #98	; 0x62
 8005bda:	d80a      	bhi.n	8005bf2 <_printf_i+0x32>
 8005bdc:	2f00      	cmp	r7, #0
 8005bde:	f000 80d8 	beq.w	8005d92 <_printf_i+0x1d2>
 8005be2:	2f58      	cmp	r7, #88	; 0x58
 8005be4:	f000 80a3 	beq.w	8005d2e <_printf_i+0x16e>
 8005be8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005bec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bf0:	e03a      	b.n	8005c68 <_printf_i+0xa8>
 8005bf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bf6:	2b15      	cmp	r3, #21
 8005bf8:	d8f6      	bhi.n	8005be8 <_printf_i+0x28>
 8005bfa:	a001      	add	r0, pc, #4	; (adr r0, 8005c00 <_printf_i+0x40>)
 8005bfc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c00:	08005c59 	.word	0x08005c59
 8005c04:	08005c6d 	.word	0x08005c6d
 8005c08:	08005be9 	.word	0x08005be9
 8005c0c:	08005be9 	.word	0x08005be9
 8005c10:	08005be9 	.word	0x08005be9
 8005c14:	08005be9 	.word	0x08005be9
 8005c18:	08005c6d 	.word	0x08005c6d
 8005c1c:	08005be9 	.word	0x08005be9
 8005c20:	08005be9 	.word	0x08005be9
 8005c24:	08005be9 	.word	0x08005be9
 8005c28:	08005be9 	.word	0x08005be9
 8005c2c:	08005d79 	.word	0x08005d79
 8005c30:	08005c9d 	.word	0x08005c9d
 8005c34:	08005d5b 	.word	0x08005d5b
 8005c38:	08005be9 	.word	0x08005be9
 8005c3c:	08005be9 	.word	0x08005be9
 8005c40:	08005d9b 	.word	0x08005d9b
 8005c44:	08005be9 	.word	0x08005be9
 8005c48:	08005c9d 	.word	0x08005c9d
 8005c4c:	08005be9 	.word	0x08005be9
 8005c50:	08005be9 	.word	0x08005be9
 8005c54:	08005d63 	.word	0x08005d63
 8005c58:	680b      	ldr	r3, [r1, #0]
 8005c5a:	1d1a      	adds	r2, r3, #4
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	600a      	str	r2, [r1, #0]
 8005c60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e0a3      	b.n	8005db4 <_printf_i+0x1f4>
 8005c6c:	6825      	ldr	r5, [r4, #0]
 8005c6e:	6808      	ldr	r0, [r1, #0]
 8005c70:	062e      	lsls	r6, r5, #24
 8005c72:	f100 0304 	add.w	r3, r0, #4
 8005c76:	d50a      	bpl.n	8005c8e <_printf_i+0xce>
 8005c78:	6805      	ldr	r5, [r0, #0]
 8005c7a:	600b      	str	r3, [r1, #0]
 8005c7c:	2d00      	cmp	r5, #0
 8005c7e:	da03      	bge.n	8005c88 <_printf_i+0xc8>
 8005c80:	232d      	movs	r3, #45	; 0x2d
 8005c82:	426d      	negs	r5, r5
 8005c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c88:	485e      	ldr	r0, [pc, #376]	; (8005e04 <_printf_i+0x244>)
 8005c8a:	230a      	movs	r3, #10
 8005c8c:	e019      	b.n	8005cc2 <_printf_i+0x102>
 8005c8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005c92:	6805      	ldr	r5, [r0, #0]
 8005c94:	600b      	str	r3, [r1, #0]
 8005c96:	bf18      	it	ne
 8005c98:	b22d      	sxthne	r5, r5
 8005c9a:	e7ef      	b.n	8005c7c <_printf_i+0xbc>
 8005c9c:	680b      	ldr	r3, [r1, #0]
 8005c9e:	6825      	ldr	r5, [r4, #0]
 8005ca0:	1d18      	adds	r0, r3, #4
 8005ca2:	6008      	str	r0, [r1, #0]
 8005ca4:	0628      	lsls	r0, r5, #24
 8005ca6:	d501      	bpl.n	8005cac <_printf_i+0xec>
 8005ca8:	681d      	ldr	r5, [r3, #0]
 8005caa:	e002      	b.n	8005cb2 <_printf_i+0xf2>
 8005cac:	0669      	lsls	r1, r5, #25
 8005cae:	d5fb      	bpl.n	8005ca8 <_printf_i+0xe8>
 8005cb0:	881d      	ldrh	r5, [r3, #0]
 8005cb2:	4854      	ldr	r0, [pc, #336]	; (8005e04 <_printf_i+0x244>)
 8005cb4:	2f6f      	cmp	r7, #111	; 0x6f
 8005cb6:	bf0c      	ite	eq
 8005cb8:	2308      	moveq	r3, #8
 8005cba:	230a      	movne	r3, #10
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cc2:	6866      	ldr	r6, [r4, #4]
 8005cc4:	60a6      	str	r6, [r4, #8]
 8005cc6:	2e00      	cmp	r6, #0
 8005cc8:	bfa2      	ittt	ge
 8005cca:	6821      	ldrge	r1, [r4, #0]
 8005ccc:	f021 0104 	bicge.w	r1, r1, #4
 8005cd0:	6021      	strge	r1, [r4, #0]
 8005cd2:	b90d      	cbnz	r5, 8005cd8 <_printf_i+0x118>
 8005cd4:	2e00      	cmp	r6, #0
 8005cd6:	d04d      	beq.n	8005d74 <_printf_i+0x1b4>
 8005cd8:	4616      	mov	r6, r2
 8005cda:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cde:	fb03 5711 	mls	r7, r3, r1, r5
 8005ce2:	5dc7      	ldrb	r7, [r0, r7]
 8005ce4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ce8:	462f      	mov	r7, r5
 8005cea:	42bb      	cmp	r3, r7
 8005cec:	460d      	mov	r5, r1
 8005cee:	d9f4      	bls.n	8005cda <_printf_i+0x11a>
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d10b      	bne.n	8005d0c <_printf_i+0x14c>
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	07df      	lsls	r7, r3, #31
 8005cf8:	d508      	bpl.n	8005d0c <_printf_i+0x14c>
 8005cfa:	6923      	ldr	r3, [r4, #16]
 8005cfc:	6861      	ldr	r1, [r4, #4]
 8005cfe:	4299      	cmp	r1, r3
 8005d00:	bfde      	ittt	le
 8005d02:	2330      	movle	r3, #48	; 0x30
 8005d04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d0c:	1b92      	subs	r2, r2, r6
 8005d0e:	6122      	str	r2, [r4, #16]
 8005d10:	f8cd a000 	str.w	sl, [sp]
 8005d14:	464b      	mov	r3, r9
 8005d16:	aa03      	add	r2, sp, #12
 8005d18:	4621      	mov	r1, r4
 8005d1a:	4640      	mov	r0, r8
 8005d1c:	f7ff fee2 	bl	8005ae4 <_printf_common>
 8005d20:	3001      	adds	r0, #1
 8005d22:	d14c      	bne.n	8005dbe <_printf_i+0x1fe>
 8005d24:	f04f 30ff 	mov.w	r0, #4294967295
 8005d28:	b004      	add	sp, #16
 8005d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2e:	4835      	ldr	r0, [pc, #212]	; (8005e04 <_printf_i+0x244>)
 8005d30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d34:	6823      	ldr	r3, [r4, #0]
 8005d36:	680e      	ldr	r6, [r1, #0]
 8005d38:	061f      	lsls	r7, r3, #24
 8005d3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d3e:	600e      	str	r6, [r1, #0]
 8005d40:	d514      	bpl.n	8005d6c <_printf_i+0x1ac>
 8005d42:	07d9      	lsls	r1, r3, #31
 8005d44:	bf44      	itt	mi
 8005d46:	f043 0320 	orrmi.w	r3, r3, #32
 8005d4a:	6023      	strmi	r3, [r4, #0]
 8005d4c:	b91d      	cbnz	r5, 8005d56 <_printf_i+0x196>
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	f023 0320 	bic.w	r3, r3, #32
 8005d54:	6023      	str	r3, [r4, #0]
 8005d56:	2310      	movs	r3, #16
 8005d58:	e7b0      	b.n	8005cbc <_printf_i+0xfc>
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	f043 0320 	orr.w	r3, r3, #32
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	2378      	movs	r3, #120	; 0x78
 8005d64:	4828      	ldr	r0, [pc, #160]	; (8005e08 <_printf_i+0x248>)
 8005d66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d6a:	e7e3      	b.n	8005d34 <_printf_i+0x174>
 8005d6c:	065e      	lsls	r6, r3, #25
 8005d6e:	bf48      	it	mi
 8005d70:	b2ad      	uxthmi	r5, r5
 8005d72:	e7e6      	b.n	8005d42 <_printf_i+0x182>
 8005d74:	4616      	mov	r6, r2
 8005d76:	e7bb      	b.n	8005cf0 <_printf_i+0x130>
 8005d78:	680b      	ldr	r3, [r1, #0]
 8005d7a:	6826      	ldr	r6, [r4, #0]
 8005d7c:	6960      	ldr	r0, [r4, #20]
 8005d7e:	1d1d      	adds	r5, r3, #4
 8005d80:	600d      	str	r5, [r1, #0]
 8005d82:	0635      	lsls	r5, r6, #24
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	d501      	bpl.n	8005d8c <_printf_i+0x1cc>
 8005d88:	6018      	str	r0, [r3, #0]
 8005d8a:	e002      	b.n	8005d92 <_printf_i+0x1d2>
 8005d8c:	0671      	lsls	r1, r6, #25
 8005d8e:	d5fb      	bpl.n	8005d88 <_printf_i+0x1c8>
 8005d90:	8018      	strh	r0, [r3, #0]
 8005d92:	2300      	movs	r3, #0
 8005d94:	6123      	str	r3, [r4, #16]
 8005d96:	4616      	mov	r6, r2
 8005d98:	e7ba      	b.n	8005d10 <_printf_i+0x150>
 8005d9a:	680b      	ldr	r3, [r1, #0]
 8005d9c:	1d1a      	adds	r2, r3, #4
 8005d9e:	600a      	str	r2, [r1, #0]
 8005da0:	681e      	ldr	r6, [r3, #0]
 8005da2:	6862      	ldr	r2, [r4, #4]
 8005da4:	2100      	movs	r1, #0
 8005da6:	4630      	mov	r0, r6
 8005da8:	f7fa fa12 	bl	80001d0 <memchr>
 8005dac:	b108      	cbz	r0, 8005db2 <_printf_i+0x1f2>
 8005dae:	1b80      	subs	r0, r0, r6
 8005db0:	6060      	str	r0, [r4, #4]
 8005db2:	6863      	ldr	r3, [r4, #4]
 8005db4:	6123      	str	r3, [r4, #16]
 8005db6:	2300      	movs	r3, #0
 8005db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dbc:	e7a8      	b.n	8005d10 <_printf_i+0x150>
 8005dbe:	6923      	ldr	r3, [r4, #16]
 8005dc0:	4632      	mov	r2, r6
 8005dc2:	4649      	mov	r1, r9
 8005dc4:	4640      	mov	r0, r8
 8005dc6:	47d0      	blx	sl
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d0ab      	beq.n	8005d24 <_printf_i+0x164>
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	079b      	lsls	r3, r3, #30
 8005dd0:	d413      	bmi.n	8005dfa <_printf_i+0x23a>
 8005dd2:	68e0      	ldr	r0, [r4, #12]
 8005dd4:	9b03      	ldr	r3, [sp, #12]
 8005dd6:	4298      	cmp	r0, r3
 8005dd8:	bfb8      	it	lt
 8005dda:	4618      	movlt	r0, r3
 8005ddc:	e7a4      	b.n	8005d28 <_printf_i+0x168>
 8005dde:	2301      	movs	r3, #1
 8005de0:	4632      	mov	r2, r6
 8005de2:	4649      	mov	r1, r9
 8005de4:	4640      	mov	r0, r8
 8005de6:	47d0      	blx	sl
 8005de8:	3001      	adds	r0, #1
 8005dea:	d09b      	beq.n	8005d24 <_printf_i+0x164>
 8005dec:	3501      	adds	r5, #1
 8005dee:	68e3      	ldr	r3, [r4, #12]
 8005df0:	9903      	ldr	r1, [sp, #12]
 8005df2:	1a5b      	subs	r3, r3, r1
 8005df4:	42ab      	cmp	r3, r5
 8005df6:	dcf2      	bgt.n	8005dde <_printf_i+0x21e>
 8005df8:	e7eb      	b.n	8005dd2 <_printf_i+0x212>
 8005dfa:	2500      	movs	r5, #0
 8005dfc:	f104 0619 	add.w	r6, r4, #25
 8005e00:	e7f5      	b.n	8005dee <_printf_i+0x22e>
 8005e02:	bf00      	nop
 8005e04:	08006109 	.word	0x08006109
 8005e08:	0800611a 	.word	0x0800611a

08005e0c <_sbrk_r>:
 8005e0c:	b538      	push	{r3, r4, r5, lr}
 8005e0e:	4d06      	ldr	r5, [pc, #24]	; (8005e28 <_sbrk_r+0x1c>)
 8005e10:	2300      	movs	r3, #0
 8005e12:	4604      	mov	r4, r0
 8005e14:	4608      	mov	r0, r1
 8005e16:	602b      	str	r3, [r5, #0]
 8005e18:	f7fa ffa8 	bl	8000d6c <_sbrk>
 8005e1c:	1c43      	adds	r3, r0, #1
 8005e1e:	d102      	bne.n	8005e26 <_sbrk_r+0x1a>
 8005e20:	682b      	ldr	r3, [r5, #0]
 8005e22:	b103      	cbz	r3, 8005e26 <_sbrk_r+0x1a>
 8005e24:	6023      	str	r3, [r4, #0]
 8005e26:	bd38      	pop	{r3, r4, r5, pc}
 8005e28:	20000bac 	.word	0x20000bac

08005e2c <__sread>:
 8005e2c:	b510      	push	{r4, lr}
 8005e2e:	460c      	mov	r4, r1
 8005e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e34:	f000 f8a0 	bl	8005f78 <_read_r>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	bfab      	itete	ge
 8005e3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e3e:	89a3      	ldrhlt	r3, [r4, #12]
 8005e40:	181b      	addge	r3, r3, r0
 8005e42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e46:	bfac      	ite	ge
 8005e48:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e4a:	81a3      	strhlt	r3, [r4, #12]
 8005e4c:	bd10      	pop	{r4, pc}

08005e4e <__swrite>:
 8005e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e52:	461f      	mov	r7, r3
 8005e54:	898b      	ldrh	r3, [r1, #12]
 8005e56:	05db      	lsls	r3, r3, #23
 8005e58:	4605      	mov	r5, r0
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	4616      	mov	r6, r2
 8005e5e:	d505      	bpl.n	8005e6c <__swrite+0x1e>
 8005e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e64:	2302      	movs	r3, #2
 8005e66:	2200      	movs	r2, #0
 8005e68:	f000 f868 	bl	8005f3c <_lseek_r>
 8005e6c:	89a3      	ldrh	r3, [r4, #12]
 8005e6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e76:	81a3      	strh	r3, [r4, #12]
 8005e78:	4632      	mov	r2, r6
 8005e7a:	463b      	mov	r3, r7
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e82:	f000 b817 	b.w	8005eb4 <_write_r>

08005e86 <__sseek>:
 8005e86:	b510      	push	{r4, lr}
 8005e88:	460c      	mov	r4, r1
 8005e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e8e:	f000 f855 	bl	8005f3c <_lseek_r>
 8005e92:	1c43      	adds	r3, r0, #1
 8005e94:	89a3      	ldrh	r3, [r4, #12]
 8005e96:	bf15      	itete	ne
 8005e98:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ea2:	81a3      	strheq	r3, [r4, #12]
 8005ea4:	bf18      	it	ne
 8005ea6:	81a3      	strhne	r3, [r4, #12]
 8005ea8:	bd10      	pop	{r4, pc}

08005eaa <__sclose>:
 8005eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eae:	f000 b813 	b.w	8005ed8 <_close_r>
	...

08005eb4 <_write_r>:
 8005eb4:	b538      	push	{r3, r4, r5, lr}
 8005eb6:	4d07      	ldr	r5, [pc, #28]	; (8005ed4 <_write_r+0x20>)
 8005eb8:	4604      	mov	r4, r0
 8005eba:	4608      	mov	r0, r1
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	602a      	str	r2, [r5, #0]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f7fa ff01 	bl	8000cca <_write>
 8005ec8:	1c43      	adds	r3, r0, #1
 8005eca:	d102      	bne.n	8005ed2 <_write_r+0x1e>
 8005ecc:	682b      	ldr	r3, [r5, #0]
 8005ece:	b103      	cbz	r3, 8005ed2 <_write_r+0x1e>
 8005ed0:	6023      	str	r3, [r4, #0]
 8005ed2:	bd38      	pop	{r3, r4, r5, pc}
 8005ed4:	20000bac 	.word	0x20000bac

08005ed8 <_close_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	4d06      	ldr	r5, [pc, #24]	; (8005ef4 <_close_r+0x1c>)
 8005edc:	2300      	movs	r3, #0
 8005ede:	4604      	mov	r4, r0
 8005ee0:	4608      	mov	r0, r1
 8005ee2:	602b      	str	r3, [r5, #0]
 8005ee4:	f7fa ff0d 	bl	8000d02 <_close>
 8005ee8:	1c43      	adds	r3, r0, #1
 8005eea:	d102      	bne.n	8005ef2 <_close_r+0x1a>
 8005eec:	682b      	ldr	r3, [r5, #0]
 8005eee:	b103      	cbz	r3, 8005ef2 <_close_r+0x1a>
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	bd38      	pop	{r3, r4, r5, pc}
 8005ef4:	20000bac 	.word	0x20000bac

08005ef8 <_fstat_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4d07      	ldr	r5, [pc, #28]	; (8005f18 <_fstat_r+0x20>)
 8005efc:	2300      	movs	r3, #0
 8005efe:	4604      	mov	r4, r0
 8005f00:	4608      	mov	r0, r1
 8005f02:	4611      	mov	r1, r2
 8005f04:	602b      	str	r3, [r5, #0]
 8005f06:	f7fa ff08 	bl	8000d1a <_fstat>
 8005f0a:	1c43      	adds	r3, r0, #1
 8005f0c:	d102      	bne.n	8005f14 <_fstat_r+0x1c>
 8005f0e:	682b      	ldr	r3, [r5, #0]
 8005f10:	b103      	cbz	r3, 8005f14 <_fstat_r+0x1c>
 8005f12:	6023      	str	r3, [r4, #0]
 8005f14:	bd38      	pop	{r3, r4, r5, pc}
 8005f16:	bf00      	nop
 8005f18:	20000bac 	.word	0x20000bac

08005f1c <_isatty_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4d06      	ldr	r5, [pc, #24]	; (8005f38 <_isatty_r+0x1c>)
 8005f20:	2300      	movs	r3, #0
 8005f22:	4604      	mov	r4, r0
 8005f24:	4608      	mov	r0, r1
 8005f26:	602b      	str	r3, [r5, #0]
 8005f28:	f7fa ff07 	bl	8000d3a <_isatty>
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d102      	bne.n	8005f36 <_isatty_r+0x1a>
 8005f30:	682b      	ldr	r3, [r5, #0]
 8005f32:	b103      	cbz	r3, 8005f36 <_isatty_r+0x1a>
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	bd38      	pop	{r3, r4, r5, pc}
 8005f38:	20000bac 	.word	0x20000bac

08005f3c <_lseek_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4d07      	ldr	r5, [pc, #28]	; (8005f5c <_lseek_r+0x20>)
 8005f40:	4604      	mov	r4, r0
 8005f42:	4608      	mov	r0, r1
 8005f44:	4611      	mov	r1, r2
 8005f46:	2200      	movs	r2, #0
 8005f48:	602a      	str	r2, [r5, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f7fa ff00 	bl	8000d50 <_lseek>
 8005f50:	1c43      	adds	r3, r0, #1
 8005f52:	d102      	bne.n	8005f5a <_lseek_r+0x1e>
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	b103      	cbz	r3, 8005f5a <_lseek_r+0x1e>
 8005f58:	6023      	str	r3, [r4, #0]
 8005f5a:	bd38      	pop	{r3, r4, r5, pc}
 8005f5c:	20000bac 	.word	0x20000bac

08005f60 <__malloc_lock>:
 8005f60:	4801      	ldr	r0, [pc, #4]	; (8005f68 <__malloc_lock+0x8>)
 8005f62:	f7ff bb55 	b.w	8005610 <__retarget_lock_acquire_recursive>
 8005f66:	bf00      	nop
 8005f68:	20000ba4 	.word	0x20000ba4

08005f6c <__malloc_unlock>:
 8005f6c:	4801      	ldr	r0, [pc, #4]	; (8005f74 <__malloc_unlock+0x8>)
 8005f6e:	f7ff bb50 	b.w	8005612 <__retarget_lock_release_recursive>
 8005f72:	bf00      	nop
 8005f74:	20000ba4 	.word	0x20000ba4

08005f78 <_read_r>:
 8005f78:	b538      	push	{r3, r4, r5, lr}
 8005f7a:	4d07      	ldr	r5, [pc, #28]	; (8005f98 <_read_r+0x20>)
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	4608      	mov	r0, r1
 8005f80:	4611      	mov	r1, r2
 8005f82:	2200      	movs	r2, #0
 8005f84:	602a      	str	r2, [r5, #0]
 8005f86:	461a      	mov	r2, r3
 8005f88:	f7fa fe82 	bl	8000c90 <_read>
 8005f8c:	1c43      	adds	r3, r0, #1
 8005f8e:	d102      	bne.n	8005f96 <_read_r+0x1e>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	b103      	cbz	r3, 8005f96 <_read_r+0x1e>
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	bd38      	pop	{r3, r4, r5, pc}
 8005f98:	20000bac 	.word	0x20000bac

08005f9c <_init>:
 8005f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9e:	bf00      	nop
 8005fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fa2:	bc08      	pop	{r3}
 8005fa4:	469e      	mov	lr, r3
 8005fa6:	4770      	bx	lr

08005fa8 <_fini>:
 8005fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005faa:	bf00      	nop
 8005fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fae:	bc08      	pop	{r3}
 8005fb0:	469e      	mov	lr, r3
 8005fb2:	4770      	bx	lr
